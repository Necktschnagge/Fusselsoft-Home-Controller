
Fussl-01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00001ace  00001b62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ace  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000113  0080017e  0080017e  00001be0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004321  00000000  00000000  00001efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000125e  00000000  00000000  0000621d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001925  00000000  00000000  0000747b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000874  00000000  00000000  00008da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011e8  00000000  00000000  00009614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002565  00000000  00000000  0000a7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000cd61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ec       	ldi	r30, 0xCE	; 206
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 37       	cpi	r26, 0x7E	; 126
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ae e7       	ldi	r26, 0x7E	; 126
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 39       	cpi	r26, 0x91	; 145
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <main>
      c6:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <_ZN4arch7pushBitEb>:
	arch::programHeaderInterpreter();
}

void arch::pushBit(bool bit){
	/* push a bit to the end of the light line */
	PORTB = (PORTB & 0b11111110) | bit;
      cc:	98 b3       	in	r25, 0x18	; 24
      ce:	9e 7f       	andi	r25, 0xFE	; 254
      d0:	89 2b       	or	r24, r25
      d2:	88 bb       	out	0x18, r24	; 24
	PORTB ^= 0b00000010;
      d4:	98 b3       	in	r25, 0x18	; 24
      d6:	82 e0       	ldi	r24, 0x02	; 2
      d8:	98 27       	eor	r25, r24
      da:	98 bb       	out	0x18, r25	; 24
	PORTB ^= 0b00000010;
      dc:	98 b3       	in	r25, 0x18	; 24
      de:	89 27       	eor	r24, r25
      e0:	88 bb       	out	0x18, r24	; 24
      e2:	08 95       	ret

000000e4 <_ZN4arch5latchEv>:
}

void arch::latch(void){
	/* send a latch signal to the light line */
	PORTB ^= 0b00000100;
      e4:	98 b3       	in	r25, 0x18	; 24
      e6:	84 e0       	ldi	r24, 0x04	; 4
      e8:	98 27       	eor	r25, r24
      ea:	98 bb       	out	0x18, r25	; 24
	PORTB ^= 0b00000100;
      ec:	98 b3       	in	r25, 0x18	; 24
      ee:	89 27       	eor	r24, r25
      f0:	88 bb       	out	0x18, r24	; 24
      f2:	08 95       	ret

000000f4 <_ZN4arch15pushLineVisibleEj>:
}

void arch::pushLineVisible(uint16_t line){// for user needing manipulation
      f4:	cf 92       	push	r12
      f6:	df 92       	push	r13
      f8:	ef 92       	push	r14
      fa:	ff 92       	push	r15
      fc:	0f 93       	push	r16
      fe:	1f 93       	push	r17
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	7c 01       	movw	r14, r24
     106:	cf e0       	ldi	r28, 0x0F	; 15
     108:	d0 e0       	ldi	r29, 0x00	; 0
	/* push 16 bit to the light line (MSB first) and make it visible */
	for(int8_t i = 15; i>=0; --i){
		arch::pushBit(line & (1<<i));
     10a:	01 e0       	ldi	r16, 0x01	; 1
     10c:	10 e0       	ldi	r17, 0x00	; 0
     10e:	dd 24       	eor	r13, r13
     110:	d3 94       	inc	r13
     112:	c1 2c       	mov	r12, r1
     114:	98 01       	movw	r18, r16
     116:	0c 2e       	mov	r0, r28
     118:	02 c0       	rjmp	.+4      	; 0x11e <_ZN4arch15pushLineVisibleEj+0x2a>
     11a:	22 0f       	add	r18, r18
     11c:	33 1f       	adc	r19, r19
     11e:	0a 94       	dec	r0
     120:	e2 f7       	brpl	.-8      	; 0x11a <_ZN4arch15pushLineVisibleEj+0x26>
     122:	2e 21       	and	r18, r14
     124:	3f 21       	and	r19, r15
     126:	8d 2d       	mov	r24, r13
     128:	23 2b       	or	r18, r19
     12a:	09 f4       	brne	.+2      	; 0x12e <_ZN4arch15pushLineVisibleEj+0x3a>
     12c:	8c 2d       	mov	r24, r12
     12e:	ce df       	rcall	.-100    	; 0xcc <_ZN4arch7pushBitEb>
     130:	21 97       	sbiw	r28, 0x01	; 1
     132:	80 f7       	brcc	.-32     	; 0x114 <_ZN4arch15pushLineVisibleEj+0x20>
	}
	arch::latch();
     134:	d7 df       	rcall	.-82     	; 0xe4 <_ZN4arch5latchEv>
}
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	1f 91       	pop	r17
     13c:	0f 91       	pop	r16
     13e:	ff 90       	pop	r15
     140:	ef 90       	pop	r14
     142:	df 90       	pop	r13
     144:	cf 90       	pop	r12
     146:	08 95       	ret

00000148 <_ZN4arch10readBufferEv>:

void arch::readBuffer(void){
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
	/* check whether we can read from the light buffer. if so: execute one buffer entry. if not: set the bufferWait Flag */
	if (state.light.read!=state.light.write){
     14c:	c0 91 ef 01 	lds	r28, 0x01EF	; 0x8001ef <__data_end+0x71>
     150:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <__data_end+0x72>
     154:	c8 17       	cp	r28, r24
     156:	d1 f0       	breq	.+52     	; 0x18c <_ZN4arch10readBufferEv+0x44>
		if (state.light.buffer[state.light.read].light>>15 == 0){
     158:	d0 e0       	ldi	r29, 0x00	; 0
     15a:	fe 01       	movw	r30, r28
     15c:	ee 0f       	add	r30, r30
     15e:	ff 1f       	adc	r31, r31
     160:	ec 0f       	add	r30, r28
     162:	fd 1f       	adc	r31, r29
     164:	e1 54       	subi	r30, 0x41	; 65
     166:	fe 4f       	sbci	r31, 0xFE	; 254
     168:	80 81       	ld	r24, Z
     16a:	91 81       	ldd	r25, Z+1	; 0x01
     16c:	99 23       	and	r25, r25
     16e:	0c f0       	brlt	.+2      	; 0x172 <_ZN4arch10readBufferEv+0x2a>
			arch::pushLineVisible(state.light.buffer[state.light.read].light);
     170:	c1 df       	rcall	.-126    	; 0xf4 <_ZN4arch15pushLineVisibleEj>
inline void BufferWriteIndexerInc(){
	state.light.write = (state.light.write + 1 ) % BUFFERSIZE;
}

inline void BufferReadIndexerInc(){
	state.light.read = (state.light.read + 1) % BUFFERSIZE;
     172:	ce 01       	movw	r24, r28
     174:	01 96       	adiw	r24, 0x01	; 1
     176:	8f 70       	andi	r24, 0x0F	; 15
     178:	90 78       	andi	r25, 0x80	; 128
     17a:	99 23       	and	r25, r25
     17c:	24 f4       	brge	.+8      	; 0x186 <_ZN4arch10readBufferEv+0x3e>
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	80 6f       	ori	r24, 0xF0	; 240
     182:	9f 6f       	ori	r25, 0xFF	; 255
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <__data_end+0x71>
     18a:	03 c0       	rjmp	.+6      	; 0x192 <_ZN4arch10readBufferEv+0x4a>
			arch::pushLineVisible(state.light.buffer[state.light.read].light);
		}
		//### set timer = state.light.buffer[state.light.read].delay; after time execute arch::readBuffer
		BufferReadIndexerInc();
	} else {
		state.light.bufferWait = true;
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <__data_end+0x73>
		// set a waiting signal to led output??? <<<< gui can do ths
	}
}
     192:	df 91       	pop	r29
     194:	cf 91       	pop	r28
     196:	08 95       	ret

00000198 <_ZN4arch17instructionLengthEh>:

uint8_t arch::instructionLength(const uint8_t firstByte){
	/* return the length of the instruction in bytes when the first byte is given */
	if  (	(firstByte >= (3<<6)) /* ALU Register */
     198:	80 3c       	cpi	r24, 0xC0	; 192
     19a:	58 f4       	brcc	.+22     	; 0x1b2 <_ZN4arch17instructionLengthEh+0x1a>
		||	((firstByte & 0b11110100) == 0b10110100) /* DEC (Register) and WAIT-R */	){	
     19c:	98 2f       	mov	r25, r24
     19e:	94 7f       	andi	r25, 0xF4	; 244
     1a0:	94 3b       	cpi	r25, 0xB4	; 180
     1a2:	49 f0       	breq	.+18     	; 0x1b6 <_ZN4arch17instructionLengthEh+0x1e>
		return 1; // 8 bit
	}
	if ((firstByte & 0b11110000)==0x80){ /* Jump on Condition */
     1a4:	80 7f       	andi	r24, 0xF0	; 240
     1a6:	80 38       	cpi	r24, 0x80	; 128
     1a8:	41 f0       	breq	.+16     	; 0x1ba <_ZN4arch17instructionLengthEh+0x22>
		return 3; // 24 bit
	}
	if ((firstByte & 0b11110000)==0xA0){ /* CALL */
     1aa:	80 3a       	cpi	r24, 0xA0	; 160
     1ac:	41 f0       	breq	.+16     	; 0x1be <_ZN4arch17instructionLengthEh+0x26>
		return 8; // 64 bit
	}
	return 2; // 16 bit (for each other instruction)
     1ae:	82 e0       	ldi	r24, 0x02	; 2
     1b0:	08 95       	ret

uint8_t arch::instructionLength(const uint8_t firstByte){
	/* return the length of the instruction in bytes when the first byte is given */
	if  (	(firstByte >= (3<<6)) /* ALU Register */
		||	((firstByte & 0b11110100) == 0b10110100) /* DEC (Register) and WAIT-R */	){	
		return 1; // 8 bit
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	08 95       	ret
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	08 95       	ret
	}
	if ((firstByte & 0b11110000)==0x80){ /* Jump on Condition */
		return 3; // 24 bit
     1ba:	83 e0       	ldi	r24, 0x03	; 3
     1bc:	08 95       	ret
	}
	if ((firstByte & 0b11110000)==0xA0){ /* CALL */
		return 8; // 64 bit
     1be:	88 e0       	ldi	r24, 0x08	; 8
	}
	return 2; // 16 bit (for each other instruction)
}
     1c0:	08 95       	ret

000001c2 <_ZN4arch17EEPAddressHelper_EhhRKb>:

uint16_t arch::EEPAddressHelper_(uint8_t program, uint8_t instruction, const bool& counting){
     1c2:	cf 92       	push	r12
     1c4:	df 92       	push	r13
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	d8 2f       	mov	r29, r24
     1d4:	d6 2e       	mov	r13, r22
     1d6:	7a 01       	movw	r14, r20
	/* combined calculating of:
				EEPROM program address (given program ID, instruction of program)		(iff counting==false)
				program counting	(up to 255)											(iff counting)
																													*/
	uint16_t ptr = PROGRAMSTART;
	if ((program == 0) && !counting){
     1d8:	81 11       	cpse	r24, r1
     1da:	07 c0       	rjmp	.+14     	; 0x1ea <_ZN4arch17EEPAddressHelper_EhhRKb+0x28>
     1dc:	fa 01       	movw	r30, r20
     1de:	80 81       	ld	r24, Z
     1e0:	81 11       	cpse	r24, r1
     1e2:	0a c0       	rjmp	.+20     	; 0x1f8 <_ZN4arch17EEPAddressHelper_EhhRKb+0x36>
		ptr = EEPNULL;
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	9f ef       	ldi	r25, 0xFF	; 255
     1e8:	69 c0       	rjmp	.+210    	; 0x2bc <_ZN4arch17EEPAddressHelper_EhhRKb+0xfa>
		// ledError(3); ## please delete error from manuscript this should be allowed for compatibility
	} else {
		// select the program
		--program;
		if (counting) program = 0;
     1ea:	fa 01       	movw	r30, r20
     1ec:	80 81       	ld	r24, Z
     1ee:	81 11       	cpse	r24, r1
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_ZN4arch17EEPAddressHelper_EhhRKb+0x34>
	if ((program == 0) && !counting){
		ptr = EEPNULL;
		// ledError(3); ## please delete error from manuscript this should be allowed for compatibility
	} else {
		// select the program
		--program;
     1f2:	d1 50       	subi	r29, 0x01	; 1
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <_ZN4arch17EEPAddressHelper_EhhRKb+0x36>
		if (counting) program = 0;
     1f6:	d0 e0       	ldi	r29, 0x00	; 0
		while (program || counting){
			--program;
     1f8:	00 e0       	ldi	r16, 0x00	; 0
     1fa:	14 e0       	ldi	r17, 0x04	; 4
     1fc:	cc 24       	eor	r12, r12
     1fe:	ca 94       	dec	r12
     200:	2d c0       	rjmp	.+90     	; 0x25c <_ZN4arch17EEPAddressHelper_EhhRKb+0x9a>
     202:	d1 50       	subi	r29, 0x01	; 1
			ptr =  (static_cast<uint16_t>(eeprom_read_byte((uint8_t*)ptr))<<8) | eeprom_read_byte((uint8_t*)(ptr+1));// read two bytes big endian
     204:	c8 01       	movw	r24, r16
     206:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
     20a:	c8 2f       	mov	r28, r24
     20c:	c8 01       	movw	r24, r16
     20e:	01 96       	adiw	r24, 0x01	; 1
     210:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
     214:	2c 2f       	mov	r18, r28
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	32 2f       	mov	r19, r18
     21a:	22 27       	eor	r18, r18
     21c:	89 01       	movw	r16, r18
     21e:	08 2b       	or	r16, r24
			if (hardware::isEEPNull(ptr)) {
     220:	c8 01       	movw	r24, r16
     222:	7f d7       	rcall	.+3838   	; 0x1122 <_ZN8hardware9isEEPNullEj>
     224:	88 23       	and	r24, r24
     226:	81 f0       	breq	.+32     	; 0x248 <_ZN4arch17EEPAddressHelper_EhhRKb+0x86>
     228:	01 c0       	rjmp	.+2      	; 0x22c <_ZN4arch17EEPAddressHelper_EhhRKb+0x6a>
	} else {
		// select the program
		--program;
		if (counting) program = 0;
		while (program || counting){
			--program;
     22a:	dc 2d       	mov	r29, r12
			ptr =  (static_cast<uint16_t>(eeprom_read_byte((uint8_t*)ptr))<<8) | eeprom_read_byte((uint8_t*)(ptr+1));// read two bytes big endian
			if (hardware::isEEPNull(ptr)) {
				if (counting){
     22c:	f7 01       	movw	r30, r14
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	31 f0       	breq	.+12     	; 0x240 <_ZN4arch17EEPAddressHelper_EhhRKb+0x7e>
					return -program;
     234:	8d 2f       	mov	r24, r29
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	91 95       	neg	r25
     23a:	81 95       	neg	r24
     23c:	91 09       	sbc	r25, r1
     23e:	3e c0       	rjmp	.+124    	; 0x2bc <_ZN4arch17EEPAddressHelper_EhhRKb+0xfa>
				}
				led::error(101);
     240:	85 e6       	ldi	r24, 0x65	; 101
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_ZN3led5errorEj>
			}
			if ((program==0) && counting){
     248:	d1 11       	cpse	r29, r1
     24a:	08 c0       	rjmp	.+16     	; 0x25c <_ZN4arch17EEPAddressHelper_EhhRKb+0x9a>
     24c:	f7 01       	movw	r30, r14
     24e:	80 81       	ld	r24, Z
     250:	88 23       	and	r24, r24
     252:	21 f0       	breq	.+8      	; 0x25c <_ZN4arch17EEPAddressHelper_EhhRKb+0x9a>
				led::error(1);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <_ZN3led5errorEj>
		// ledError(3); ## please delete error from manuscript this should be allowed for compatibility
	} else {
		// select the program
		--program;
		if (counting) program = 0;
		while (program || counting){
     25c:	d1 11       	cpse	r29, r1
     25e:	d1 cf       	rjmp	.-94     	; 0x202 <_ZN4arch17EEPAddressHelper_EhhRKb+0x40>
     260:	f7 01       	movw	r30, r14
     262:	80 81       	ld	r24, Z
     264:	81 11       	cpse	r24, r1
     266:	16 c0       	rjmp	.+44     	; 0x294 <_ZN4arch17EEPAddressHelper_EhhRKb+0xd2>
		if (counting){
			led::error(102);
		}
		// select the certain instruction
		// instruction == 0 : init part of the program;
		if (instruction){
     268:	dd 20       	and	r13, r13
     26a:	81 f0       	breq	.+32     	; 0x28c <_ZN4arch17EEPAddressHelper_EhhRKb+0xca>
			ptr += 14;
     26c:	e8 01       	movw	r28, r16
     26e:	2e 96       	adiw	r28, 0x0e	; 14
			--instruction;
     270:	da 94       	dec	r13
			while (instruction){
     272:	dd 20       	and	r13, r13
     274:	69 f0       	breq	.+26     	; 0x290 <_ZN4arch17EEPAddressHelper_EhhRKb+0xce>
				--instruction;
     276:	da 94       	dec	r13
				ptr += arch::instructionLength(eeprom_read_byte((uint8_t*) ptr));
     278:	ce 01       	movw	r24, r28
     27a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
     27e:	8c df       	rcall	.-232    	; 0x198 <_ZN4arch17instructionLengthEh>
     280:	c8 0f       	add	r28, r24
     282:	d1 1d       	adc	r29, r1
		// select the certain instruction
		// instruction == 0 : init part of the program;
		if (instruction){
			ptr += 14;
			--instruction;
			while (instruction){
     284:	d1 10       	cpse	r13, r1
     286:	f7 cf       	rjmp	.-18     	; 0x276 <_ZN4arch17EEPAddressHelper_EhhRKb+0xb4>
				--instruction;
				ptr += arch::instructionLength(eeprom_read_byte((uint8_t*) ptr));
     288:	ce 01       	movw	r24, r28
     28a:	18 c0       	rjmp	.+48     	; 0x2bc <_ZN4arch17EEPAddressHelper_EhhRKb+0xfa>
     28c:	c8 01       	movw	r24, r16
     28e:	16 c0       	rjmp	.+44     	; 0x2bc <_ZN4arch17EEPAddressHelper_EhhRKb+0xfa>
			led::error(102);
		}
		// select the certain instruction
		// instruction == 0 : init part of the program;
		if (instruction){
			ptr += 14;
     290:	ce 01       	movw	r24, r28
     292:	14 c0       	rjmp	.+40     	; 0x2bc <_ZN4arch17EEPAddressHelper_EhhRKb+0xfa>
		// select the program
		--program;
		if (counting) program = 0;
		while (program || counting){
			--program;
			ptr =  (static_cast<uint16_t>(eeprom_read_byte((uint8_t*)ptr))<<8) | eeprom_read_byte((uint8_t*)(ptr+1));// read two bytes big endian
     294:	c8 01       	movw	r24, r16
     296:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
     29a:	c8 2f       	mov	r28, r24
     29c:	c8 01       	movw	r24, r16
     29e:	01 96       	adiw	r24, 0x01	; 1
     2a0:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
     2a4:	2c 2f       	mov	r18, r28
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	32 2f       	mov	r19, r18
     2aa:	22 27       	eor	r18, r18
     2ac:	89 01       	movw	r16, r18
     2ae:	08 2b       	or	r16, r24
			if (hardware::isEEPNull(ptr)) {
     2b0:	c8 01       	movw	r24, r16
     2b2:	37 d7       	rcall	.+3694   	; 0x1122 <_ZN8hardware9isEEPNullEj>
     2b4:	81 11       	cpse	r24, r1
     2b6:	b9 cf       	rjmp	.-142    	; 0x22a <_ZN4arch17EEPAddressHelper_EhhRKb+0x68>
	} else {
		// select the program
		--program;
		if (counting) program = 0;
		while (program || counting){
			--program;
     2b8:	dc 2d       	mov	r29, r12
     2ba:	d0 cf       	rjmp	.-96     	; 0x25c <_ZN4arch17EEPAddressHelper_EhhRKb+0x9a>
				ptr += arch::instructionLength(eeprom_read_byte((uint8_t*) ptr));
			}
		}
	}
	return ptr;
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	ff 90       	pop	r15
     2c6:	ef 90       	pop	r14
     2c8:	df 90       	pop	r13
     2ca:	cf 90       	pop	r12
     2cc:	08 95       	ret

000002ce <_ZN4arch14getProgramNameEhPc>:

void arch::getProgramName(uint8_t program, char* string_8_bytes){// for gui programmer
     2ce:	cf 92       	push	r12
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <_ZN4arch14getProgramNameEhPc+0x12>
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <_ZN4arch14getProgramNameEhPc+0x14>
     2e2:	1f 92       	push	r1
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	6b 01       	movw	r12, r22
	/* read the program name of a given program from the EEPROM */
	if (program == 0){
     2ea:	81 11       	cpse	r24, r1
     2ec:	10 c0       	rjmp	.+32     	; 0x30e <_ZN4arch14getProgramNameEhPc+0x40>
		char off[] = "OFF";
     2ee:	8f e4       	ldi	r24, 0x4F	; 79
     2f0:	96 e4       	ldi	r25, 0x46	; 70
     2f2:	a6 e4       	ldi	r26, 0x46	; 70
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	8a 83       	std	Y+2, r24	; 0x02
     2f8:	9b 83       	std	Y+3, r25	; 0x03
     2fa:	ac 83       	std	Y+4, r26	; 0x04
     2fc:	bd 83       	std	Y+5, r27	; 0x05
		hardware::copyString(string_8_bytes,off,8,false);
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	48 e0       	ldi	r20, 0x08	; 8
     302:	be 01       	movw	r22, r28
     304:	6e 5f       	subi	r22, 0xFE	; 254
     306:	7f 4f       	sbci	r23, 0xFF	; 255
     308:	c6 01       	movw	r24, r12
     30a:	1d d7       	rcall	.+3642   	; 0x1146 <_ZN8hardware10copyStringEPcPKchb>
     30c:	18 c0       	rjmp	.+48     	; 0x33e <_ZN4arch14getProgramNameEhPc+0x70>
					program counting	(up to 255)											(iff counting)
																														*/
	
	inline uint16_t getAddress(uint8_t program, uint8_t instruction){
		/* calculate the eeprom address of instruction (instruction) in program (program) */
		return EEPAddressHelper_(program,instruction);
     30e:	19 82       	std	Y+1, r1	; 0x01
     310:	ae 01       	movw	r20, r28
     312:	4f 5f       	subi	r20, 0xFF	; 255
     314:	5f 4f       	sbci	r21, 0xFF	; 255
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	54 df       	rcall	.-344    	; 0x1c2 <_ZN4arch17EEPAddressHelper_EhhRKb>
     31a:	76 01       	movw	r14, r12
     31c:	28 e0       	ldi	r18, 0x08	; 8
     31e:	c2 0e       	add	r12, r18
     320:	d1 1c       	adc	r13, r1
	} else {
		uint16_t address = arch::getAddress(program,0) + 2;
     322:	8c 01       	movw	r16, r24
     324:	0e 5f       	subi	r16, 0xFE	; 254
     326:	1f 4f       	sbci	r17, 0xFF	; 255
		for (uint8_t i = 0; i<8; ++i){
			string_8_bytes[i] = eeprom_read_byte((uint8_t*) (address + i));
     328:	c8 01       	movw	r24, r16
     32a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
     32e:	f7 01       	movw	r30, r14
     330:	81 93       	st	Z+, r24
     332:	7f 01       	movw	r14, r30
     334:	0f 5f       	subi	r16, 0xFF	; 255
     336:	1f 4f       	sbci	r17, 0xFF	; 255
	if (program == 0){
		char off[] = "OFF";
		hardware::copyString(string_8_bytes,off,8,false);
	} else {
		uint16_t address = arch::getAddress(program,0) + 2;
		for (uint8_t i = 0; i<8; ++i){
     338:	ec 15       	cp	r30, r12
     33a:	fd 05       	cpc	r31, r13
     33c:	a9 f7       	brne	.-22     	; 0x328 <_ZN4arch14getProgramNameEhPc+0x5a>
			string_8_bytes[i] = eeprom_read_byte((uint8_t*) (address + i));
		}
	} // ### check if running correctly
}
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	08 95       	ret

0000035a <_ZN4arch24programHeaderInterpreterEv>:

void arch::programHeaderInterpreter(){
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
	/* interprete the 14 INIT Bytes of the begin of a program (and update the pc) */
	pavrecord avrecord = &(state.light.avrecord[state.light.ptr]);
     36a:	c0 91 be 01 	lds	r28, 0x01BE	; 0x8001be <__data_end+0x40>
     36e:	ec 2e       	mov	r14, r28
     370:	f1 2c       	mov	r15, r1
	   C:										Reg 2
	   D:										Reg 3
	   E:													------------------------------------- address of the 1st instruction (PROGRAM PART)
	   F:		...															*/
	/************************************************************************/
	if (avrecord->program==0){ // if program 0 is called there is no header to deal with
     372:	f7 01       	movw	r30, r14
     374:	ee 0f       	add	r30, r30
     376:	ff 1f       	adc	r31, r31
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	e2 58       	subi	r30, 0x82	; 130
     382:	fe 4f       	sbci	r31, 0xFE	; 254
     384:	80 81       	ld	r24, Z
     386:	88 23       	and	r24, r24
     388:	89 f1       	breq	.+98     	; 0x3ec <_ZN4arch24programHeaderInterpreterEv+0x92>
		return;
	}
	for(uint8_t i = 1; i < 4; ++i){
		avrecord->reg[i] = eeprom_read_byte((uint8_t*)(avrecord->pc+10+i));
     38a:	f7 01       	movw	r30, r14
     38c:	ee 0f       	add	r30, r30
     38e:	ff 1f       	adc	r31, r31
     390:	ee 0f       	add	r30, r30
     392:	ff 1f       	adc	r31, r31
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	e2 58       	subi	r30, 0x82	; 130
     39a:	fe 4f       	sbci	r31, 0xFE	; 254
     39c:	c1 80       	ldd	r12, Z+1	; 0x01
     39e:	d2 80       	ldd	r13, Z+2	; 0x02
     3a0:	86 01       	movw	r16, r12
     3a2:	05 5f       	subi	r16, 0xF5	; 245
     3a4:	1f 4f       	sbci	r17, 0xFF	; 255
     3a6:	e7 01       	movw	r28, r14
     3a8:	cc 0f       	add	r28, r28
     3aa:	dd 1f       	adc	r29, r29
     3ac:	cc 0f       	add	r28, r28
     3ae:	dd 1f       	adc	r29, r29
     3b0:	cc 0f       	add	r28, r28
     3b2:	dd 1f       	adc	r29, r29
     3b4:	cd 57       	subi	r28, 0x7D	; 125
     3b6:	de 4f       	sbci	r29, 0xFE	; 254
     3b8:	8e e0       	ldi	r24, 0x0E	; 14
     3ba:	c8 0e       	add	r12, r24
     3bc:	d1 1c       	adc	r13, r1
     3be:	c8 01       	movw	r24, r16
     3c0:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
     3c4:	89 93       	st	Y+, r24
     3c6:	0f 5f       	subi	r16, 0xFF	; 255
     3c8:	1f 4f       	sbci	r17, 0xFF	; 255
	   F:		...															*/
	/************************************************************************/
	if (avrecord->program==0){ // if program 0 is called there is no header to deal with
		return;
	}
	for(uint8_t i = 1; i < 4; ++i){
     3ca:	0c 15       	cp	r16, r12
     3cc:	1d 05       	cpc	r17, r13
     3ce:	b9 f7       	brne	.-18     	; 0x3be <_ZN4arch24programHeaderInterpreterEv+0x64>
		avrecord->reg[i] = eeprom_read_byte((uint8_t*)(avrecord->pc+10+i));
	}
	avrecord->pc += 14;
     3d0:	f7 01       	movw	r30, r14
     3d2:	ee 0f       	add	r30, r30
     3d4:	ff 1f       	adc	r31, r31
     3d6:	ee 0f       	add	r30, r30
     3d8:	ff 1f       	adc	r31, r31
     3da:	ee 0f       	add	r30, r30
     3dc:	ff 1f       	adc	r31, r31
     3de:	e2 58       	subi	r30, 0x82	; 130
     3e0:	fe 4f       	sbci	r31, 0xFE	; 254
     3e2:	81 81       	ldd	r24, Z+1	; 0x01
     3e4:	92 81       	ldd	r25, Z+2	; 0x02
     3e6:	0e 96       	adiw	r24, 0x0e	; 14
     3e8:	92 83       	std	Z+2, r25	; 0x02
     3ea:	81 83       	std	Z+1, r24	; 0x01
}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	08 95       	ret

000003fe <_ZN4arch10runProgramEh>:

inline void BufferReadIndexerInc(){
	state.light.read = (state.light.read + 1) % BUFFERSIZE;
}

void arch::runProgram(uint8_t program){// for user
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	1f 92       	push	r1
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
	/* initialization of avrecord to run given program */
	//## turn off timer
	state.light.ptr = 0;
     40c:	0e e7       	ldi	r16, 0x7E	; 126
     40e:	11 e0       	ldi	r17, 0x01	; 1
     410:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <__data_end+0x40>
	state.light.avrecord[0].returnMatter = 0x00;
     414:	f8 01       	movw	r30, r16
     416:	13 82       	std	Z+3, r1	; 0x03
	state.light.avrecord[0].program = program;
     418:	80 83       	st	Z, r24
     41a:	19 82       	std	Y+1, r1	; 0x01
     41c:	ae 01       	movw	r20, r28
     41e:	4f 5f       	subi	r20, 0xFF	; 255
     420:	5f 4f       	sbci	r21, 0xFF	; 255
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	ce de       	rcall	.-612    	; 0x1c2 <_ZN4arch17EEPAddressHelper_EhhRKb>
	state.light.avrecord[0].pc = arch::getAddress(program,0);
     426:	f8 01       	movw	r30, r16
     428:	92 83       	std	Z+2, r25	; 0x02
     42a:	81 83       	std	Z+1, r24	; 0x01
	state.light.read =  0;
     42c:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <__data_end+0x71>
	state.light.write = 0;
     430:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <__data_end+0x72>
	
	state.light.bufferWait = true;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <__data_end+0x73>
} tstate;

static tstate state;

inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e8       	ldi	r25, 0x80	; 128
     43e:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <__data_end+0x42>
     442:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <__data_end+0x41>
	state.light.write = 0;
	
	state.light.bufferWait = true;
	WaitOnlyBufferPrepare();
	// ## timer will be started automatically because of bufferWait
	arch::programHeaderInterpreter();
     446:	89 df       	rcall	.-238    	; 0x35a <_ZN4arch24programHeaderInterpreterEv>
}
     448:	0f 90       	pop	r0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
     450:	0f 91       	pop	r16
     452:	08 95       	ret

00000454 <_ZN4arch11fetchBufferEv>:
		avrecord->reg[i] = eeprom_read_byte((uint8_t*)(avrecord->pc+10+i));
	}
	avrecord->pc += 14;
}

bool arch::fetchBuffer(void){// check the prg logic !!! ######
     454:	2f 92       	push	r2
     456:	3f 92       	push	r3
     458:	4f 92       	push	r4
     45a:	5f 92       	push	r5
     45c:	6f 92       	push	r6
     45e:	7f 92       	push	r7
     460:	8f 92       	push	r8
     462:	9f 92       	push	r9
     464:	af 92       	push	r10
     466:	bf 92       	push	r11
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	29 97       	sbiw	r28, 0x09	; 9
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
	/* Interpreter which deals with exactly one task, returns true if idle ( = the buffer is full) */
	/* feeds the state.light.buffer */
	
	if ( (state.light.write+1) % BUFFERSIZE == state.light.read ){
     488:	e0 90 f0 01 	lds	r14, 0x01F0	; 0x8001f0 <__data_end+0x72>
     48c:	f1 2c       	mov	r15, r1
     48e:	87 01       	movw	r16, r14
     490:	0f 5f       	subi	r16, 0xFF	; 255
     492:	1f 4f       	sbci	r17, 0xFF	; 255
     494:	0f 70       	andi	r16, 0x0F	; 15
     496:	10 78       	andi	r17, 0x80	; 128
     498:	11 23       	and	r17, r17
     49a:	34 f4       	brge	.+12     	; 0x4a8 <_ZN4arch11fetchBufferEv+0x54>
     49c:	01 50       	subi	r16, 0x01	; 1
     49e:	11 09       	sbc	r17, r1
     4a0:	00 6f       	ori	r16, 0xF0	; 240
     4a2:	1f 6f       	ori	r17, 0xFF	; 255
     4a4:	0f 5f       	subi	r16, 0xFF	; 255
     4a6:	1f 4f       	sbci	r17, 0xFF	; 255
     4a8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <__data_end+0x71>
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	08 17       	cp	r16, r24
     4b0:	19 07       	cpc	r17, r25
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <_ZN4arch11fetchBufferEv+0x62>
     4b4:	8e c3       	rjmp	.+1820   	; 0xbd2 <_ZN4arch11fetchBufferEv+0x77e>
		// no space to buffer new instructions
		return true;
	}
	
	pavrecord avrecord = &(state.light.avrecord[state.light.ptr]);
     4b6:	40 90 be 01 	lds	r4, 0x01BE	; 0x8001be <__data_end+0x40>
     4ba:	c4 2c       	mov	r12, r4
     4bc:	d1 2c       	mov	r13, r1
	pbuffer buffer = &(state.light.buffer[state.light.write]);
	
	if (avrecord->program == 0){
     4be:	f6 01       	movw	r30, r12
     4c0:	ee 0f       	add	r30, r30
     4c2:	ff 1f       	adc	r31, r31
     4c4:	ee 0f       	add	r30, r30
     4c6:	ff 1f       	adc	r31, r31
     4c8:	ee 0f       	add	r30, r30
     4ca:	ff 1f       	adc	r31, r31
     4cc:	e2 58       	subi	r30, 0x82	; 130
     4ce:	fe 4f       	sbci	r31, 0xFE	; 254
     4d0:	30 80       	ld	r3, Z
     4d2:	31 10       	cpse	r3, r1
     4d4:	20 c0       	rjmp	.+64     	; 0x516 <_ZN4arch11fetchBufferEv+0xc2>
		// realize the non ordinary 0-program function
		buffer->light = 0x0000; // set light to buffer
     4d6:	c7 01       	movw	r24, r14
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	8e 0d       	add	r24, r14
     4de:	9f 1d       	adc	r25, r15
     4e0:	82 58       	subi	r24, 0x82	; 130
     4e2:	9e 4f       	sbci	r25, 0xFE	; 254
     4e4:	fc 01       	movw	r30, r24
     4e6:	ef 5b       	subi	r30, 0xBF	; 191
     4e8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ea:	11 82       	std	Z+1, r1	; 0x01
     4ec:	10 82       	st	Z, r1
		buffer->delay = 0xFF;  // set delay time after light to buffer
     4ee:	32 96       	adiw	r30, 0x02	; 2
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	80 83       	st	Z, r24
inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
}

inline void BufferWriteIndexerInc(){
	state.light.write = (state.light.write + 1 ) % BUFFERSIZE;
     4f4:	00 93 f0 01 	sts	0x01F0, r16	; 0x8001f0 <__data_end+0x72>
} tstate;

static tstate state;

inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
     4f8:	11 27       	eor	r17, r17
     4fa:	f8 01       	movw	r30, r16
     4fc:	ee 0f       	add	r30, r30
     4fe:	ff 1f       	adc	r31, r31
     500:	0e 0f       	add	r16, r30
     502:	1f 1f       	adc	r17, r31
     504:	f8 01       	movw	r30, r16
     506:	e1 54       	subi	r30, 0x41	; 65
     508:	fe 4f       	sbci	r31, 0xFE	; 254
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e8       	ldi	r25, 0x80	; 128
     50e:	91 83       	std	Z+1, r25	; 0x01
     510:	80 83       	st	Z, r24
		// realize the non ordinary 0-program function
		buffer->light = 0x0000; // set light to buffer
		buffer->delay = 0xFF;  // set delay time after light to buffer
		BufferWriteIndexerInc();
		WaitOnlyBufferPrepare();
		return false;
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	6f c3       	rjmp	.+1758   	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
	}
	
	uint8_t instruction[3] = {eeprom_read_byte((uint8_t*)avrecord->pc),
     516:	f6 01       	movw	r30, r12
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	ee 0f       	add	r30, r30
     51e:	ff 1f       	adc	r31, r31
     520:	ee 0f       	add	r30, r30
     522:	ff 1f       	adc	r31, r31
     524:	e2 58       	subi	r30, 0x82	; 130
     526:	fe 4f       	sbci	r31, 0xFE	; 254
     528:	a1 80       	ldd	r10, Z+1	; 0x01
     52a:	b2 80       	ldd	r11, Z+2	; 0x02
     52c:	c5 01       	movw	r24, r10
     52e:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
     532:	58 2e       	mov	r5, r24
							  eeprom_read_byte((uint8_t*) ((avrecord->pc+1)% ADDRESSSPACE)),
     534:	35 01       	movw	r6, r10
     536:	4f ef       	ldi	r20, 0xFF	; 255
     538:	64 1a       	sub	r6, r20
     53a:	74 0a       	sbc	r7, r20
     53c:	c3 01       	movw	r24, r6
     53e:	9f 70       	andi	r25, 0x0F	; 15
     540:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
     544:	28 2e       	mov	r2, r24
							  eeprom_read_byte((uint8_t*) ((avrecord->pc+2)% ADDRESSSPACE))};
     546:	45 01       	movw	r8, r10
     548:	52 e0       	ldi	r21, 0x02	; 2
     54a:	85 0e       	add	r8, r21
     54c:	91 1c       	adc	r9, r1
     54e:	c4 01       	movw	r24, r8
     550:	9f 70       	andi	r25, 0x0F	; 15
     552:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
     556:	89 87       	std	Y+9, r24	; 0x09
	uint8_t* const reg6 = &(  avrecord->reg[  (instruction[1] & 0b00001100)>>2  ]  );
	uint8_t* const reg7 = &(  avrecord->reg[    (instruction[1] & 0b00000011)   ]  );
	
	uint8_t seg;
	
	if (instruction[0] & 0b10000000){
     558:	55 20       	and	r5, r5
     55a:	0c f0       	brlt	.+2      	; 0x55e <_ZN4arch11fetchBufferEv+0x10a>
     55c:	1d c3       	rjmp	.+1594   	; 0xb98 <_ZN4arch11fetchBufferEv+0x744>
	
	uint8_t instruction[3] = {eeprom_read_byte((uint8_t*)avrecord->pc),
							  eeprom_read_byte((uint8_t*) ((avrecord->pc+1)% ADDRESSSPACE)),
							  eeprom_read_byte((uint8_t*) ((avrecord->pc+2)% ADDRESSSPACE))};
	
	uint8_t* const reg2 = &(  avrecord->reg[  (instruction[0] & 0b00001100)>>2  ]  );
     55e:	85 2d       	mov	r24, r5
     560:	8c 70       	andi	r24, 0x0C	; 12
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	95 95       	asr	r25
     566:	87 95       	ror	r24
     568:	95 95       	asr	r25
     56a:	87 95       	ror	r24
	uint8_t* const reg3 = &(  avrecord->reg[    (instruction[0] & 0b00000011)   ]  );
     56c:	25 2d       	mov	r18, r5
     56e:	23 70       	andi	r18, 0x03	; 3
     570:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t* const reg7 = &(  avrecord->reg[    (instruction[1] & 0b00000011)   ]  );
	
	uint8_t seg;
	
	if (instruction[0] & 0b10000000){
		if (instruction[0] & 0b01000000){
     572:	56 fe       	sbrs	r5, 6
     574:	6f c0       	rjmp	.+222    	; 0x654 <_ZN4arch11fetchBufferEv+0x200>
			// ALU Register Operations: 0b11 XX R2 R3
			seg = (instruction[0] & 0b00110000)>>4;
     576:	45 2d       	mov	r20, r5
     578:	40 73       	andi	r20, 0x30	; 48
     57a:	42 95       	swap	r20
     57c:	4f 70       	andi	r20, 0x0F	; 15
			if (seg==0){
     57e:	a9 f4       	brne	.+42     	; 0x5aa <_ZN4arch11fetchBufferEv+0x156>
				//ADD
				*reg2 = *reg2 + *reg3;
     580:	b6 01       	movw	r22, r12
     582:	66 0f       	add	r22, r22
     584:	77 1f       	adc	r23, r23
     586:	66 0f       	add	r22, r22
     588:	77 1f       	adc	r23, r23
     58a:	66 0f       	add	r22, r22
     58c:	77 1f       	adc	r23, r23
     58e:	62 58       	subi	r22, 0x82	; 130
     590:	7e 4f       	sbci	r23, 0xFE	; 254
     592:	fb 01       	movw	r30, r22
     594:	e8 0f       	add	r30, r24
     596:	f9 1f       	adc	r31, r25
     598:	62 0f       	add	r22, r18
     59a:	73 1f       	adc	r23, r19
     59c:	14 81       	ldd	r17, Z+4	; 0x04
     59e:	db 01       	movw	r26, r22
     5a0:	14 96       	adiw	r26, 0x04	; 4
     5a2:	5c 91       	ld	r21, X
     5a4:	51 0f       	add	r21, r17
     5a6:	54 83       	std	Z+4, r21	; 0x04
     5a8:	31 c0       	rjmp	.+98     	; 0x60c <_ZN4arch11fetchBufferEv+0x1b8>
			}
			if (seg==1){
     5aa:	41 30       	cpi	r20, 0x01	; 1
     5ac:	b9 f4       	brne	.+46     	; 0x5dc <_ZN4arch11fetchBufferEv+0x188>
				//MUL
				*reg2 = (*reg2) * (*reg3);
     5ae:	a6 01       	movw	r20, r12
     5b0:	44 0f       	add	r20, r20
     5b2:	55 1f       	adc	r21, r21
     5b4:	44 0f       	add	r20, r20
     5b6:	55 1f       	adc	r21, r21
     5b8:	44 0f       	add	r20, r20
     5ba:	55 1f       	adc	r21, r21
     5bc:	42 58       	subi	r20, 0x82	; 130
     5be:	5e 4f       	sbci	r21, 0xFE	; 254
     5c0:	fa 01       	movw	r30, r20
     5c2:	e8 0f       	add	r30, r24
     5c4:	f9 1f       	adc	r31, r25
     5c6:	da 01       	movw	r26, r20
     5c8:	a2 0f       	add	r26, r18
     5ca:	b3 1f       	adc	r27, r19
     5cc:	94 81       	ldd	r25, Z+4	; 0x04
     5ce:	14 96       	adiw	r26, 0x04	; 4
     5d0:	8c 91       	ld	r24, X
     5d2:	98 9f       	mul	r25, r24
     5d4:	90 2d       	mov	r25, r0
     5d6:	11 24       	eor	r1, r1
     5d8:	94 83       	std	Z+4, r25	; 0x04
     5da:	2f c0       	rjmp	.+94     	; 0x63a <_ZN4arch11fetchBufferEv+0x1e6>
			}
			if (seg==2){
     5dc:	42 30       	cpi	r20, 0x02	; 2
     5de:	b1 f4       	brne	.+44     	; 0x60c <_ZN4arch11fetchBufferEv+0x1b8>
				//DIV
				*reg2 = *reg2 / *reg3;
     5e0:	a6 01       	movw	r20, r12
     5e2:	44 0f       	add	r20, r20
     5e4:	55 1f       	adc	r21, r21
     5e6:	44 0f       	add	r20, r20
     5e8:	55 1f       	adc	r21, r21
     5ea:	44 0f       	add	r20, r20
     5ec:	55 1f       	adc	r21, r21
     5ee:	42 58       	subi	r20, 0x82	; 130
     5f0:	5e 4f       	sbci	r21, 0xFE	; 254
     5f2:	fa 01       	movw	r30, r20
     5f4:	e8 0f       	add	r30, r24
     5f6:	f9 1f       	adc	r31, r25
     5f8:	da 01       	movw	r26, r20
     5fa:	a2 0f       	add	r26, r18
     5fc:	b3 1f       	adc	r27, r19
     5fe:	84 81       	ldd	r24, Z+4	; 0x04
     600:	14 96       	adiw	r26, 0x04	; 4
     602:	6c 91       	ld	r22, X
     604:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__udivmodqi4>
     608:	84 83       	std	Z+4, r24	; 0x04
     60a:	17 c0       	rjmp	.+46     	; 0x63a <_ZN4arch11fetchBufferEv+0x1e6>
			}
			if (seg==3){
     60c:	43 30       	cpi	r20, 0x03	; 3
     60e:	a9 f4       	brne	.+42     	; 0x63a <_ZN4arch11fetchBufferEv+0x1e6>
				//MOD
				*reg2 = *reg2 % *reg3;
     610:	a6 01       	movw	r20, r12
     612:	44 0f       	add	r20, r20
     614:	55 1f       	adc	r21, r21
     616:	44 0f       	add	r20, r20
     618:	55 1f       	adc	r21, r21
     61a:	44 0f       	add	r20, r20
     61c:	55 1f       	adc	r21, r21
     61e:	42 58       	subi	r20, 0x82	; 130
     620:	5e 4f       	sbci	r21, 0xFE	; 254
     622:	fa 01       	movw	r30, r20
     624:	e8 0f       	add	r30, r24
     626:	f9 1f       	adc	r31, r25
     628:	da 01       	movw	r26, r20
     62a:	a2 0f       	add	r26, r18
     62c:	b3 1f       	adc	r27, r19
     62e:	84 81       	ldd	r24, Z+4	; 0x04
     630:	14 96       	adiw	r26, 0x04	; 4
     632:	6c 91       	ld	r22, X
     634:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__udivmodqi4>
     638:	94 83       	std	Z+4, r25	; 0x04
			}
			avrecord->pc += 1; 
     63a:	f6 01       	movw	r30, r12
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	e2 58       	subi	r30, 0x82	; 130
     64a:	fe 4f       	sbci	r31, 0xFE	; 254
     64c:	72 82       	std	Z+2, r7	; 0x02
     64e:	61 82       	std	Z+1, r6	; 0x01
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	d0 c2       	rjmp	.+1440   	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
				//MOD
				*reg2 = *reg2 % *reg3;
			}
			avrecord->pc += 1; 
		} else {
			if (instruction[0] & 0b00100000){
     654:	55 fe       	sbrs	r5, 5
     656:	df c1       	rjmp	.+958    	; 0xa16 <_ZN4arch11fetchBufferEv+0x5c2>
				if (instruction[0] & 0b00010000){
     658:	54 fe       	sbrs	r5, 4
     65a:	55 c1       	rjmp	.+682    	; 0x906 <_ZN4arch11fetchBufferEv+0x4b2>
					//0xB
					if (instruction[0] & 0b00001000){
     65c:	53 fe       	sbrs	r5, 3
     65e:	13 c1       	rjmp	.+550    	; 0x886 <_ZN4arch11fetchBufferEv+0x432>
						if (instruction[0] & 0b00000100){
     660:	52 fe       	sbrs	r5, 2
     662:	16 c0       	rjmp	.+44     	; 0x690 <_ZN4arch11fetchBufferEv+0x23c>
							// DEC: 0b1011 11 RR
							*reg3 -=1;
     664:	f6 01       	movw	r30, r12
     666:	ee 0f       	add	r30, r30
     668:	ff 1f       	adc	r31, r31
     66a:	ee 0f       	add	r30, r30
     66c:	ff 1f       	adc	r31, r31
     66e:	ee 0f       	add	r30, r30
     670:	ff 1f       	adc	r31, r31
     672:	e2 58       	subi	r30, 0x82	; 130
     674:	fe 4f       	sbci	r31, 0xFE	; 254
     676:	df 01       	movw	r26, r30
     678:	a2 0f       	add	r26, r18
     67a:	b3 1f       	adc	r27, r19
     67c:	14 96       	adiw	r26, 0x04	; 4
     67e:	8c 91       	ld	r24, X
     680:	14 97       	sbiw	r26, 0x04	; 4
     682:	81 50       	subi	r24, 0x01	; 1
     684:	14 96       	adiw	r26, 0x04	; 4
     686:	8c 93       	st	X, r24
							avrecord->pc += 1;
     688:	72 82       	std	Z+2, r7	; 0x02
     68a:	61 82       	std	Z+1, r6	; 0x01
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	b2 c2       	rjmp	.+1380   	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
						if (instruction[0] & 0b00000100){
							// DEC: 0b1011 11 RR
							*reg3 -=1;
							avrecord->pc += 1;
						} else {
							if (instruction[0] & 0b00000010){
     690:	51 fe       	sbrs	r5, 1
     692:	bc c0       	rjmp	.+376    	; 0x80c <_ZN4arch11fetchBufferEv+0x3b8>
								if (instruction[0] & 0b00000001){
     694:	50 fe       	sbrs	r5, 0
     696:	1b c0       	rjmp	.+54     	; 0x6ce <_ZN4arch11fetchBufferEv+0x27a>
									// RET: 0xBB | MATTER
									avrecord->pc += 2;
     698:	f6 01       	movw	r30, r12
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	e2 58       	subi	r30, 0x82	; 130
     6a8:	fe 4f       	sbci	r31, 0xFE	; 254
     6aa:	92 82       	std	Z+2, r9	; 0x02
     6ac:	81 82       	std	Z+1, r8	; 0x01
									if (instruction[1] & (avrecord->returnMatter)){//check matter match
     6ae:	83 81       	ldd	r24, Z+3	; 0x03
     6b0:	28 22       	and	r2, r24
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <_ZN4arch11fetchBufferEv+0x262>
     6b4:	90 c2       	rjmp	.+1312   	; 0xbd6 <_ZN4arch11fetchBufferEv+0x782>
										if (state.light.ptr==0){
     6b6:	41 10       	cpse	r4, r1
     6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <_ZN4arch11fetchBufferEv+0x26c>
											led::error(103);
     6ba:	87 e6       	ldi	r24, 0x67	; 103
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	9a d7       	rcall	.+3892   	; 0x15f4 <_ZN3led5errorEj>
										}
										--state.light.ptr;
     6c0:	ee eb       	ldi	r30, 0xBE	; 190
     6c2:	f1 e0       	ldi	r31, 0x01	; 1
     6c4:	80 81       	ld	r24, Z
     6c6:	81 50       	subi	r24, 0x01	; 1
     6c8:	80 83       	st	Z, r24
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	93 c2       	rjmp	.+1318   	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
							  eeprom_read_byte((uint8_t*) ((avrecord->pc+1)% ADDRESSSPACE)),
							  eeprom_read_byte((uint8_t*) ((avrecord->pc+2)% ADDRESSSPACE))};
	
	uint8_t* const reg2 = &(  avrecord->reg[  (instruction[0] & 0b00001100)>>2  ]  );
	uint8_t* const reg3 = &(  avrecord->reg[    (instruction[0] & 0b00000011)   ]  );
	uint8_t* const reg6 = &(  avrecord->reg[  (instruction[1] & 0b00001100)>>2  ]  );
     6ce:	22 2d       	mov	r18, r2
     6d0:	2c 70       	andi	r18, 0x0C	; 12
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	35 95       	asr	r19
     6d6:	27 95       	ror	r18
     6d8:	35 95       	asr	r19
     6da:	27 95       	ror	r18
	uint8_t* const reg7 = &(  avrecord->reg[    (instruction[1] & 0b00000011)   ]  );
     6dc:	82 2d       	mov	r24, r2
     6de:	83 70       	andi	r24, 0x03	; 3
     6e0:	90 e0       	ldi	r25, 0x00	; 0
										}
										--state.light.ptr;
									}
								} else {
									// 0xBA
									seg = (instruction[1] & 0b11110000)>>4;
     6e2:	62 2d       	mov	r22, r2
     6e4:	62 95       	swap	r22
     6e6:	6f 70       	andi	r22, 0x0F	; 15
									if (seg==0){
     6e8:	91 f4       	brne	.+36     	; 0x70e <_ZN4arch11fetchBufferEv+0x2ba>
										// MOVE: 0b 1011 1010 | 0000 RD RS
										 *reg6 = *reg7; 
     6ea:	a6 01       	movw	r20, r12
     6ec:	44 0f       	add	r20, r20
     6ee:	55 1f       	adc	r21, r21
     6f0:	44 0f       	add	r20, r20
     6f2:	55 1f       	adc	r21, r21
     6f4:	44 0f       	add	r20, r20
     6f6:	55 1f       	adc	r21, r21
     6f8:	42 58       	subi	r20, 0x82	; 130
     6fa:	5e 4f       	sbci	r21, 0xFE	; 254
     6fc:	fa 01       	movw	r30, r20
     6fe:	e8 0f       	add	r30, r24
     700:	f9 1f       	adc	r31, r25
     702:	74 81       	ldd	r23, Z+4	; 0x04
     704:	fa 01       	movw	r30, r20
     706:	e2 0f       	add	r30, r18
     708:	f3 1f       	adc	r31, r19
     70a:	74 83       	std	Z+4, r23	; 0x04
     70c:	45 c0       	rjmp	.+138    	; 0x798 <_ZN4arch11fetchBufferEv+0x344>
									}
									if (seg==1){
     70e:	61 30       	cpi	r22, 0x01	; 1
     710:	29 f5       	brne	.+74     	; 0x75c <_ZN4arch11fetchBufferEv+0x308>
										//SET-LR: 0b 1011 1010 | 0001 RH RL
										buffer->light = ((*reg6<<8) + *reg7) & ~(1<<15);
     712:	f7 01       	movw	r30, r14
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	ee 0d       	add	r30, r14
     71a:	ff 1d       	adc	r31, r15
     71c:	e1 54       	subi	r30, 0x41	; 65
     71e:	fe 4f       	sbci	r31, 0xFE	; 254
     720:	a6 01       	movw	r20, r12
     722:	44 0f       	add	r20, r20
     724:	55 1f       	adc	r21, r21
     726:	44 0f       	add	r20, r20
     728:	55 1f       	adc	r21, r21
     72a:	44 0f       	add	r20, r20
     72c:	55 1f       	adc	r21, r21
     72e:	42 58       	subi	r20, 0x82	; 130
     730:	5e 4f       	sbci	r21, 0xFE	; 254
     732:	da 01       	movw	r26, r20
     734:	a2 0f       	add	r26, r18
     736:	b3 1f       	adc	r27, r19
     738:	14 96       	adiw	r26, 0x04	; 4
     73a:	2c 91       	ld	r18, X
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	32 2f       	mov	r19, r18
     740:	22 27       	eor	r18, r18
     742:	da 01       	movw	r26, r20
     744:	a8 0f       	add	r26, r24
     746:	b9 1f       	adc	r27, r25
     748:	14 96       	adiw	r26, 0x04	; 4
     74a:	8c 91       	ld	r24, X
     74c:	79 01       	movw	r14, r18
     74e:	e8 0e       	add	r14, r24
     750:	f1 1c       	adc	r15, r1
     752:	c7 01       	movw	r24, r14
     754:	9f 77       	andi	r25, 0x7F	; 127
     756:	91 83       	std	Z+1, r25	; 0x01
     758:	80 83       	st	Z, r24
     75a:	35 c0       	rjmp	.+106    	; 0x7c6 <_ZN4arch11fetchBufferEv+0x372>
									}
									if (seg==2){
     75c:	62 30       	cpi	r22, 0x02	; 2
     75e:	e1 f4       	brne	.+56     	; 0x798 <_ZN4arch11fetchBufferEv+0x344>
										//SWAP: 0b 1011 1010 | 0010 RR RR
										seg = *reg6;
     760:	d6 01       	movw	r26, r12
     762:	aa 0f       	add	r26, r26
     764:	bb 1f       	adc	r27, r27
     766:	aa 0f       	add	r26, r26
     768:	bb 1f       	adc	r27, r27
     76a:	aa 0f       	add	r26, r26
     76c:	bb 1f       	adc	r27, r27
     76e:	a2 58       	subi	r26, 0x82	; 130
     770:	be 4f       	sbci	r27, 0xFE	; 254
     772:	ad 01       	movw	r20, r26
     774:	42 0f       	add	r20, r18
     776:	53 1f       	adc	r21, r19
     778:	fa 01       	movw	r30, r20
     77a:	24 81       	ldd	r18, Z+4	; 0x04
										*reg6 = *reg7;
     77c:	8a 0f       	add	r24, r26
     77e:	9b 1f       	adc	r25, r27
     780:	fc 01       	movw	r30, r24
     782:	34 81       	ldd	r19, Z+4	; 0x04
     784:	fa 01       	movw	r30, r20
     786:	34 83       	std	Z+4, r19	; 0x04
										*reg7 = seg;
     788:	fc 01       	movw	r30, r24
     78a:	24 83       	std	Z+4, r18	; 0x04
									}
									if (seg==3){
										//NEG: 0b 1011 1010  | 0011 XX RR
										*reg7 = - (*reg7);//
									}
									avrecord->pc += 2;
     78c:	12 96       	adiw	r26, 0x02	; 2
     78e:	9c 92       	st	X, r9
     790:	8e 92       	st	-X, r8
     792:	11 97       	sbiw	r26, 0x01	; 1
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	2e c2       	rjmp	.+1116   	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
										seg = *reg6;
										*reg6 = *reg7;
										*reg7 = seg;
										seg = 2;
									}
									if (seg==3){
     798:	63 30       	cpi	r22, 0x03	; 3
     79a:	a9 f4       	brne	.+42     	; 0x7c6 <_ZN4arch11fetchBufferEv+0x372>
										//NEG: 0b 1011 1010  | 0011 XX RR
										*reg7 = - (*reg7);//
     79c:	d6 01       	movw	r26, r12
     79e:	aa 0f       	add	r26, r26
     7a0:	bb 1f       	adc	r27, r27
     7a2:	aa 0f       	add	r26, r26
     7a4:	bb 1f       	adc	r27, r27
     7a6:	aa 0f       	add	r26, r26
     7a8:	bb 1f       	adc	r27, r27
     7aa:	a2 58       	subi	r26, 0x82	; 130
     7ac:	be 4f       	sbci	r27, 0xFE	; 254
     7ae:	fd 01       	movw	r30, r26
     7b0:	e8 0f       	add	r30, r24
     7b2:	f9 1f       	adc	r31, r25
     7b4:	84 81       	ldd	r24, Z+4	; 0x04
     7b6:	81 95       	neg	r24
     7b8:	84 83       	std	Z+4, r24	; 0x04
									}
									avrecord->pc += 2;
     7ba:	12 96       	adiw	r26, 0x02	; 2
     7bc:	9c 92       	st	X, r9
     7be:	8e 92       	st	-X, r8
     7c0:	11 97       	sbiw	r26, 0x01	; 1
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	17 c2       	rjmp	.+1070   	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
									}
									if (seg==3){
										//NEG: 0b 1011 1010  | 0011 XX RR
										*reg7 = - (*reg7);//
									}
									avrecord->pc += 2;
     7c6:	f6 01       	movw	r30, r12
     7c8:	ee 0f       	add	r30, r30
     7ca:	ff 1f       	adc	r31, r31
     7cc:	ee 0f       	add	r30, r30
     7ce:	ff 1f       	adc	r31, r31
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	e2 58       	subi	r30, 0x82	; 130
     7d6:	fe 4f       	sbci	r31, 0xFE	; 254
     7d8:	92 82       	std	Z+2, r9	; 0x02
     7da:	81 82       	std	Z+1, r8	; 0x01
									if (seg==4){
     7dc:	64 30       	cpi	r22, 0x04	; 4
     7de:	09 f0       	breq	.+2      	; 0x7e2 <_ZN4arch11fetchBufferEv+0x38e>
     7e0:	fc c1       	rjmp	.+1016   	; 0xbda <_ZN4arch11fetchBufferEv+0x786>
     7e2:	1c 82       	std	Y+4, r1	; 0x04
     7e4:	ae 01       	movw	r20, r28
     7e6:	4c 5f       	subi	r20, 0xFC	; 252
     7e8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	83 2d       	mov	r24, r3
     7ee:	e9 dc       	rcall	.-1582   	; 0x1c2 <_ZN4arch17EEPAddressHelper_EhhRKb>
										//RESET: 0b 1011 1010 | 0100 XXXX
										avrecord->pc = arch::getAddress(avrecord->program,0);
     7f0:	f6 01       	movw	r30, r12
     7f2:	ee 0f       	add	r30, r30
     7f4:	ff 1f       	adc	r31, r31
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	e2 58       	subi	r30, 0x82	; 130
     800:	fe 4f       	sbci	r31, 0xFE	; 254
     802:	92 83       	std	Z+2, r25	; 0x02
     804:	81 83       	std	Z+1, r24	; 0x01
										arch::programHeaderInterpreter();
     806:	a9 dd       	rcall	.-1198   	; 0x35a <_ZN4arch24programHeaderInterpreterEv>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	f4 c1       	rjmp	.+1000   	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
										avrecord->pc = arch::getAddress(avrecord->program,0);
										arch::programHeaderInterpreter();
									}
								}
							} else {
								avrecord->pc += 2;
     80c:	f6 01       	movw	r30, r12
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	ee 0f       	add	r30, r30
     814:	ff 1f       	adc	r31, r31
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	e2 58       	subi	r30, 0x82	; 130
     81c:	fe 4f       	sbci	r31, 0xFE	; 254
     81e:	92 82       	std	Z+2, r9	; 0x02
     820:	81 82       	std	Z+1, r8	; 0x01
								if (instruction[0] & 0b00000001){
     822:	50 fe       	sbrs	r5, 0
     824:	19 c0       	rjmp	.+50     	; 0x858 <_ZN4arch11fetchBufferEv+0x404>
									//WAIT-I: 0xB9 | Immediate
									buffer->delay = instruction[1];
     826:	f7 01       	movw	r30, r14
     828:	ee 0f       	add	r30, r30
     82a:	ff 1f       	adc	r31, r31
     82c:	ee 0d       	add	r30, r14
     82e:	ff 1d       	adc	r31, r15
     830:	ef 53       	subi	r30, 0x3F	; 63
     832:	fe 4f       	sbci	r31, 0xFE	; 254
     834:	20 82       	st	Z, r2
inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
}

inline void BufferWriteIndexerInc(){
	state.light.write = (state.light.write + 1 ) % BUFFERSIZE;
     836:	00 93 f0 01 	sts	0x01F0, r16	; 0x8001f0 <__data_end+0x72>
} tstate;

static tstate state;

inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
     83a:	11 27       	eor	r17, r17
     83c:	f8 01       	movw	r30, r16
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	0e 0f       	add	r16, r30
     844:	1f 1f       	adc	r17, r31
     846:	f8 01       	movw	r30, r16
     848:	e1 54       	subi	r30, 0x41	; 65
     84a:	fe 4f       	sbci	r31, 0xFE	; 254
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e8       	ldi	r25, 0x80	; 128
     850:	91 83       	std	Z+1, r25	; 0x01
     852:	80 83       	st	Z, r24
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	ce c1       	rjmp	.+924    	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
									buffer->delay = instruction[1];
									BufferWriteIndexerInc();
									WaitOnlyBufferPrepare();									
								} else {
									//JMP: 0xB8 | local address
									if (instruction[1] == 0) {
     858:	22 20       	and	r2, r2
     85a:	09 f4       	brne	.+2      	; 0x85e <_ZN4arch11fetchBufferEv+0x40a>
     85c:	c0 c1       	rjmp	.+896    	; 0xbde <_ZN4arch11fetchBufferEv+0x78a>
     85e:	1b 82       	std	Y+3, r1	; 0x03
     860:	ae 01       	movw	r20, r28
     862:	4d 5f       	subi	r20, 0xFD	; 253
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	62 2d       	mov	r22, r2
     868:	83 2d       	mov	r24, r3
     86a:	ab dc       	rcall	.-1706   	; 0x1c2 <_ZN4arch17EEPAddressHelper_EhhRKb>
										//### throw error: you should use reset instead
									} else {
										avrecord->pc = arch::getAddress(avrecord->program,instruction[1]);
     86c:	f6 01       	movw	r30, r12
     86e:	ee 0f       	add	r30, r30
     870:	ff 1f       	adc	r31, r31
     872:	ee 0f       	add	r30, r30
     874:	ff 1f       	adc	r31, r31
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	e2 58       	subi	r30, 0x82	; 130
     87c:	fe 4f       	sbci	r31, 0xFE	; 254
     87e:	92 83       	std	Z+2, r25	; 0x02
     880:	81 83       	std	Z+1, r24	; 0x01
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	b7 c1       	rjmp	.+878    	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
									}
								}
							}
						}
					} else {
						if (instruction[0] & 0b00000100){
     886:	52 fe       	sbrs	r5, 2
     888:	2c c0       	rjmp	.+88     	; 0x8e2 <_ZN4arch11fetchBufferEv+0x48e>
							// WAIT-R: 0b1011 01 RR
							buffer->delay = *reg3;
     88a:	f7 01       	movw	r30, r14
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	ee 0d       	add	r30, r14
     892:	ff 1d       	adc	r31, r15
     894:	af 01       	movw	r20, r30
     896:	4f 53       	subi	r20, 0x3F	; 63
     898:	5e 4f       	sbci	r21, 0xFE	; 254
     89a:	d6 01       	movw	r26, r12
     89c:	aa 0f       	add	r26, r26
     89e:	bb 1f       	adc	r27, r27
     8a0:	aa 0f       	add	r26, r26
     8a2:	bb 1f       	adc	r27, r27
     8a4:	aa 0f       	add	r26, r26
     8a6:	bb 1f       	adc	r27, r27
     8a8:	a2 58       	subi	r26, 0x82	; 130
     8aa:	be 4f       	sbci	r27, 0xFE	; 254
     8ac:	2a 0f       	add	r18, r26
     8ae:	3b 1f       	adc	r19, r27
     8b0:	f9 01       	movw	r30, r18
     8b2:	84 81       	ldd	r24, Z+4	; 0x04
     8b4:	fa 01       	movw	r30, r20
     8b6:	80 83       	st	Z, r24
inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
}

inline void BufferWriteIndexerInc(){
	state.light.write = (state.light.write + 1 ) % BUFFERSIZE;
     8b8:	00 93 f0 01 	sts	0x01F0, r16	; 0x8001f0 <__data_end+0x72>
} tstate;

static tstate state;

inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
     8bc:	11 27       	eor	r17, r17
     8be:	f8 01       	movw	r30, r16
     8c0:	ee 0f       	add	r30, r30
     8c2:	ff 1f       	adc	r31, r31
     8c4:	0e 0f       	add	r16, r30
     8c6:	1f 1f       	adc	r17, r31
     8c8:	f8 01       	movw	r30, r16
     8ca:	e1 54       	subi	r30, 0x41	; 65
     8cc:	fe 4f       	sbci	r31, 0xFE	; 254
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e8       	ldi	r25, 0x80	; 128
     8d2:	91 83       	std	Z+1, r25	; 0x01
     8d4:	80 83       	st	Z, r24
						if (instruction[0] & 0b00000100){
							// WAIT-R: 0b1011 01 RR
							buffer->delay = *reg3;
							BufferWriteIndexerInc();
							WaitOnlyBufferPrepare();
							avrecord->pc += 1;
     8d6:	12 96       	adiw	r26, 0x02	; 2
     8d8:	7c 92       	st	X, r7
     8da:	6e 92       	st	-X, r6
     8dc:	11 97       	sbiw	r26, 0x01	; 1
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	89 c1       	rjmp	.+786    	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
							BufferWriteIndexerInc();
							WaitOnlyBufferPrepare();
							avrecord->pc += 1;
						} else {
							//SET-RI: 0b1011 00 RR | Immediate
							*reg3 = instruction[1];
     8e2:	f6 01       	movw	r30, r12
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	ee 0f       	add	r30, r30
     8ea:	ff 1f       	adc	r31, r31
     8ec:	ee 0f       	add	r30, r30
     8ee:	ff 1f       	adc	r31, r31
     8f0:	e2 58       	subi	r30, 0x82	; 130
     8f2:	fe 4f       	sbci	r31, 0xFE	; 254
     8f4:	df 01       	movw	r26, r30
     8f6:	a2 0f       	add	r26, r18
     8f8:	b3 1f       	adc	r27, r19
     8fa:	14 96       	adiw	r26, 0x04	; 4
     8fc:	2c 92       	st	X, r2
							avrecord->pc += 2;
     8fe:	92 82       	std	Z+2, r9	; 0x02
     900:	81 82       	std	Z+1, r8	; 0x01
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	77 c1       	rjmp	.+750    	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
					// QQQQ:		Q==0	->		immediate	->		(8 bit immediate)
					//				Q==1	->		register	->		(XX CC RD RS)	:	RS .. source register; write back in RD iff CC==11
					// this version is always without writing BACK !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
					// iff the return matter is 0 call will empty the avrecord and start from a blanc list again
					
					uint8_t matter = eeprom_read_byte((uint8_t*) ((avrecord->pc+3)% ADDRESSSPACE));
     906:	c5 01       	movw	r24, r10
     908:	03 96       	adiw	r24, 0x03	; 3
     90a:	9f 70       	andi	r25, 0x0F	; 15
     90c:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
     910:	f8 2e       	mov	r15, r24
					
					if ((state.light.ptr != RECURSIONDEPTH-1) || (matter == 0)){
     912:	f7 e0       	ldi	r31, 0x07	; 7
     914:	4f 12       	cpse	r4, r31
     916:	02 c0       	rjmp	.+4      	; 0x91c <_ZN4arch11fetchBufferEv+0x4c8>
     918:	81 11       	cpse	r24, r1
     91a:	63 c1       	rjmp	.+710    	; 0xbe2 <_ZN4arch11fetchBufferEv+0x78e>
						
						// fetch more instructions
						// 5x fetching: % is not necessary because programmer should provide presence of the parameters <<<<<<< catch this as an error and make all lights off or such a thing
						uint8_t values[4] = {	eeprom_read_byte((uint8_t*) ((avrecord->pc+4)% ADDRESSSPACE)),
     91c:	c5 01       	movw	r24, r10
     91e:	04 96       	adiw	r24, 0x04	; 4
     920:	9f 70       	andi	r25, 0x0F	; 15
     922:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
												eeprom_read_byte((uint8_t*) ((avrecord->pc+5)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+6)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+7)% ADDRESSSPACE))};
     926:	8d 83       	std	Y+5, r24	; 0x05
					if ((state.light.ptr != RECURSIONDEPTH-1) || (matter == 0)){
						
						// fetch more instructions
						// 5x fetching: % is not necessary because programmer should provide presence of the parameters <<<<<<< catch this as an error and make all lights off or such a thing
						uint8_t values[4] = {	eeprom_read_byte((uint8_t*) ((avrecord->pc+4)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+5)% ADDRESSSPACE)),
     928:	c5 01       	movw	r24, r10
     92a:	05 96       	adiw	r24, 0x05	; 5
     92c:	9f 70       	andi	r25, 0x0F	; 15
     92e:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
												eeprom_read_byte((uint8_t*) ((avrecord->pc+6)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+7)% ADDRESSSPACE))};
     932:	8e 83       	std	Y+6, r24	; 0x06
						
						// fetch more instructions
						// 5x fetching: % is not necessary because programmer should provide presence of the parameters <<<<<<< catch this as an error and make all lights off or such a thing
						uint8_t values[4] = {	eeprom_read_byte((uint8_t*) ((avrecord->pc+4)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+5)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+6)% ADDRESSSPACE)),
     934:	c5 01       	movw	r24, r10
     936:	06 96       	adiw	r24, 0x06	; 6
     938:	9f 70       	andi	r25, 0x0F	; 15
     93a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
												eeprom_read_byte((uint8_t*) ((avrecord->pc+7)% ADDRESSSPACE))};
     93e:	8f 83       	std	Y+7, r24	; 0x07
     940:	c5 01       	movw	r24, r10
     942:	07 96       	adiw	r24, 0x07	; 7
     944:	9f 70       	andi	r25, 0x0F	; 15
     946:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_read_byte>
     94a:	88 87       	std	Y+8, r24	; 0x08
						
						avrecord->pc += 8; //<<<< catch if user makes such code which will make me an eeprom read because of the pc which is out of range / ADRESSSpace
     94c:	f6 01       	movw	r30, r12
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	ee 0f       	add	r30, r30
     958:	ff 1f       	adc	r31, r31
     95a:	e2 58       	subi	r30, 0x82	; 130
     95c:	fe 4f       	sbci	r31, 0xFE	; 254
     95e:	48 e0       	ldi	r20, 0x08	; 8
     960:	a4 0e       	add	r10, r20
     962:	b1 1c       	adc	r11, r1
     964:	b2 82       	std	Z+2, r11	; 0x02
     966:	a1 82       	std	Z+1, r10	; 0x01
						state.light.ptr++;
						if (matter == 0) state.light.ptr = 0;
     968:	ff 20       	and	r15, r15
     96a:	21 f0       	breq	.+8      	; 0x974 <_ZN4arch11fetchBufferEv+0x520>
												eeprom_read_byte((uint8_t*) ((avrecord->pc+5)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+6)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+7)% ADDRESSSPACE))};
						
						avrecord->pc += 8; //<<<< catch if user makes such code which will make me an eeprom read because of the pc which is out of range / ADRESSSpace
						state.light.ptr++;
     96c:	43 94       	inc	r4
     96e:	40 92 be 01 	sts	0x01BE, r4	; 0x8001be <__data_end+0x40>
     972:	02 c0       	rjmp	.+4      	; 0x978 <_ZN4arch11fetchBufferEv+0x524>
						if (matter == 0) state.light.ptr = 0;
     974:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <__data_end+0x40>
						
						pavrecord av2 = &(state.light.avrecord[state.light.ptr]);
     978:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <__data_end+0x40>
     97c:	0a 2f       	mov	r16, r26
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	1a 82       	std	Y+2, r1	; 0x02
     982:	ae 01       	movw	r20, r28
     984:	4e 5f       	subi	r20, 0xFE	; 254
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	69 85       	ldd	r22, Y+9	; 0x09
     98a:	82 2d       	mov	r24, r2
     98c:	1a dc       	rcall	.-1996   	; 0x1c2 <_ZN4arch17EEPAddressHelper_EhhRKb>
						av2->pc = arch::getAddress(instruction[1],instruction[2]);
     98e:	d8 01       	movw	r26, r16
     990:	aa 0f       	add	r26, r26
     992:	bb 1f       	adc	r27, r27
     994:	aa 0f       	add	r26, r26
     996:	bb 1f       	adc	r27, r27
     998:	aa 0f       	add	r26, r26
     99a:	bb 1f       	adc	r27, r27
     99c:	fd 01       	movw	r30, r26
     99e:	e2 58       	subi	r30, 0x82	; 130
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	92 83       	std	Z+2, r25	; 0x02
     9a4:	81 83       	std	Z+1, r24	; 0x01
						av2->program = instruction[1];
     9a6:	20 82       	st	Z, r2
						av2->returnMatter = matter;
     9a8:	f3 82       	std	Z+3, r15	; 0x03
     9aa:	cd 01       	movw	r24, r26
     9ac:	8e 57       	subi	r24, 0x7E	; 126
     9ae:	9e 4f       	sbci	r25, 0xFE	; 254
     9b0:	5c 01       	movw	r10, r24
     9b2:	fe 01       	movw	r30, r28
     9b4:	35 96       	adiw	r30, 0x05	; 5
     9b6:	ae 01       	movw	r20, r28
     9b8:	47 5f       	subi	r20, 0xF7	; 247
     9ba:	5f 4f       	sbci	r21, 0xFF	; 255
     9bc:	83 e0       	ldi	r24, 0x03	; 3
     9be:	90 e0       	ldi	r25, 0x00	; 0
						for(uint8_t i = 0; i<4; ++i){
							av2->reg[i] = (instruction[0] & (1<<(3-i))) 	? /*reg*/			avrecord->reg[values[i] & 0b11]
																			: /*immediate*/		values[i]
																			;
     9c0:	65 2d       	mov	r22, r5
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	86 01       	movw	r16, r12
     9c6:	00 0f       	add	r16, r16
     9c8:	11 1f       	adc	r17, r17
     9ca:	00 0f       	add	r16, r16
     9cc:	11 1f       	adc	r17, r17
     9ce:	00 0f       	add	r16, r16
     9d0:	11 1f       	adc	r17, r17
     9d2:	02 58       	subi	r16, 0x82	; 130
     9d4:	1e 4f       	sbci	r17, 0xFE	; 254
     9d6:	9b 01       	movw	r18, r22
     9d8:	08 2e       	mov	r0, r24
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <_ZN4arch11fetchBufferEv+0x58c>
     9dc:	35 95       	asr	r19
     9de:	27 95       	ror	r18
     9e0:	0a 94       	dec	r0
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <_ZN4arch11fetchBufferEv+0x588>
     9e4:	20 ff       	sbrs	r18, 0
     9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <_ZN4arch11fetchBufferEv+0x5a4>
						pavrecord av2 = &(state.light.avrecord[state.light.ptr]);
						av2->pc = arch::getAddress(instruction[1],instruction[2]);
						av2->program = instruction[1];
						av2->returnMatter = matter;
						for(uint8_t i = 0; i<4; ++i){
							av2->reg[i] = (instruction[0] & (1<<(3-i))) 	? /*reg*/			avrecord->reg[values[i] & 0b11]
     9e8:	20 81       	ld	r18, Z
     9ea:	23 70       	andi	r18, 0x03	; 3
																			: /*immediate*/		values[i]
																			;
     9ec:	d8 01       	movw	r26, r16
     9ee:	a2 0f       	add	r26, r18
     9f0:	b1 1d       	adc	r27, r1
     9f2:	14 96       	adiw	r26, 0x04	; 4
     9f4:	2c 91       	ld	r18, X
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <_ZN4arch11fetchBufferEv+0x5a6>
     9f8:	20 81       	ld	r18, Z
     9fa:	d5 01       	movw	r26, r10
     9fc:	2d 93       	st	X+, r18
     9fe:	5d 01       	movw	r10, r26
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	31 96       	adiw	r30, 0x01	; 1
						
						pavrecord av2 = &(state.light.avrecord[state.light.ptr]);
						av2->pc = arch::getAddress(instruction[1],instruction[2]);
						av2->program = instruction[1];
						av2->returnMatter = matter;
						for(uint8_t i = 0; i<4; ++i){
     a04:	e4 17       	cp	r30, r20
     a06:	f5 07       	cpc	r31, r21
     a08:	31 f7       	brne	.-52     	; 0x9d6 <_ZN4arch11fetchBufferEv+0x582>
							av2->reg[i] = (instruction[0] & (1<<(3-i))) 	? /*reg*/			avrecord->reg[values[i] & 0b11]
																			: /*immediate*/		values[i]
																			;
						}
						// if called program header:
						if (instruction[2] == 0) {
     a0a:	e9 84       	ldd	r14, Y+9	; 0x09
     a0c:	e1 10       	cpse	r14, r1
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <_ZN4arch11fetchBufferEv+0x5be>
							arch::programHeaderInterpreter();
     a10:	a4 dc       	rcall	.-1720   	; 0x35a <_ZN4arch24programHeaderInterpreterEv>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	ef c0       	rjmp	.+478    	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
						//throw little error <<<<
					}
				}
			} else {
				seg = (instruction[0] & 0b00001100)>>2;
				if (instruction[0] & 0b00010000){
     a16:	54 fe       	sbrs	r5, 4
     a18:	57 c0       	rjmp	.+174    	; 0xac8 <_ZN4arch11fetchBufferEv+0x674>
					// ALU IMMEDIATE Operations: 0x1001 XX RR | Immediate
					avrecord->pc += 2;
     a1a:	f6 01       	movw	r30, r12
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	e2 58       	subi	r30, 0x82	; 130
     a2a:	fe 4f       	sbci	r31, 0xFE	; 254
     a2c:	92 82       	std	Z+2, r9	; 0x02
     a2e:	81 82       	std	Z+1, r8	; 0x01
					if (seg==0){
     a30:	81 11       	cpse	r24, r1
     a32:	0f c0       	rjmp	.+30     	; 0xa52 <_ZN4arch11fetchBufferEv+0x5fe>
						// ADD-I
						*reg3 += instruction[1];
     a34:	f6 01       	movw	r30, r12
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	e2 58       	subi	r30, 0x82	; 130
     a44:	fe 4f       	sbci	r31, 0xFE	; 254
     a46:	e2 0f       	add	r30, r18
     a48:	f3 1f       	adc	r31, r19
     a4a:	94 81       	ldd	r25, Z+4	; 0x04
     a4c:	92 0d       	add	r25, r2
     a4e:	94 83       	std	Z+4, r25	; 0x04
     a50:	27 c0       	rjmp	.+78     	; 0xaa0 <_ZN4arch11fetchBufferEv+0x64c>
					}
					if (seg==1){
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	91 f4       	brne	.+36     	; 0xa7a <_ZN4arch11fetchBufferEv+0x626>
						// MUL-I
						*reg3 *= instruction[1];
     a56:	f6 01       	movw	r30, r12
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	e2 58       	subi	r30, 0x82	; 130
     a66:	fe 4f       	sbci	r31, 0xFE	; 254
     a68:	e2 0f       	add	r30, r18
     a6a:	f3 1f       	adc	r31, r19
     a6c:	84 81       	ldd	r24, Z+4	; 0x04
     a6e:	82 9d       	mul	r24, r2
     a70:	20 2c       	mov	r2, r0
     a72:	11 24       	eor	r1, r1
     a74:	24 82       	std	Z+4, r2	; 0x04
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	bd c0       	rjmp	.+378    	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
					}
					if (seg==1){
						// MUL-I
						*reg3 *= instruction[1];
					}
					if (seg==2){
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	89 f4       	brne	.+34     	; 0xaa0 <_ZN4arch11fetchBufferEv+0x64c>
						// DIV-I
						*reg3 /= instruction[1];
     a7e:	f6 01       	movw	r30, r12
     a80:	ee 0f       	add	r30, r30
     a82:	ff 1f       	adc	r31, r31
     a84:	ee 0f       	add	r30, r30
     a86:	ff 1f       	adc	r31, r31
     a88:	ee 0f       	add	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	e2 58       	subi	r30, 0x82	; 130
     a8e:	fe 4f       	sbci	r31, 0xFE	; 254
     a90:	e2 0f       	add	r30, r18
     a92:	f3 1f       	adc	r31, r19
     a94:	84 81       	ldd	r24, Z+4	; 0x04
     a96:	62 2d       	mov	r22, r2
     a98:	af d7       	rcall	.+3934   	; 0x19f8 <__udivmodqi4>
     a9a:	84 83       	std	Z+4, r24	; 0x04
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	aa c0       	rjmp	.+340    	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
					}
					if (seg==2){
						// DIV-I
						*reg3 /= instruction[1];
					}
					if (seg==3){
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <_ZN4arch11fetchBufferEv+0x652>
     aa4:	a0 c0       	rjmp	.+320    	; 0xbe6 <_ZN4arch11fetchBufferEv+0x792>
						// MOD-I
						*reg3 = *reg3 % instruction[1];
     aa6:	f6 01       	movw	r30, r12
     aa8:	ee 0f       	add	r30, r30
     aaa:	ff 1f       	adc	r31, r31
     aac:	ee 0f       	add	r30, r30
     aae:	ff 1f       	adc	r31, r31
     ab0:	ee 0f       	add	r30, r30
     ab2:	ff 1f       	adc	r31, r31
     ab4:	e2 58       	subi	r30, 0x82	; 130
     ab6:	fe 4f       	sbci	r31, 0xFE	; 254
     ab8:	e2 0f       	add	r30, r18
     aba:	f3 1f       	adc	r31, r19
     abc:	84 81       	ldd	r24, Z+4	; 0x04
     abe:	62 2d       	mov	r22, r2
     ac0:	9b d7       	rcall	.+3894   	; 0x19f8 <__udivmodqi4>
     ac2:	94 83       	std	Z+4, r25	; 0x04
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	96 c0       	rjmp	.+300    	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
						// MOD-I
						*reg3 = *reg3 % instruction[1];
					}
				} else {
					// JUMP ON CONDITION: 0x 1000 XX RR | Immediate | Instruction - Address
					avrecord->pc += 3;
     ac8:	f6 01       	movw	r30, r12
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	ee 0f       	add	r30, r30
     ad0:	ff 1f       	adc	r31, r31
     ad2:	ee 0f       	add	r30, r30
     ad4:	ff 1f       	adc	r31, r31
     ad6:	e2 58       	subi	r30, 0x82	; 130
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	43 e0       	ldi	r20, 0x03	; 3
     adc:	a4 0e       	add	r10, r20
     ade:	b1 1c       	adc	r11, r1
     ae0:	b2 82       	std	Z+2, r11	; 0x02
     ae2:	a1 82       	std	Z+1, r10	; 0x01
					if (
     ae4:	81 11       	cpse	r24, r1
     ae6:	07 c0       	rjmp	.+14     	; 0xaf6 <_ZN4arch11fetchBufferEv+0x6a2>
							( (seg==0) && (*reg3 == instruction[1]) ) // JMP-EQ
     ae8:	e2 0f       	add	r30, r18
     aea:	f3 1f       	adc	r31, r19
     aec:	84 81       	ldd	r24, Z+4	; 0x04
     aee:	28 16       	cp	r2, r24
     af0:	d9 f1       	breq	.+118    	; 0xb68 <_ZN4arch11fetchBufferEv+0x714>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	7f c0       	rjmp	.+254    	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
				} else {
					// JUMP ON CONDITION: 0x 1000 XX RR | Immediate | Instruction - Address
					avrecord->pc += 3;
					if (
							( (seg==0) && (*reg3 == instruction[1]) ) // JMP-EQ
								||
     af6:	81 30       	cpi	r24, 0x01	; 1
     af8:	89 f4       	brne	.+34     	; 0xb1c <_ZN4arch11fetchBufferEv+0x6c8>
							( (seg==1) && (*reg3 != instruction[1]) ) // JMP-NE
     afa:	c6 01       	movw	r24, r12
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	82 58       	subi	r24, 0x82	; 130
     b0a:	9e 4f       	sbci	r25, 0xFE	; 254
     b0c:	fc 01       	movw	r30, r24
     b0e:	e2 0f       	add	r30, r18
     b10:	f3 1f       	adc	r31, r19
     b12:	84 81       	ldd	r24, Z+4	; 0x04
     b14:	28 12       	cpse	r2, r24
     b16:	28 c0       	rjmp	.+80     	; 0xb68 <_ZN4arch11fetchBufferEv+0x714>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	6c c0       	rjmp	.+216    	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
					avrecord->pc += 3;
					if (
							( (seg==0) && (*reg3 == instruction[1]) ) // JMP-EQ
								||
							( (seg==1) && (*reg3 != instruction[1]) ) // JMP-NE
								||
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	89 f4       	brne	.+34     	; 0xb42 <_ZN4arch11fetchBufferEv+0x6ee>
							( (seg==2) && (*reg3 < instruction[1]) ) // JMP-LT
     b20:	c6 01       	movw	r24, r12
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	82 58       	subi	r24, 0x82	; 130
     b30:	9e 4f       	sbci	r25, 0xFE	; 254
     b32:	fc 01       	movw	r30, r24
     b34:	e2 0f       	add	r30, r18
     b36:	f3 1f       	adc	r31, r19
     b38:	84 81       	ldd	r24, Z+4	; 0x04
     b3a:	82 15       	cp	r24, r2
     b3c:	a8 f0       	brcs	.+42     	; 0xb68 <_ZN4arch11fetchBufferEv+0x714>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	59 c0       	rjmp	.+178    	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
							( (seg==0) && (*reg3 == instruction[1]) ) // JMP-EQ
								||
							( (seg==1) && (*reg3 != instruction[1]) ) // JMP-NE
								||
							( (seg==2) && (*reg3 < instruction[1]) ) // JMP-LT
								||
     b42:	83 30       	cpi	r24, 0x03	; 3
     b44:	09 f0       	breq	.+2      	; 0xb48 <_ZN4arch11fetchBufferEv+0x6f4>
     b46:	51 c0       	rjmp	.+162    	; 0xbea <_ZN4arch11fetchBufferEv+0x796>
							( (seg==3) && (*reg3 > instruction[1]) ) // JMP-GT
     b48:	c6 01       	movw	r24, r12
     b4a:	88 0f       	add	r24, r24
     b4c:	99 1f       	adc	r25, r25
     b4e:	88 0f       	add	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	88 0f       	add	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	82 58       	subi	r24, 0x82	; 130
     b58:	9e 4f       	sbci	r25, 0xFE	; 254
     b5a:	fc 01       	movw	r30, r24
     b5c:	e2 0f       	add	r30, r18
     b5e:	f3 1f       	adc	r31, r19
     b60:	84 81       	ldd	r24, Z+4	; 0x04
     b62:	28 16       	cp	r2, r24
     b64:	08 f0       	brcs	.+2      	; 0xb68 <_ZN4arch11fetchBufferEv+0x714>
     b66:	43 c0       	rjmp	.+134    	; 0xbee <_ZN4arch11fetchBufferEv+0x79a>
     b68:	19 82       	std	Y+1, r1	; 0x01
     b6a:	ae 01       	movw	r20, r28
     b6c:	4f 5f       	subi	r20, 0xFF	; 255
     b6e:	5f 4f       	sbci	r21, 0xFF	; 255
     b70:	69 85       	ldd	r22, Y+9	; 0x09
     b72:	83 2d       	mov	r24, r3
     b74:	26 db       	rcall	.-2484   	; 0x1c2 <_ZN4arch17EEPAddressHelper_EhhRKb>
																			){
						avrecord->pc = arch::getAddress(avrecord->program,instruction[2]);
     b76:	f6 01       	movw	r30, r12
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	e2 58       	subi	r30, 0x82	; 130
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	92 83       	std	Z+2, r25	; 0x02
     b8a:	81 83       	std	Z+1, r24	; 0x01
						if (instruction[2] == 0){
     b8c:	e9 84       	ldd	r14, Y+9	; 0x09
     b8e:	e1 10       	cpse	r14, r1
     b90:	30 c0       	rjmp	.+96     	; 0xbf2 <_ZN4arch11fetchBufferEv+0x79e>
							arch::programHeaderInterpreter();
     b92:	e3 db       	rcall	.-2106   	; 0x35a <_ZN4arch24programHeaderInterpreterEv>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	2e c0       	rjmp	.+92     	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
				}
			}
		}
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
     b98:	f7 01       	movw	r30, r14
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	ee 0d       	add	r30, r14
     ba0:	ff 1d       	adc	r31, r15
     ba2:	e1 54       	subi	r30, 0x41	; 65
     ba4:	fe 4f       	sbci	r31, 0xFE	; 254
     ba6:	85 2d       	mov	r24, r5
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	98 2f       	mov	r25, r24
     bac:	88 27       	eor	r24, r24
     bae:	82 0d       	add	r24, r2
     bb0:	91 1d       	adc	r25, r1
     bb2:	9f 77       	andi	r25, 0x7F	; 127
     bb4:	91 83       	std	Z+1, r25	; 0x01
     bb6:	80 83       	st	Z, r24
		avrecord->pc += 2;
     bb8:	f6 01       	movw	r30, r12
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	ee 0f       	add	r30, r30
     bc0:	ff 1f       	adc	r31, r31
     bc2:	ee 0f       	add	r30, r30
     bc4:	ff 1f       	adc	r31, r31
     bc6:	e2 58       	subi	r30, 0x82	; 130
     bc8:	fe 4f       	sbci	r31, 0xFE	; 254
     bca:	92 82       	std	Z+2, r9	; 0x02
     bcc:	81 82       	std	Z+1, r8	; 0x01
	}
	return false;
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	11 c0       	rjmp	.+34     	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
	/* Interpreter which deals with exactly one task, returns true if idle ( = the buffer is full) */
	/* feeds the state.light.buffer */
	
	if ( (state.light.write+1) % BUFFERSIZE == state.light.read ){
		// no space to buffer new instructions
		return true;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	0f c0       	rjmp	.+30     	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	0d c0       	rjmp	.+26     	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	0b c0       	rjmp	.+22     	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	09 c0       	rjmp	.+18     	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	07 c0       	rjmp	.+14     	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	05 c0       	rjmp	.+10     	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <_ZN4arch11fetchBufferEv+0x7a0>
     bf2:	80 e0       	ldi	r24, 0x00	; 0
}
     bf4:	29 96       	adiw	r28, 0x09	; 9
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	af 90       	pop	r10
     c14:	9f 90       	pop	r9
     c16:	8f 90       	pop	r8
     c18:	7f 90       	pop	r7
     c1a:	6f 90       	pop	r6
     c1c:	5f 90       	pop	r5
     c1e:	4f 90       	pop	r4
     c20:	3f 90       	pop	r3
     c22:	2f 90       	pop	r2
     c24:	08 95       	ret

00000c26 <_ZN4arch10controllerEv>:

void arch::controller()	{// for user
     c26:	cf 93       	push	r28
     c28:	c4 e1       	ldi	r28, 0x14	; 20
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <_ZN4arch10controllerEv+0xa>
     c2c:	c1 50       	subi	r28, 0x01	; 1
	/* central control sequence of light controller */
	
	constexpr uint8_t max = 20; // <<<< change if this could be good, should be defined on top of this file
	for (uint8_t i = 0; (i<max) && (!arch::fetchBuffer()) ; ++i);
     c2e:	19 f0       	breq	.+6      	; 0xc36 <_ZN4arch10controllerEv+0x10>
     c30:	11 dc       	rcall	.-2014   	; 0x454 <_ZN4arch11fetchBufferEv>
     c32:	88 23       	and	r24, r24
     c34:	d9 f3       	breq	.-10     	; 0xc2c <_ZN4arch10controllerEv+0x6>
	
	if (state.light.bufferWait){
     c36:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <__data_end+0x73>
     c3a:	88 23       	and	r24, r24
     c3c:	19 f0       	breq	.+6      	; 0xc44 <_ZN4arch10controllerEv+0x1e>
		state.light.bufferWait = false;
     c3e:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <__data_end+0x73>
		arch::readBuffer();
     c42:	82 da       	rcall	.-2812   	; 0x148 <_ZN4arch10readBufferEv>
	}
}
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <_ZN11ItemManager4initEPFvvE>:
void input::disableEvents(){
	for(uint8_t button = 0; button <5; ++button){
		inputEvents.buttonEvent[button][BUTTON_UP].enable = false;
		inputEvents.buttonEvent[button][BUTTON_DOWN].enable = false;
	}
}
     c48:	fc 01       	movw	r30, r24
     c4a:	73 83       	std	Z+3, r23	; 0x03
     c4c:	62 83       	std	Z+2, r22	; 0x02
     c4e:	15 82       	std	Z+5, r1	; 0x05
     c50:	14 82       	std	Z+4, r1	; 0x04
     c52:	08 95       	ret

00000c54 <_ZN11ItemManager8finalizeEv>:
     c54:	fc 01       	movw	r30, r24
     c56:	13 82       	std	Z+3, r1	; 0x03
     c58:	12 82       	std	Z+2, r1	; 0x02
     c5a:	15 82       	std	Z+5, r1	; 0x05
     c5c:	14 82       	std	Z+4, r1	; 0x04
     c5e:	08 95       	ret

00000c60 <_ZN21ArcProgramItemManager4initEPFvvES1_b>:
     c60:	fc 01       	movw	r30, r24
     c62:	73 83       	std	Z+3, r23	; 0x03
     c64:	62 83       	std	Z+2, r22	; 0x02
     c66:	15 82       	std	Z+5, r1	; 0x05
     c68:	14 82       	std	Z+4, r1	; 0x04
     c6a:	57 83       	std	Z+7, r21	; 0x07
     c6c:	46 83       	std	Z+6, r20	; 0x06
     c6e:	20 87       	std	Z+8, r18	; 0x08
     c70:	08 95       	ret

00000c72 <_ZN21ArcProgramItemManagerD1Ev>:
     c72:	08 95       	ret

00000c74 <_ZN21ArcProgramItemManagerD0Ev>:
     c74:	08 95       	ret

00000c76 <_ZN21ArcProgramItemManager24runItemProcedureInternalEv>:
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	ec 01       	movw	r28, r24
     c7c:	98 85       	ldd	r25, Y+8	; 0x08
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	89 27       	eor	r24, r25
     c82:	9c 81       	ldd	r25, Y+4	; 0x04
     c84:	89 0f       	add	r24, r25
     c86:	bb db       	rcall	.-2186   	; 0x3fe <_ZN4arch10runProgramEh>
     c88:	ee 81       	ldd	r30, Y+6	; 0x06
     c8a:	ff 81       	ldd	r31, Y+7	; 0x07
     c8c:	30 97       	sbiw	r30, 0x00	; 0
     c8e:	09 f0       	breq	.+2      	; 0xc92 <_ZN21ArcProgramItemManager24runItemProcedureInternalEv+0x1c>
     c90:	09 95       	icall
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <_ZN21ArcProgramItemManager7getSizeEv>:
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	1f 92       	push	r1
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	8c 01       	movw	r16, r24
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	ae 01       	movw	r20, r28
     cae:	4f 5f       	subi	r20, 0xFF	; 255
     cb0:	5f 4f       	sbci	r21, 0xFF	; 255
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	85 da       	rcall	.-2806   	; 0x1c2 <_ZN4arch17EEPAddressHelper_EhhRKb>
     cb8:	f8 01       	movw	r30, r16
     cba:	90 85       	ldd	r25, Z+8	; 0x08
     cbc:	89 0f       	add	r24, r25
     cbe:	0f 90       	pop	r0
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <_ZN21ArcProgramItemManager20getItemLabelInternalEPc>:
     cca:	fc 01       	movw	r30, r24
     ccc:	80 85       	ldd	r24, Z+8	; 0x08
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	98 27       	eor	r25, r24
     cd2:	84 81       	ldd	r24, Z+4	; 0x04
     cd4:	89 0f       	add	r24, r25
     cd6:	fb ca       	rjmp	.-2570   	; 0x2ce <_ZN4arch14getProgramNameEhPc>
     cd8:	08 95       	ret

00000cda <_ZN5input11enableEventEhPFvvE>:
     cda:	8a 30       	cpi	r24, 0x0A	; 10
     cdc:	f0 f4       	brcc	.+60     	; 0xd1a <_ZN5input11enableEventEhPFvvE+0x40>
     cde:	28 2f       	mov	r18, r24
     ce0:	26 95       	lsr	r18
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	e8 2f       	mov	r30, r24
     ce6:	e1 70       	andi	r30, 0x01	; 1
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	cf 01       	movw	r24, r30
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	e8 0f       	add	r30, r24
     cf2:	f9 1f       	adc	r31, r25
     cf4:	c9 01       	movw	r24, r18
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	dc 01       	movw	r26, r24
     cfc:	a2 0f       	add	r26, r18
     cfe:	b3 1f       	adc	r27, r19
     d00:	aa 0f       	add	r26, r26
     d02:	bb 1f       	adc	r27, r27
     d04:	ae 0f       	add	r26, r30
     d06:	bf 1f       	adc	r27, r31
     d08:	a6 59       	subi	r26, 0x96	; 150
     d0a:	bd 4f       	sbci	r27, 0xFD	; 253
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	4c 93       	st	X, r20
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	fd 01       	movw	r30, r26
     d16:	71 83       	std	Z+1, r23	; 0x01
     d18:	60 83       	st	Z, r22
     d1a:	08 95       	ret

00000d1c <_ZN12ItemSelector13enableButtonsEv>:
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     d1c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_ZN12ItemSelector11button_okayE>
     d20:	88 0f       	add	r24, r24
	inline void guiInputEnableAll(void (*proc)()){ /* set all button events to the same handler function */
		for(uint8_t i = 0; i<10; ++i) enableEvent(i,proc);
	}
	
	inline void disableEvent(uint8_t buttonEvent){ /* disable a single button event */
		inputEvents.buttonEvent[buttonEvent/2][buttonEvent%2].enable = false;
     d22:	28 2f       	mov	r18, r24
     d24:	26 95       	lsr	r18
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	f9 01       	movw	r30, r18
     d2a:	ee 0f       	add	r30, r30
     d2c:	ff 1f       	adc	r31, r31
     d2e:	e2 0f       	add	r30, r18
     d30:	f3 1f       	adc	r31, r19
     d32:	ee 0f       	add	r30, r30
     d34:	ff 1f       	adc	r31, r31
     d36:	e6 59       	subi	r30, 0x96	; 150
     d38:	fd 4f       	sbci	r31, 0xFD	; 253
     d3a:	12 82       	std	Z+2, r1	; 0x02
}

void ItemSelector::enableButtons(){
	using namespace input;
	disableEvent(makeEvent(button_okay,BUTTON_UP));
	enableEvent(makeEvent(button_okay,BUTTON_DOWN),ItemSelector::okay_down);
     d3c:	61 e2       	ldi	r22, 0x21	; 33
     d3e:	77 e0       	ldi	r23, 0x07	; 7
     d40:	8f 5f       	subi	r24, 0xFF	; 255
     d42:	cb df       	rcall	.-106    	; 0xcda <_ZN5input11enableEventEhPFvvE>
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     d44:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_ZN12ItemSelector11button_nextE>
     d48:	88 0f       	add	r24, r24
	inline void guiInputEnableAll(void (*proc)()){ /* set all button events to the same handler function */
		for(uint8_t i = 0; i<10; ++i) enableEvent(i,proc);
	}
	
	inline void disableEvent(uint8_t buttonEvent){ /* disable a single button event */
		inputEvents.buttonEvent[buttonEvent/2][buttonEvent%2].enable = false;
     d4a:	28 2f       	mov	r18, r24
     d4c:	26 95       	lsr	r18
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	f9 01       	movw	r30, r18
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	e2 0f       	add	r30, r18
     d58:	f3 1f       	adc	r31, r19
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	e6 59       	subi	r30, 0x96	; 150
     d60:	fd 4f       	sbci	r31, 0xFD	; 253
     d62:	12 82       	std	Z+2, r1	; 0x02
	disableEvent(makeEvent(button_next,BUTTON_UP));
	enableEvent(makeEvent(button_next,BUTTON_DOWN),ItemSelector::next);
     d64:	63 e1       	ldi	r22, 0x13	; 19
     d66:	78 e0       	ldi	r23, 0x08	; 8
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	b7 df       	rcall	.-146    	; 0xcda <_ZN5input11enableEventEhPFvvE>
	if (button_prev != NO_BUTTON){
     d6c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_ZN12ItemSelector11button_prevE>
     d70:	8f 3f       	cpi	r24, 0xFF	; 255
     d72:	91 f0       	breq	.+36     	; 0xd98 <_ZN12ItemSelector13enableButtonsEv+0x7c>
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     d74:	88 0f       	add	r24, r24
	inline void guiInputEnableAll(void (*proc)()){ /* set all button events to the same handler function */
		for(uint8_t i = 0; i<10; ++i) enableEvent(i,proc);
	}
	
	inline void disableEvent(uint8_t buttonEvent){ /* disable a single button event */
		inputEvents.buttonEvent[buttonEvent/2][buttonEvent%2].enable = false;
     d76:	28 2f       	mov	r18, r24
     d78:	26 95       	lsr	r18
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	f9 01       	movw	r30, r18
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	e2 0f       	add	r30, r18
     d84:	f3 1f       	adc	r31, r19
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	e6 59       	subi	r30, 0x96	; 150
     d8c:	fd 4f       	sbci	r31, 0xFD	; 253
     d8e:	12 82       	std	Z+2, r1	; 0x02
		disableEvent(makeEvent(button_prev,BUTTON_UP));
		enableEvent(makeEvent(button_prev,BUTTON_DOWN),ItemSelector::previous);
     d90:	6a e1       	ldi	r22, 0x1A	; 26
     d92:	78 e0       	ldi	r23, 0x08	; 8
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	a1 cf       	rjmp	.-190    	; 0xcda <_ZN5input11enableEventEhPFvvE>
     d98:	08 95       	ret

00000d9a <_ZN12ItemSelector14setButtonsFreeEv>:
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     d9a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_ZN12ItemSelector11button_okayE>
     d9e:	88 0f       	add	r24, r24
	inline void guiInputEnableAll(void (*proc)()){ /* set all button events to the same handler function */
		for(uint8_t i = 0; i<10; ++i) enableEvent(i,proc);
	}
	
	inline void disableEvent(uint8_t buttonEvent){ /* disable a single button event */
		inputEvents.buttonEvent[buttonEvent/2][buttonEvent%2].enable = false;
     da0:	28 2f       	mov	r18, r24
     da2:	26 95       	lsr	r18
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	f9 01       	movw	r30, r18
     da8:	ee 0f       	add	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	e2 0f       	add	r30, r18
     dae:	f3 1f       	adc	r31, r19
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	e6 59       	subi	r30, 0x96	; 150
     db6:	fd 4f       	sbci	r31, 0xFD	; 253
     db8:	15 82       	std	Z+5, r1	; 0x05
     dba:	c9 01       	movw	r24, r18
     dbc:	fc 01       	movw	r30, r24
     dbe:	ee 0f       	add	r30, r30
     dc0:	ff 1f       	adc	r31, r31
     dc2:	e8 0f       	add	r30, r24
     dc4:	f9 1f       	adc	r31, r25
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	e6 59       	subi	r30, 0x96	; 150
     dcc:	fd 4f       	sbci	r31, 0xFD	; 253
     dce:	12 82       	std	Z+2, r1	; 0x02
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     dd0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_ZN12ItemSelector11button_nextE>
     dd4:	88 0f       	add	r24, r24
	inline void guiInputEnableAll(void (*proc)()){ /* set all button events to the same handler function */
		for(uint8_t i = 0; i<10; ++i) enableEvent(i,proc);
	}
	
	inline void disableEvent(uint8_t buttonEvent){ /* disable a single button event */
		inputEvents.buttonEvent[buttonEvent/2][buttonEvent%2].enable = false;
     dd6:	28 2f       	mov	r18, r24
     dd8:	26 95       	lsr	r18
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	f9 01       	movw	r30, r18
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	e2 0f       	add	r30, r18
     de4:	f3 1f       	adc	r31, r19
     de6:	ee 0f       	add	r30, r30
     de8:	ff 1f       	adc	r31, r31
     dea:	e6 59       	subi	r30, 0x96	; 150
     dec:	fd 4f       	sbci	r31, 0xFD	; 253
     dee:	15 82       	std	Z+5, r1	; 0x05
     df0:	c9 01       	movw	r24, r18
     df2:	fc 01       	movw	r30, r24
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	e8 0f       	add	r30, r24
     dfa:	f9 1f       	adc	r31, r25
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	e6 59       	subi	r30, 0x96	; 150
     e02:	fd 4f       	sbci	r31, 0xFD	; 253
     e04:	12 82       	std	Z+2, r1	; 0x02
	using namespace input;
	disableEvent(makeEvent(button_okay,BUTTON_DOWN));
	disableEvent(makeEvent(button_okay,BUTTON_UP));
	disableEvent(makeEvent(button_next,BUTTON_DOWN));
	disableEvent(makeEvent(button_next,BUTTON_UP));
	if (button_prev != NO_BUTTON){
     e06:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_ZN12ItemSelector11button_prevE>
     e0a:	8f 3f       	cpi	r24, 0xFF	; 255
     e0c:	c9 f0       	breq	.+50     	; 0xe40 <_ZN12ItemSelector14setButtonsFreeEv+0xa6>
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     e0e:	88 0f       	add	r24, r24
	inline void guiInputEnableAll(void (*proc)()){ /* set all button events to the same handler function */
		for(uint8_t i = 0; i<10; ++i) enableEvent(i,proc);
	}
	
	inline void disableEvent(uint8_t buttonEvent){ /* disable a single button event */
		inputEvents.buttonEvent[buttonEvent/2][buttonEvent%2].enable = false;
     e10:	28 2f       	mov	r18, r24
     e12:	26 95       	lsr	r18
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	f9 01       	movw	r30, r18
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	e2 0f       	add	r30, r18
     e1e:	f3 1f       	adc	r31, r19
     e20:	ee 0f       	add	r30, r30
     e22:	ff 1f       	adc	r31, r31
     e24:	e6 59       	subi	r30, 0x96	; 150
     e26:	fd 4f       	sbci	r31, 0xFD	; 253
     e28:	15 82       	std	Z+5, r1	; 0x05
     e2a:	c9 01       	movw	r24, r18
     e2c:	fc 01       	movw	r30, r24
     e2e:	ee 0f       	add	r30, r30
     e30:	ff 1f       	adc	r31, r31
     e32:	e8 0f       	add	r30, r24
     e34:	f9 1f       	adc	r31, r25
     e36:	ee 0f       	add	r30, r30
     e38:	ff 1f       	adc	r31, r31
     e3a:	e6 59       	subi	r30, 0x96	; 150
     e3c:	fd 4f       	sbci	r31, 0xFD	; 253
     e3e:	12 82       	std	Z+2, r1	; 0x02
     e40:	08 95       	ret

00000e42 <_ZN12ItemSelector9okay_downEv>:
}


void ItemSelector::okay_down(){
	using namespace input;
	setButtonsFree();
     e42:	ab df       	rcall	.-170    	; 0xd9a <_ZN12ItemSelector14setButtonsFreeEv>
	led::printDotsOnly(0xFF);
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	62 d3       	rcall	.+1732   	; 0x150c <_ZN3led13printDotsOnlyEh>
	hardware::delay(300);
     e48:	8c e2       	ldi	r24, 0x2C	; 44
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	5a d1       	rcall	.+692    	; 0x1102 <_ZN8hardware5delayEj>
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     e4e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_ZN12ItemSelector11button_okayE>
	enableEvent(makeEvent(button_okay,BUTTON_UP),okay_up);
     e52:	68 e7       	ldi	r22, 0x78	; 120
     e54:	78 e0       	ldi	r23, 0x08	; 8
     e56:	88 0f       	add	r24, r24
     e58:	40 cf       	rjmp	.-384    	; 0xcda <_ZN5input11enableEventEhPFvvE>
     e5a:	08 95       	ret

00000e5c <_ZN12ItemSelector14initialisationEhhhP11ItemManager>:
		disableEvent(makeEvent(button_prev,BUTTON_UP));
	}
}

void ItemSelector::initialisation(uint8_t button_okay, uint8_t button_next, uint8_t button_prev, ItemManager* itemManager){
	ItemSelector::button_okay = button_okay;
     e5c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZN12ItemSelector11button_okayE>
	ItemSelector::button_next = button_next;
     e60:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_ZN12ItemSelector11button_nextE>
	ItemSelector::button_prev = button_prev;
     e64:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_ZN12ItemSelector11button_prevE>
     e68:	08 95       	ret

00000e6a <_ZN11ItemManager18runCancelProcedureEv>:
}




bool ItemManager::runCancelProcedure(){
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
		inline uint16_t mod(){ /* return the amount of items (the mod to iterate) */
			return canCancel() + getSize();
		}
		
		inline bool canCancel(){ /* return true if there is a cancel procedure as item */
			return cancelProcedure!=nullptr;
     e6e:	dc 01       	movw	r26, r24
     e70:	12 96       	adiw	r26, 0x02	; 2
     e72:	ed 91       	ld	r30, X+
     e74:	fc 91       	ld	r31, X
     e76:	13 97       	sbiw	r26, 0x03	; 3
	if (canCancel()){
     e78:	30 97       	sbiw	r30, 0x00	; 0
     e7a:	59 f0       	breq	.+22     	; 0xe92 <_ZN11ItemManager18runCancelProcedureEv+0x28>
     e7c:	ec 01       	movw	r28, r24
		cancelProcedure();
     e7e:	09 95       	icall
		finalize();
     e80:	e8 81       	ld	r30, Y
     e82:	f9 81       	ldd	r31, Y+1	; 0x01
     e84:	00 84       	ldd	r0, Z+8	; 0x08
     e86:	f1 85       	ldd	r31, Z+9	; 0x09
     e88:	e0 2d       	mov	r30, r0
     e8a:	ce 01       	movw	r24, r28
     e8c:	09 95       	icall
		return true;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <_ZN11ItemManager18runCancelProcedureEv+0x2a>
		} else {
		return false;
     e92:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <_ZN11ItemManagerppEv>:

ItemManager& ItemManager::operator++(){
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ec 01       	movw	r28, r24
	position = (position + 1) % mod();
     ea8:	ec 80       	ldd	r14, Y+4	; 0x04
     eaa:	fd 80       	ldd	r15, Y+5	; 0x05
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	e8 1a       	sub	r14, r24
     eb0:	f8 0a       	sbc	r15, r24
     eb2:	01 e0       	ldi	r16, 0x01	; 1
     eb4:	10 e0       	ldi	r17, 0x00	; 0
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	89 2b       	or	r24, r25
     ebc:	11 f4       	brne	.+4      	; 0xec2 <_ZN11ItemManagerppEv+0x28>
     ebe:	00 e0       	ldi	r16, 0x00	; 0
     ec0:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		void (*cancelProcedure)(); /* pointer to void cancel function */
		
		inline uint16_t mod(){ /* return the amount of items (the mod to iterate) */
			return canCancel() + getSize();
     ec2:	e8 81       	ld	r30, Y
     ec4:	f9 81       	ldd	r31, Y+1	; 0x01
     ec6:	04 80       	ldd	r0, Z+4	; 0x04
     ec8:	f5 81       	ldd	r31, Z+5	; 0x05
     eca:	e0 2d       	mov	r30, r0
     ecc:	ce 01       	movw	r24, r28
     ece:	09 95       	icall
     ed0:	b8 01       	movw	r22, r16
     ed2:	68 0f       	add	r22, r24
     ed4:	71 1d       	adc	r23, r1
     ed6:	c7 01       	movw	r24, r14
     ed8:	9b d5       	rcall	.+2870   	; 0x1a10 <__udivmodhi4>
     eda:	9d 83       	std	Y+5, r25	; 0x05
     edc:	8c 83       	std	Y+4, r24	; 0x04
	return *this;
}
     ede:	ce 01       	movw	r24, r28
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	08 95       	ret

00000eee <_ZN11ItemManagermmEv>:

ItemManager& ItemManager::operator--(){
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	ec 01       	movw	r28, r24
	position = (position - 1) % mod();
     efc:	ec 80       	ldd	r14, Y+4	; 0x04
     efe:	fd 80       	ldd	r15, Y+5	; 0x05
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	e8 1a       	sub	r14, r24
     f04:	f1 08       	sbc	r15, r1
		}
		
		inline bool canCancel(){ /* return true if there is a cancel procedure as item */
			return cancelProcedure!=nullptr;
     f06:	01 e0       	ldi	r16, 0x01	; 1
     f08:	10 e0       	ldi	r17, 0x00	; 0
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	9b 81       	ldd	r25, Y+3	; 0x03
     f0e:	89 2b       	or	r24, r25
     f10:	11 f4       	brne	.+4      	; 0xf16 <_ZN11ItemManagermmEv+0x28>
     f12:	00 e0       	ldi	r16, 0x00	; 0
     f14:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		void (*cancelProcedure)(); /* pointer to void cancel function */
		
		inline uint16_t mod(){ /* return the amount of items (the mod to iterate) */
			return canCancel() + getSize();
     f16:	e8 81       	ld	r30, Y
     f18:	f9 81       	ldd	r31, Y+1	; 0x01
     f1a:	04 80       	ldd	r0, Z+4	; 0x04
     f1c:	f5 81       	ldd	r31, Z+5	; 0x05
     f1e:	e0 2d       	mov	r30, r0
     f20:	ce 01       	movw	r24, r28
     f22:	09 95       	icall
     f24:	b8 01       	movw	r22, r16
     f26:	68 0f       	add	r22, r24
     f28:	71 1d       	adc	r23, r1
     f2a:	c7 01       	movw	r24, r14
     f2c:	71 d5       	rcall	.+2786   	; 0x1a10 <__udivmodhi4>
     f2e:	9d 83       	std	Y+5, r25	; 0x05
     f30:	8c 83       	std	Y+4, r24	; 0x04
	return *this;
}
     f32:	ce 01       	movw	r24, r28
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	ef 90       	pop	r14
     f40:	08 95       	ret

00000f42 <_ZN11ItemManager12getItemLabelEPc>:

void ItemManager::getItemLabel(char* string_8_bytes){
     f42:	cf 92       	push	r12
     f44:	df 92       	push	r13
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	27 97       	sbiw	r28, 0x07	; 7
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	8c 01       	movw	r16, r24
     f64:	6b 01       	movw	r12, r22

class ItemManager {
	
	private:
		inline bool onCancelItem(){ /* return wehther the selected item is the cancel item*/
			return (canCancel()) && (static_cast<uint8_t> (position) == mod()-1);
     f66:	dc 01       	movw	r26, r24
     f68:	12 96       	adiw	r26, 0x02	; 2
     f6a:	8d 91       	ld	r24, X+
     f6c:	9c 91       	ld	r25, X
     f6e:	13 97       	sbiw	r26, 0x03	; 3
     f70:	89 2b       	or	r24, r25
     f72:	11 f1       	breq	.+68     	; 0xfb8 <_ZN11ItemManager12getItemLabelEPc+0x76>
     f74:	14 96       	adiw	r26, 0x04	; 4
     f76:	ed 90       	ld	r14, X+
     f78:	fc 90       	ld	r15, X
     f7a:	15 97       	sbiw	r26, 0x05	; 5
     f7c:	ff 24       	eor	r15, r15
		}
		
		void (*cancelProcedure)(); /* pointer to void cancel function */
		
		inline uint16_t mod(){ /* return the amount of items (the mod to iterate) */
			return canCancel() + getSize();
     f7e:	ed 91       	ld	r30, X+
     f80:	fc 91       	ld	r31, X
     f82:	04 80       	ldd	r0, Z+4	; 0x04
     f84:	f5 81       	ldd	r31, Z+5	; 0x05
     f86:	e0 2d       	mov	r30, r0
     f88:	c8 01       	movw	r24, r16
     f8a:	09 95       	icall
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
	if (onCancelItem()){
     f90:	e2 16       	cp	r14, r18
     f92:	f3 06       	cpc	r15, r19
     f94:	89 f4       	brne	.+34     	; 0xfb8 <_ZN11ItemManager12getItemLabelEPc+0x76>
		//## make a Cancel
		char mystring[] = "CANCEL";
     f96:	87 e0       	ldi	r24, 0x07	; 7
     f98:	e3 e0       	ldi	r30, 0x03	; 3
     f9a:	f1 e0       	ldi	r31, 0x01	; 1
     f9c:	de 01       	movw	r26, r28
     f9e:	11 96       	adiw	r26, 0x01	; 1
     fa0:	01 90       	ld	r0, Z+
     fa2:	0d 92       	st	X+, r0
     fa4:	8a 95       	dec	r24
     fa6:	e1 f7       	brne	.-8      	; 0xfa0 <_ZN11ItemManager12getItemLabelEPc+0x5e>
		hardware::copyString(string_8_bytes,mystring,8,false);
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	48 e0       	ldi	r20, 0x08	; 8
     fac:	be 01       	movw	r22, r28
     fae:	6f 5f       	subi	r22, 0xFF	; 255
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	c6 01       	movw	r24, r12
     fb4:	c8 d0       	rcall	.+400    	; 0x1146 <_ZN8hardware10copyStringEPcPKchb>
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <_ZN11ItemManager12getItemLabelEPc+0x88>
		} else {
		getItemLabelInternal(string_8_bytes);
     fb8:	d8 01       	movw	r26, r16
     fba:	ed 91       	ld	r30, X+
     fbc:	fc 91       	ld	r31, X
     fbe:	01 90       	ld	r0, Z+
     fc0:	f0 81       	ld	r31, Z
     fc2:	e0 2d       	mov	r30, r0
     fc4:	b6 01       	movw	r22, r12
     fc6:	c8 01       	movw	r24, r16
     fc8:	09 95       	icall
	}
}
     fca:	27 96       	adiw	r28, 0x07	; 7
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
     fe6:	08 95       	ret

00000fe8 <_ZN12ItemSelector9printItemEv>:
void ItemSelector::previous(){
	--(*itemManager);
	printItem();
}

void ItemSelector::printItem(){
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	29 97       	sbiw	r28, 0x09	; 9
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
	char label[9];
	itemManager->getItemLabel(label);
     ffc:	be 01       	movw	r22, r28
     ffe:	6f 5f       	subi	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN12ItemSelector11itemManagerE>
    1006:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <_ZN12ItemSelector11itemManagerE+0x1>
    100a:	9b df       	rcall	.-202    	; 0xf42 <_ZN11ItemManager12getItemLabelEPc>
	label[8] = '\0';
    100c:	19 86       	std	Y+9, r1	; 0x09
	led::LFPrintString(label);// this function should also exist with an secound parameter to set the string legth!!!#####
    100e:	ce 01       	movw	r24, r28
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	73 d2       	rcall	.+1254   	; 0x14fa <_ZN3led13LFPrintStringEPKc>
}
    1014:	29 96       	adiw	r28, 0x09	; 9
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <_ZN12ItemSelector4nextEv>:
	finalize();
}


void ItemSelector::next(){
	++(*itemManager);
    1026:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN12ItemSelector11itemManagerE>
    102a:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <_ZN12ItemSelector11itemManagerE+0x1>
    102e:	35 df       	rcall	.-406    	; 0xe9a <_ZN11ItemManagerppEv>
	printItem();
    1030:	db cf       	rjmp	.-74     	; 0xfe8 <_ZN12ItemSelector9printItemEv>
    1032:	08 95       	ret

00001034 <_ZN12ItemSelector8previousEv>:
}

void ItemSelector::previous(){
	--(*itemManager);
    1034:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN12ItemSelector11itemManagerE>
    1038:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <_ZN12ItemSelector11itemManagerE+0x1>
    103c:	58 df       	rcall	.-336    	; 0xeee <_ZN11ItemManagermmEv>
	printItem();
    103e:	d4 cf       	rjmp	.-88     	; 0xfe8 <_ZN12ItemSelector9printItemEv>
    1040:	08 95       	ret

00001042 <_ZN12ItemSelector3runEv>:
	itemManager->getItemLabel(label);
	label[8] = '\0';
	led::LFPrintString(label);// this function should also exist with an secound parameter to set the string legth!!!#####
}

bool ItemSelector::run(){
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
	// no items:
	if (itemManager->isEmpty()) return false; //<<<<<< throw error
    1046:	a0 91 68 02 	lds	r26, 0x0268	; 0x800268 <_ZN12ItemSelector11itemManagerE>
    104a:	b0 91 69 02 	lds	r27, 0x0269	; 0x800269 <_ZN12ItemSelector11itemManagerE+0x1>
		}
		
		inline bool canCancel(){ /* return true if there is a cancel procedure as item */
			return cancelProcedure!=nullptr;
    104e:	c1 e0       	ldi	r28, 0x01	; 1
    1050:	d0 e0       	ldi	r29, 0x00	; 0
    1052:	12 96       	adiw	r26, 0x02	; 2
    1054:	8d 91       	ld	r24, X+
    1056:	9c 91       	ld	r25, X
    1058:	13 97       	sbiw	r26, 0x03	; 3
    105a:	89 2b       	or	r24, r25
    105c:	11 f4       	brne	.+4      	; 0x1062 <_ZN12ItemSelector3runEv+0x20>
    105e:	c0 e0       	ldi	r28, 0x00	; 0
    1060:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		void (*cancelProcedure)(); /* pointer to void cancel function */
		
		inline uint16_t mod(){ /* return the amount of items (the mod to iterate) */
			return canCancel() + getSize();
    1062:	ed 91       	ld	r30, X+
    1064:	fc 91       	ld	r31, X
    1066:	11 97       	sbiw	r26, 0x01	; 1
    1068:	04 80       	ldd	r0, Z+4	; 0x04
    106a:	f5 81       	ldd	r31, Z+5	; 0x05
    106c:	e0 2d       	mov	r30, r0
    106e:	cd 01       	movw	r24, r26
    1070:	09 95       	icall
    1072:	c8 0f       	add	r28, r24
    1074:	d1 1d       	adc	r29, r1
    1076:	cd 2b       	or	r28, r29
    1078:	51 f0       	breq	.+20     	; 0x108e <_ZN12ItemSelector3runEv+0x4c>
	enableButtons();
    107a:	50 de       	rcall	.-864    	; 0xd1c <_ZN12ItemSelector13enableButtonsEv>
	led::LFPrintString("SELECT");
    107c:	8a e0       	ldi	r24, 0x0A	; 10
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	3c d2       	rcall	.+1144   	; 0x14fa <_ZN3led13LFPrintStringEPKc>
	hardware::delay(1000);
    1082:	88 ee       	ldi	r24, 0xE8	; 232
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	3d d0       	rcall	.+122    	; 0x1102 <_ZN8hardware5delayEj>
	printItem();
    1088:	af df       	rcall	.-162    	; 0xfe8 <_ZN12ItemSelector9printItemEv>
	return true;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <_ZN12ItemSelector3runEv+0x4e>
	led::LFPrintString(label);// this function should also exist with an secound parameter to set the string legth!!!#####
}

bool ItemSelector::run(){
	// no items:
	if (itemManager->isEmpty()) return false; //<<<<<< throw error
    108e:	80 e0       	ldi	r24, 0x00	; 0
	enableButtons();
	led::LFPrintString("SELECT");
	hardware::delay(1000);
	printItem();
	return true;
}
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <_ZN11ItemManager16runItemProcedureEv>:
		} else {
		getItemLabelInternal(string_8_bytes);
	}
}

void ItemManager::runItemProcedure(){
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	ec 01       	movw	r28, r24

class ItemManager {
	
	private:
		inline bool onCancelItem(){ /* return wehther the selected item is the cancel item*/
			return (canCancel()) && (static_cast<uint8_t> (position) == mod()-1);
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	9b 81       	ldd	r25, Y+3	; 0x03
    10a4:	89 2b       	or	r24, r25
    10a6:	89 f0       	breq	.+34     	; 0x10ca <_ZN11ItemManager16runItemProcedureEv+0x34>
    10a8:	0c 81       	ldd	r16, Y+4	; 0x04
    10aa:	1d 81       	ldd	r17, Y+5	; 0x05
    10ac:	11 27       	eor	r17, r17
		}
		
		void (*cancelProcedure)(); /* pointer to void cancel function */
		
		inline uint16_t mod(){ /* return the amount of items (the mod to iterate) */
			return canCancel() + getSize();
    10ae:	e8 81       	ld	r30, Y
    10b0:	f9 81       	ldd	r31, Y+1	; 0x01
    10b2:	04 80       	ldd	r0, Z+4	; 0x04
    10b4:	f5 81       	ldd	r31, Z+5	; 0x05
    10b6:	e0 2d       	mov	r30, r0
    10b8:	ce 01       	movw	r24, r28
    10ba:	09 95       	icall
    10bc:	90 e0       	ldi	r25, 0x00	; 0
	if (onCancelItem()){
    10be:	08 17       	cp	r16, r24
    10c0:	19 07       	cpc	r17, r25
    10c2:	19 f4       	brne	.+6      	; 0x10ca <_ZN11ItemManager16runItemProcedureEv+0x34>
		runCancelProcedure();
    10c4:	ce 01       	movw	r24, r28
    10c6:	d1 de       	rcall	.-606    	; 0xe6a <_ZN11ItemManager18runCancelProcedureEv>
    10c8:	07 c0       	rjmp	.+14     	; 0x10d8 <_ZN11ItemManager16runItemProcedureEv+0x42>
		} else {
		runItemProcedureInternal();
    10ca:	e8 81       	ld	r30, Y
    10cc:	f9 81       	ldd	r31, Y+1	; 0x01
    10ce:	02 80       	ldd	r0, Z+2	; 0x02
    10d0:	f3 81       	ldd	r31, Z+3	; 0x03
    10d2:	e0 2d       	mov	r30, r0
    10d4:	ce 01       	movw	r24, r28
    10d6:	09 95       	icall
	}
	finalize();
    10d8:	e8 81       	ld	r30, Y
    10da:	f9 81       	ldd	r31, Y+1	; 0x01
    10dc:	00 84       	ldd	r0, Z+8	; 0x08
    10de:	f1 85       	ldd	r31, Z+9	; 0x09
    10e0:	e0 2d       	mov	r30, r0
    10e2:	ce 01       	movw	r24, r28
    10e4:	09 95       	icall
}
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <_ZN12ItemSelector7okay_upEv>:
	hardware::delay(300);
	enableEvent(makeEvent(button_okay,BUTTON_UP),okay_up);
}

void ItemSelector::okay_up(){
	led::printDotsOnly(0x00);
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	0c d2       	rcall	.+1048   	; 0x150c <_ZN3led13printDotsOnlyEh>
	itemManager->runItemProcedure();
    10f4:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN12ItemSelector11itemManagerE>
    10f8:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <_ZN12ItemSelector11itemManagerE+0x1>
    10fc:	cc df       	rcall	.-104    	; 0x1096 <_ZN11ItemManager16runItemProcedureEv>
	void setButtonsFree(); /* disable the NEXT, PREVIOUS & OKAY methods associated to the buttons (for internal use only) */
	
	void initialisation(uint8_t button_okay, uint8_t button_next, uint8_t button_prev, ItemManager* itemManager); /* init variables, the ItemManager* is just a pointer to an ItemManager. You have to care about construction, destruction yourself */
	
	inline void finalize(){ /* disable button events (for using programmer) */
		setButtonsFree();
    10fe:	4d ce       	rjmp	.-870    	; 0xd9a <_ZN12ItemSelector14setButtonsFreeEv>
    1100:	08 95       	ret

00001102 <_ZN8hardware5delayEj>:
#include "f_ledline.h"

void hardware::delay(uint16_t ms){
	/* busy delay in ms */
	// <<<<<< refactor and check the function of delay
	for(uint16_t i = 0; i<ms; i+=10){
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	69 f0       	breq	.+26     	; 0x1120 <_ZN8hardware5delayEj+0x1e>
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    110a:	ef e3       	ldi	r30, 0x3F	; 63
    110c:	fc e9       	ldi	r31, 0x9C	; 156
    110e:	31 97       	sbiw	r30, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <_ZN8hardware5delayEj+0xc>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <_ZN8hardware5delayEj+0x12>
    1114:	00 00       	nop
    1116:	26 5f       	subi	r18, 0xF6	; 246
    1118:	3f 4f       	sbci	r19, 0xFF	; 255
    111a:	28 17       	cp	r18, r24
    111c:	39 07       	cpc	r19, r25
    111e:	a8 f3       	brcs	.-22     	; 0x110a <_ZN8hardware5delayEj+0x8>
    1120:	08 95       	ret

00001122 <_ZN8hardware9isEEPNullEj>:
		_delay_ms(10);
	}
}

bool hardware::isEEPNull(uint16_t address){
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	ec 01       	movw	r28, r24
	/* return whether an eeprom address is out of range (NULL), throw an error if a non standard NULL address (!=EEPNULL) was used */
	if (	(address >= (1<<12))		&&		(address!=EEPNULL)		){
    1128:	90 51       	subi	r25, 0x10	; 16
    112a:	8f 3f       	cpi	r24, 0xFF	; 255
    112c:	9f 4e       	sbci	r25, 0xEF	; 239
    112e:	18 f4       	brcc	.+6      	; 0x1136 <_ZN8hardware9isEEPNullEj+0x14>
		led::error(0);
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	5f d2       	rcall	.+1214   	; 0x15f4 <_ZN3led5errorEj>
	}
	return (address >= (1<<12));
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	c1 15       	cp	r28, r1
    113a:	d0 41       	sbci	r29, 0x10	; 16
    113c:	08 f4       	brcc	.+2      	; 0x1140 <_ZN8hardware9isEEPNullEj+0x1e>
    113e:	80 e0       	ldi	r24, 0x00	; 0
}
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <_ZN8hardware10copyStringEPcPKchb>:

void hardware::copyString(char* destination, const char* source, uint8_t count, bool nullTerminated){
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	8c 01       	movw	r16, r24
	uint8_t index = 0;
	while(index < count){
    1150:	44 23       	and	r20, r20
    1152:	b1 f0       	breq	.+44     	; 0x1180 <_ZN8hardware10copyStringEPcPKchb+0x3a>
		destination[index] = source[index];
    1154:	fb 01       	movw	r30, r22
    1156:	80 81       	ld	r24, Z
    1158:	f8 01       	movw	r30, r16
    115a:	80 83       	st	Z, r24
		if (source[index] =='\0') return;
    115c:	fb 01       	movw	r30, r22
    115e:	80 81       	ld	r24, Z
    1160:	88 23       	and	r24, r24
    1162:	a1 f0       	breq	.+40     	; 0x118c <_ZN8hardware10copyStringEPcPKchb+0x46>
    1164:	d8 01       	movw	r26, r16
    1166:	11 96       	adiw	r26, 0x01	; 1
    1168:	31 96       	adiw	r30, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	06 c0       	rjmp	.+12     	; 0x117a <_ZN8hardware10copyStringEPcPKchb+0x34>
    116e:	ef 01       	movw	r28, r30
}

void hardware::copyString(char* destination, const char* source, uint8_t count, bool nullTerminated){
	uint8_t index = 0;
	while(index < count){
		destination[index] = source[index];
    1170:	31 91       	ld	r19, Z+
    1172:	3d 93       	st	X+, r19
		if (source[index] =='\0') return;
    1174:	38 81       	ld	r19, Y
    1176:	33 23       	and	r19, r19
    1178:	49 f0       	breq	.+18     	; 0x118c <_ZN8hardware10copyStringEPcPKchb+0x46>
		++index;
    117a:	9f 5f       	subi	r25, 0xFF	; 255
	return (address >= (1<<12));
}

void hardware::copyString(char* destination, const char* source, uint8_t count, bool nullTerminated){
	uint8_t index = 0;
	while(index < count){
    117c:	94 13       	cpse	r25, r20
    117e:	f7 cf       	rjmp	.-18     	; 0x116e <_ZN8hardware10copyStringEPcPKchb+0x28>
		destination[index] = source[index];
		if (source[index] =='\0') return;
		++index;
	}
	if (nullTerminated) {destination[index] = '\0';}
    1180:	22 23       	and	r18, r18
    1182:	21 f0       	breq	.+8      	; 0x118c <_ZN8hardware10copyStringEPcPKchb+0x46>
    1184:	f8 01       	movw	r30, r16
    1186:	e4 0f       	add	r30, r20
    1188:	f1 1d       	adc	r31, r1
    118a:	10 82       	st	Z, r1
}
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	08 95       	ret

00001196 <_ZN3led5latchEv>:

bool led::changeDot(char* sign){
	/* change the dot of the sign and return whether the sign has a dot @after */
	*sign ^= 1<<7;
	return led::isDotted(*sign); 
}
    1196:	9b b3       	in	r25, 0x1b	; 27
    1198:	84 e0       	ldi	r24, 0x04	; 4
    119a:	98 27       	eor	r25, r24
    119c:	9b bb       	out	0x1b, r25	; 27
    119e:	9b b3       	in	r25, 0x1b	; 27
    11a0:	89 27       	eor	r24, r25
    11a2:	8b bb       	out	0x1b, r24	; 27
    11a4:	08 95       	ret

000011a6 <_ZN3led13pushBitInternEb>:
    11a6:	9b b3       	in	r25, 0x1b	; 27
    11a8:	9e 7f       	andi	r25, 0xFE	; 254
    11aa:	89 2b       	or	r24, r25
    11ac:	8b bb       	out	0x1b, r24	; 27
    11ae:	9b b3       	in	r25, 0x1b	; 27
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	98 27       	eor	r25, r24
    11b4:	9b bb       	out	0x1b, r25	; 27
    11b6:	9b b3       	in	r25, 0x1b	; 27
    11b8:	89 27       	eor	r24, r25
    11ba:	8b bb       	out	0x1b, r24	; 27
    11bc:	08 95       	ret

000011be <_ZN3led7pushBitEb>:
    11be:	af 92       	push	r10
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	e8 2f       	mov	r30, r24
    11d0:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <_ZL9_LEDLINE_>
    11d4:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <_ZL9_LEDLINE_+0x1>
    11d8:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <_ZL9_LEDLINE_+0x2>
    11dc:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <_ZL9_LEDLINE_+0x3>
    11e0:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <_ZL9_LEDLINE_+0x4>
    11e4:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <_ZL9_LEDLINE_+0x5>
    11e8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZL9_LEDLINE_+0x6>
    11ec:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <_ZL9_LEDLINE_+0x7>
    11f0:	01 e0       	ldi	r16, 0x01	; 1
    11f2:	35 d4       	rcall	.+2154   	; 0x1a5e <__ashldi3>
    11f4:	a2 2e       	mov	r10, r18
    11f6:	b3 2e       	mov	r11, r19
    11f8:	c4 2e       	mov	r12, r20
    11fa:	d5 2e       	mov	r13, r21
    11fc:	e6 2e       	mov	r14, r22
    11fe:	f7 2e       	mov	r15, r23
    1200:	08 2f       	mov	r16, r24
    1202:	19 2f       	mov	r17, r25
    1204:	2e 2f       	mov	r18, r30
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	3d d4       	rcall	.+2170   	; 0x1a90 <__adddi3>
    1216:	20 93 88 02 	sts	0x0288, r18	; 0x800288 <_ZL9_LEDLINE_>
    121a:	30 93 89 02 	sts	0x0289, r19	; 0x800289 <_ZL9_LEDLINE_+0x1>
    121e:	40 93 8a 02 	sts	0x028A, r20	; 0x80028a <_ZL9_LEDLINE_+0x2>
    1222:	50 93 8b 02 	sts	0x028B, r21	; 0x80028b <_ZL9_LEDLINE_+0x3>
    1226:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <_ZL9_LEDLINE_+0x4>
    122a:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <_ZL9_LEDLINE_+0x5>
    122e:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <_ZL9_LEDLINE_+0x6>
    1232:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <_ZL9_LEDLINE_+0x7>
    1236:	8e 2f       	mov	r24, r30
    1238:	b6 df       	rcall	.-148    	; 0x11a6 <_ZN3led13pushBitInternEb>
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	bf 90       	pop	r11
    1248:	af 90       	pop	r10
    124a:	08 95       	ret

0000124c <_ZN3led8pushByteEh>:
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	e8 2f       	mov	r30, r24
    1262:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <_ZL9_LEDLINE_>
    1266:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <_ZL9_LEDLINE_+0x1>
    126a:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <_ZL9_LEDLINE_+0x2>
    126e:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <_ZL9_LEDLINE_+0x3>
    1272:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <_ZL9_LEDLINE_+0x4>
    1276:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <_ZL9_LEDLINE_+0x5>
    127a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZL9_LEDLINE_+0x6>
    127e:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <_ZL9_LEDLINE_+0x7>
    1282:	08 e0       	ldi	r16, 0x08	; 8
    1284:	ec d3       	rcall	.+2008   	; 0x1a5e <__ashldi3>
    1286:	a2 2e       	mov	r10, r18
    1288:	b3 2e       	mov	r11, r19
    128a:	c4 2e       	mov	r12, r20
    128c:	d5 2e       	mov	r13, r21
    128e:	e6 2e       	mov	r14, r22
    1290:	f7 2e       	mov	r15, r23
    1292:	08 2f       	mov	r16, r24
    1294:	19 2f       	mov	r17, r25
    1296:	2e 2f       	mov	r18, r30
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	f4 d3       	rcall	.+2024   	; 0x1a90 <__adddi3>
    12a8:	20 93 88 02 	sts	0x0288, r18	; 0x800288 <_ZL9_LEDLINE_>
    12ac:	30 93 89 02 	sts	0x0289, r19	; 0x800289 <_ZL9_LEDLINE_+0x1>
    12b0:	40 93 8a 02 	sts	0x028A, r20	; 0x80028a <_ZL9_LEDLINE_+0x2>
    12b4:	50 93 8b 02 	sts	0x028B, r21	; 0x80028b <_ZL9_LEDLINE_+0x3>
    12b8:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <_ZL9_LEDLINE_+0x4>
    12bc:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <_ZL9_LEDLINE_+0x5>
    12c0:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <_ZL9_LEDLINE_+0x6>
    12c4:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <_ZL9_LEDLINE_+0x7>
    12c8:	c7 e0       	ldi	r28, 0x07	; 7
    12ca:	d0 e0       	ldi	r29, 0x00	; 0
    12cc:	0e 2f       	mov	r16, r30
    12ce:	10 e0       	ldi	r17, 0x00	; 0
    12d0:	c8 01       	movw	r24, r16
    12d2:	0c 2e       	mov	r0, r28
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <_ZN3led8pushByteEh+0x8e>
    12d6:	95 95       	asr	r25
    12d8:	87 95       	ror	r24
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <_ZN3led8pushByteEh+0x8a>
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	62 df       	rcall	.-316    	; 0x11a6 <_ZN3led13pushBitInternEb>
    12e2:	21 97       	sbiw	r28, 0x01	; 1
    12e4:	a8 f7       	brcc	.-22     	; 0x12d0 <_ZN3led8pushByteEh+0x84>
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	bf 90       	pop	r11
    12f8:	af 90       	pop	r10
    12fa:	08 95       	ret

000012fc <_ZN3led6push64Ey>:
    12fc:	7f 92       	push	r7
    12fe:	8f 92       	push	r8
    1300:	9f 92       	push	r9
    1302:	af 92       	push	r10
    1304:	bf 92       	push	r11
    1306:	cf 92       	push	r12
    1308:	df 92       	push	r13
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	82 2e       	mov	r8, r18
    1318:	93 2e       	mov	r9, r19
    131a:	a4 2e       	mov	r10, r20
    131c:	b5 2e       	mov	r11, r21
    131e:	c6 2e       	mov	r12, r22
    1320:	d7 2e       	mov	r13, r23
    1322:	08 2f       	mov	r16, r24
    1324:	19 2f       	mov	r17, r25
    1326:	20 93 88 02 	sts	0x0288, r18	; 0x800288 <_ZL9_LEDLINE_>
    132a:	30 93 89 02 	sts	0x0289, r19	; 0x800289 <_ZL9_LEDLINE_+0x1>
    132e:	40 93 8a 02 	sts	0x028A, r20	; 0x80028a <_ZL9_LEDLINE_+0x2>
    1332:	50 93 8b 02 	sts	0x028B, r21	; 0x80028b <_ZL9_LEDLINE_+0x3>
    1336:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <_ZL9_LEDLINE_+0x4>
    133a:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <_ZL9_LEDLINE_+0x5>
    133e:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <_ZL9_LEDLINE_+0x6>
    1342:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <_ZL9_LEDLINE_+0x7>
    1346:	cf e3       	ldi	r28, 0x3F	; 63
    1348:	d0 e0       	ldi	r29, 0x00	; 0
    134a:	ee 24       	eor	r14, r14
    134c:	e3 94       	inc	r14
    134e:	f1 2c       	mov	r15, r1
    1350:	77 24       	eor	r7, r7
    1352:	73 94       	inc	r7
    1354:	f7 01       	movw	r30, r14
    1356:	0c 2e       	mov	r0, r28
    1358:	02 c0       	rjmp	.+4      	; 0x135e <_ZN3led6push64Ey+0x62>
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <_ZN3led6push64Ey+0x5e>
    1362:	9f 2f       	mov	r25, r31
    1364:	99 0f       	add	r25, r25
    1366:	99 0b       	sbc	r25, r25
    1368:	28 2d       	mov	r18, r8
    136a:	2e 23       	and	r18, r30
    136c:	39 2d       	mov	r19, r9
    136e:	3f 23       	and	r19, r31
    1370:	49 2f       	mov	r20, r25
    1372:	4a 21       	and	r20, r10
    1374:	59 2f       	mov	r21, r25
    1376:	5b 21       	and	r21, r11
    1378:	69 2f       	mov	r22, r25
    137a:	6c 21       	and	r22, r12
    137c:	79 2f       	mov	r23, r25
    137e:	7d 21       	and	r23, r13
    1380:	e7 2d       	mov	r30, r7
    1382:	89 2f       	mov	r24, r25
    1384:	80 23       	and	r24, r16
    1386:	91 23       	and	r25, r17
    1388:	a0 e0       	ldi	r26, 0x00	; 0
    138a:	8b d3       	rcall	.+1814   	; 0x1aa2 <__cmpdi2_s8>
    138c:	09 f4       	brne	.+2      	; 0x1390 <_ZN3led6push64Ey+0x94>
    138e:	e0 e0       	ldi	r30, 0x00	; 0
    1390:	8e 2f       	mov	r24, r30
    1392:	09 df       	rcall	.-494    	; 0x11a6 <_ZN3led13pushBitInternEb>
    1394:	21 97       	sbiw	r28, 0x01	; 1
    1396:	f0 f6       	brcc	.-68     	; 0x1354 <_ZN3led6push64Ey+0x58>
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	df 90       	pop	r13
    13a6:	cf 90       	pop	r12
    13a8:	bf 90       	pop	r11
    13aa:	af 90       	pop	r10
    13ac:	9f 90       	pop	r9
    13ae:	8f 90       	pop	r8
    13b0:	7f 90       	pop	r7
    13b2:	08 95       	ret

000013b4 <_ZN3led10pushMemoryEv>:
    13b4:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <_ZL9_LEDLINE_>
    13b8:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <_ZL9_LEDLINE_+0x1>
    13bc:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <_ZL9_LEDLINE_+0x2>
    13c0:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <_ZL9_LEDLINE_+0x3>
    13c4:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <_ZL9_LEDLINE_+0x4>
    13c8:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <_ZL9_LEDLINE_+0x5>
    13cc:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZL9_LEDLINE_+0x6>
    13d0:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <_ZL9_LEDLINE_+0x7>
    13d4:	93 df       	rcall	.-218    	; 0x12fc <_ZN3led6push64Ey>
    13d6:	df ce       	rjmp	.-578    	; 0x1196 <_ZN3led5latchEv>
    13d8:	08 95       	ret

000013da <_ZN3led15pushByteVisibleEh>:
    13da:	38 df       	rcall	.-400    	; 0x124c <_ZN3led8pushByteEh>
    13dc:	dc ce       	rjmp	.-584    	; 0x1196 <_ZN3led5latchEv>
    13de:	08 95       	ret

000013e0 <_ZN3led8isDottedEc>:
    13e0:	88 1f       	adc	r24, r24
    13e2:	88 27       	eor	r24, r24
    13e4:	88 1f       	adc	r24, r24
    13e6:	08 95       	ret

000013e8 <_ZN3led6setDotEPcb>:
    13e8:	fc 01       	movw	r30, r24
    13ea:	90 81       	ld	r25, Z
    13ec:	60 fb       	bst	r22, 0
    13ee:	97 f9       	bld	r25, 7
    13f0:	90 83       	st	Z, r25
    13f2:	08 95       	ret

000013f4 <_ZN3led8signCodeEc>:

uint8_t led::signCode(char sign){
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	c5 54       	subi	r28, 0x45	; 69
    13fe:	d1 09       	sbc	r29, r1
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
		nomenclature:
		 a char sign is basically a code with an >>implicit dot<< (the MSB)
		 the 'real implicit dot' is stored in the look-up table and means the dot of an question mark or an semicolon for example
	*/
	
	uint16_t code = sign & 0b01111111;
    140a:	e8 2f       	mov	r30, r24
    140c:	ef 77       	andi	r30, 0x7F	; 127
    140e:	f0 e0       	ldi	r31, 0x00	; 0
										0x5F, 0x73, 0x31, 0x79, 0x37, 0x17, 0x76, 0x53, 0x12, 0x78, 0x3B, 0x32, 0x5E, 0x51, 0x71, 0x1F, 0x4F, 0x57, 0x66, 0x4C, 0x70, 0x2A, 0x7A, 0x5B, 0x6B, 0x3C,
										
									//	[		\	]		^	_		`	{		|	}		~	[127]
										0x36, 0x43, 0x6C, 0x0E, 0x20, 0x08, 0x27, 0x5A, 0x2D, 0x75, 0x0F};
		
	if (code == 10){
    1410:	ea 30       	cpi	r30, 0x0A	; 10
    1412:	f1 05       	cpc	r31, r1
    1414:	a9 f0       	breq	.+42     	; 0x1440 <_ZN3led8signCodeEc+0x4c>
		/* do smth in order to make a line feed */
		return 0x00; // <<<<< the newline char is currently a space sign, please change the function signature / provide an additional function
	}
	
	if (code < 33){
    1416:	e1 32       	cpi	r30, 0x21	; 33
    1418:	f1 05       	cpc	r31, r1
    141a:	18 f4       	brcc	.+6      	; 0x1422 <_ZN3led8signCodeEc+0x2e>
		/* throw a standard sign */
		return 0xFF ^ (DOTSIGN * isDotted(sign));
    141c:	80 78       	andi	r24, 0x80	; 128
    141e:	80 95       	com	r24
    1420:	10 c0       	rjmp	.+32     	; 0x1442 <_ZN3led8signCodeEc+0x4e>
	}
	
	if (code >96){// small letters match to capital letters
    1422:	e1 36       	cpi	r30, 0x61	; 97
    1424:	f1 05       	cpc	r31, r1
    1426:	28 f0       	brcs	.+10     	; 0x1432 <_ZN3led8signCodeEc+0x3e>
		if (code > 122){
    1428:	eb 37       	cpi	r30, 0x7B	; 123
    142a:	f1 05       	cpc	r31, r1
    142c:	08 f0       	brcs	.+2      	; 0x1430 <_ZN3led8signCodeEc+0x3c>
			code += 6;
    142e:	36 96       	adiw	r30, 0x06	; 6
		}
		code -= 23;
    1430:	77 97       	sbiw	r30, 0x17	; 23
	}
	
	code -=33;
	return static_cast<uint8_t>( pgm_read_byte(&codeTable[code])) ^ (isDotted(sign) * DOTSIGN);
    1432:	ec 0f       	add	r30, r28
    1434:	fd 1f       	adc	r31, r29
    1436:	b0 97       	sbiw	r30, 0x20	; 32
    1438:	e4 91       	lpm	r30, Z
    143a:	80 78       	andi	r24, 0x80	; 128
    143c:	8e 27       	eor	r24, r30
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <_ZN3led8signCodeEc+0x4e>
									//	[		\	]		^	_		`	{		|	}		~	[127]
										0x36, 0x43, 0x6C, 0x0E, 0x20, 0x08, 0x27, 0x5A, 0x2D, 0x75, 0x0F};
		
	if (code == 10){
		/* do smth in order to make a line feed */
		return 0x00; // <<<<< the newline char is currently a space sign, please change the function signature / provide an additional function
    1440:	80 e0       	ldi	r24, 0x00	; 0
		code -= 23;
	}
	
	code -=33;
	return static_cast<uint8_t>( pgm_read_byte(&codeTable[code])) ^ (isDotted(sign) * DOTSIGN);
}
    1442:	cb 5b       	subi	r28, 0xBB	; 187
    1444:	df 4f       	sbci	r29, 0xFF	; 255
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <_ZN3led9printSignEc>:

void led::printSign(char sign){//for user
	/* (visible) print a sign to the end of the led output */
	led::pushByteVisible(led::signCode(sign));
    1456:	ce df       	rcall	.-100    	; 0x13f4 <_ZN3led8signCodeEc>
    1458:	c0 cf       	rjmp	.-128    	; 0x13da <_ZN3led15pushByteVisibleEh>
    145a:	08 95       	ret

0000145c <_ZN3led17printSignDottableEcb>:
		led::printInt(abs(integer/10));
	}
	led::printDigit(fractional);
}

void led::printSignDottable(char sign, bool dot){//for user
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	1f 92       	push	r1
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	89 83       	std	Y+1, r24	; 0x01
	/* push a sign (visible) to the led output with explicit dotting (implicit dot will be overwritten) */
	led::setDot(&sign,dot);
    1468:	ce 01       	movw	r24, r28
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	bd df       	rcall	.-134    	; 0x13e8 <_ZN3led6setDotEPcb>
	led::printSign(sign);
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	f2 df       	rcall	.-28     	; 0x1456 <_ZN3led9printSignEc>
}
    1472:	0f 90       	pop	r0
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <_ZN3led11printStringEPKc>:

void led::printString(const char* string){//for user
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	fc 01       	movw	r30, r24
	/* print a string to the led output (also supports implicit dotting ) */
	uint8_t i {0};
	while (*(string+i)!='\0'){
    1482:	80 81       	ld	r24, Z
    1484:	88 23       	and	r24, r24
    1486:	51 f0       	breq	.+20     	; 0x149c <_ZN3led11printStringEPKc+0x22>
    1488:	8f 01       	movw	r16, r30
    148a:	c0 e0       	ldi	r28, 0x00	; 0
		led::printSign(*(string+i));
    148c:	e4 df       	rcall	.-56     	; 0x1456 <_ZN3led9printSignEc>
		++i;
    148e:	cf 5f       	subi	r28, 0xFF	; 255
}

void led::printString(const char* string){//for user
	/* print a string to the led output (also supports implicit dotting ) */
	uint8_t i {0};
	while (*(string+i)!='\0'){
    1490:	f8 01       	movw	r30, r16
    1492:	ec 0f       	add	r30, r28
    1494:	f1 1d       	adc	r31, r1
    1496:	80 81       	ld	r24, Z
    1498:	81 11       	cpse	r24, r1
    149a:	f8 cf       	rjmp	.-16     	; 0x148c <_ZN3led11printStringEPKc+0x12>
		led::printSign(*(string+i));
		++i;
	}
}
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	08 95       	ret

000014a4 <_ZN3led5clearEv>:

void led::clear(){//for user
    14a4:	cf 93       	push	r28
	/* clear the LED line */
	for(uint8_t i = 0; i<LINELENGTH; ++i){
    14a6:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_ZL10LINELENGTH>
    14aa:	88 23       	and	r24, r24
    14ac:	41 f0       	breq	.+16     	; 0x14be <_ZN3led5clearEv+0x1a>
    14ae:	c0 e0       	ldi	r28, 0x00	; 0
		led::pushByte(0);
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	cc de       	rcall	.-616    	; 0x124c <_ZN3led8pushByteEh>
	}
}

void led::clear(){//for user
	/* clear the LED line */
	for(uint8_t i = 0; i<LINELENGTH; ++i){
    14b4:	cf 5f       	subi	r28, 0xFF	; 255
    14b6:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_ZL10LINELENGTH>
    14ba:	c8 17       	cp	r28, r24
    14bc:	c8 f3       	brcs	.-14     	; 0x14b0 <_ZN3led5clearEv+0xc>
		led::pushByte(0);
	}
	led::latch();
    14be:	6b de       	rcall	.-810    	; 0x1196 <_ZN3led5latchEv>
}
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <_ZN3led4initEh>:
static uint8_t LINELENGTH; // is set by the init function
static uint64_t _LEDLINE_; // contains the current state which is displayed on the led line and which was pushed to it somewhere in past.
							// functions that modify output have to update this value.


void led::init(const uint8_t lineLength){
    14c4:	cf 93       	push	r28
    14c6:	c8 2f       	mov	r28, r24
	DDRA = 0b00000111; // LATCH BIT ::: CLOCK BIT ::: DATA BIT
    14c8:	87 e0       	ldi	r24, 0x07	; 7
    14ca:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b11111000;
    14cc:	88 ef       	ldi	r24, 0xF8	; 248
    14ce:	8b bb       	out	0x1b, r24	; 27
	_LEDLINE_ = 0;
    14d0:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_ZL9_LEDLINE_>
    14d4:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_ZL9_LEDLINE_+0x1>
    14d8:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <_ZL9_LEDLINE_+0x2>
    14dc:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_ZL9_LEDLINE_+0x3>
    14e0:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <_ZL9_LEDLINE_+0x4>
    14e4:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL9_LEDLINE_+0x5>
    14e8:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <_ZL9_LEDLINE_+0x6>
    14ec:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <_ZL9_LEDLINE_+0x7>
	led::clear();
    14f0:	d9 df       	rcall	.-78     	; 0x14a4 <_ZN3led5clearEv>
	LINELENGTH = lineLength;
    14f2:	c0 93 90 02 	sts	0x0290, r28	; 0x800290 <_ZL10LINELENGTH>
}
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <_ZN3led13LFPrintStringEPKc>:
		led::pushByte(0);
	}
	led::latch();
}

void led::LFPrintString(const char* const string){//for user
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
	*/
	//////////////////////////////////////////////////////////////////////////
	
	//we dont have more than one line in our controller
	// for our controller we want to be flash memory friendly and not fast so we do:
	led::clear();
    1500:	d1 df       	rcall	.-94     	; 0x14a4 <_ZN3led5clearEv>
	led::printString(string);
    1502:	ce 01       	movw	r24, r28
    1504:	ba df       	rcall	.-140    	; 0x147a <_ZN3led11printStringEPKc>
}
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <_ZN3led13printDotsOnlyEh>:

void led::printDotsOnly(const uint8_t dotCode){//<<<<<< this function isnt ready for scalable linelength, please change sometime
    150c:	9f 92       	push	r9
    150e:	af 92       	push	r10
    1510:	bf 92       	push	r11
    1512:	cf 92       	push	r12
    1514:	df 92       	push	r13
    1516:	ef 92       	push	r14
    1518:	ff 92       	push	r15
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	90 90 88 02 	lds	r9, 0x0288	; 0x800288 <_ZL9_LEDLINE_>
    1526:	a0 90 89 02 	lds	r10, 0x0289	; 0x800289 <_ZL9_LEDLINE_+0x1>
    152a:	b0 90 8a 02 	lds	r11, 0x028A	; 0x80028a <_ZL9_LEDLINE_+0x2>
    152e:	c0 90 8b 02 	lds	r12, 0x028B	; 0x80028b <_ZL9_LEDLINE_+0x3>
    1532:	d0 90 8c 02 	lds	r13, 0x028C	; 0x80028c <_ZL9_LEDLINE_+0x4>
    1536:	e0 90 8d 02 	lds	r14, 0x028D	; 0x80028d <_ZL9_LEDLINE_+0x5>
    153a:	50 91 8e 02 	lds	r21, 0x028E	; 0x80028e <_ZL9_LEDLINE_+0x6>
    153e:	f0 90 8f 02 	lds	r15, 0x028F	; 0x80028f <_ZL9_LEDLINE_+0x7>
    1542:	a7 e0       	ldi	r26, 0x07	; 7
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e0 e0       	ldi	r30, 0x00	; 0
    1548:	f0 e0       	ldi	r31, 0x00	; 0
	for (uint8_t i = 0; i<8; ++i){
		_LEDLINE_ &= ~(1<<(DOTPOSITION + 8 * i)); // make it 0
		_LEDLINE_ |= ((1<<(DOTPOSITION + 8 * i)) * !! (dotCode & (1<<i) ));
    154a:	c8 2f       	mov	r28, r24
    154c:	d0 e0       	ldi	r29, 0x00	; 0
	led::printString(string);
}

void led::printDotsOnly(const uint8_t dotCode){//<<<<<< this function isnt ready for scalable linelength, please change sometime
	for (uint8_t i = 0; i<8; ++i){
		_LEDLINE_ &= ~(1<<(DOTPOSITION + 8 * i)); // make it 0
    154e:	01 e0       	ldi	r16, 0x01	; 1
    1550:	10 e0       	ldi	r17, 0x00	; 0
		_LEDLINE_ |= ((1<<(DOTPOSITION + 8 * i)) * !! (dotCode & (1<<i) ));
    1552:	9e 01       	movw	r18, r28
    1554:	0e 2e       	mov	r0, r30
    1556:	02 c0       	rjmp	.+4      	; 0x155c <_ZN3led13printDotsOnlyEh+0x50>
    1558:	35 95       	asr	r19
    155a:	27 95       	ror	r18
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <_ZN3led13printDotsOnlyEh+0x4c>
    1560:	21 70       	andi	r18, 0x01	; 1
    1562:	33 27       	eor	r19, r19
    1564:	0a 2e       	mov	r0, r26
    1566:	02 c0       	rjmp	.+4      	; 0x156c <_ZN3led13printDotsOnlyEh+0x60>
    1568:	22 0f       	add	r18, r18
    156a:	33 1f       	adc	r19, r19
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <_ZN3led13printDotsOnlyEh+0x5c>
    1570:	43 2f       	mov	r20, r19
    1572:	44 0f       	add	r20, r20
    1574:	44 0b       	sbc	r20, r20
	led::printString(string);
}

void led::printDotsOnly(const uint8_t dotCode){//<<<<<< this function isnt ready for scalable linelength, please change sometime
	for (uint8_t i = 0; i<8; ++i){
		_LEDLINE_ &= ~(1<<(DOTPOSITION + 8 * i)); // make it 0
    1576:	b8 01       	movw	r22, r16
    1578:	0a 2e       	mov	r0, r26
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <_ZN3led13printDotsOnlyEh+0x74>
    157c:	66 0f       	add	r22, r22
    157e:	77 1f       	adc	r23, r23
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <_ZN3led13printDotsOnlyEh+0x70>
    1584:	60 95       	com	r22
    1586:	70 95       	com	r23
    1588:	97 2f       	mov	r25, r23
    158a:	99 0f       	add	r25, r25
    158c:	99 0b       	sbc	r25, r25
    158e:	96 22       	and	r9, r22
    1590:	a7 22       	and	r10, r23
    1592:	b9 22       	and	r11, r25
    1594:	c9 22       	and	r12, r25
    1596:	d9 22       	and	r13, r25
    1598:	e9 22       	and	r14, r25
    159a:	59 23       	and	r21, r25
    159c:	9f 21       	and	r25, r15
		_LEDLINE_ |= ((1<<(DOTPOSITION + 8 * i)) * !! (dotCode & (1<<i) ));
    159e:	92 2a       	or	r9, r18
    15a0:	a3 2a       	or	r10, r19
    15a2:	b4 2a       	or	r11, r20
    15a4:	c4 2a       	or	r12, r20
    15a6:	d4 2a       	or	r13, r20
    15a8:	e4 2a       	or	r14, r20
    15aa:	54 2b       	or	r21, r20
    15ac:	f4 2e       	mov	r15, r20
    15ae:	f9 2a       	or	r15, r25
    15b0:	31 96       	adiw	r30, 0x01	; 1
    15b2:	18 96       	adiw	r26, 0x08	; 8
	led::clear();
	led::printString(string);
}

void led::printDotsOnly(const uint8_t dotCode){//<<<<<< this function isnt ready for scalable linelength, please change sometime
	for (uint8_t i = 0; i<8; ++i){
    15b4:	e8 30       	cpi	r30, 0x08	; 8
    15b6:	f1 05       	cpc	r31, r1
    15b8:	61 f6       	brne	.-104    	; 0x1552 <_ZN3led13printDotsOnlyEh+0x46>
    15ba:	90 92 88 02 	sts	0x0288, r9	; 0x800288 <_ZL9_LEDLINE_>
    15be:	a0 92 89 02 	sts	0x0289, r10	; 0x800289 <_ZL9_LEDLINE_+0x1>
    15c2:	b0 92 8a 02 	sts	0x028A, r11	; 0x80028a <_ZL9_LEDLINE_+0x2>
    15c6:	c0 92 8b 02 	sts	0x028B, r12	; 0x80028b <_ZL9_LEDLINE_+0x3>
    15ca:	d0 92 8c 02 	sts	0x028C, r13	; 0x80028c <_ZL9_LEDLINE_+0x4>
    15ce:	e0 92 8d 02 	sts	0x028D, r14	; 0x80028d <_ZL9_LEDLINE_+0x5>
    15d2:	50 93 8e 02 	sts	0x028E, r21	; 0x80028e <_ZL9_LEDLINE_+0x6>
    15d6:	f0 92 8f 02 	sts	0x028F, r15	; 0x80028f <_ZL9_LEDLINE_+0x7>
		_LEDLINE_ &= ~(1<<(DOTPOSITION + 8 * i)); // make it 0
		_LEDLINE_ |= ((1<<(DOTPOSITION + 8 * i)) * !! (dotCode & (1<<i) ));
	}
	pushMemory();
    15da:	ec de       	rcall	.-552    	; 0x13b4 <_ZN3led10pushMemoryEv>
}
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	ff 90       	pop	r15
    15e6:	ef 90       	pop	r14
    15e8:	df 90       	pop	r13
    15ea:	cf 90       	pop	r12
    15ec:	bf 90       	pop	r11
    15ee:	af 90       	pop	r10
    15f0:	9f 90       	pop	r9
    15f2:	08 95       	ret

000015f4 <_ZN3led5errorEj>:

void led::error(const uint16_t code){
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	8c 01       	movw	r16, r24
	
	//static_assert(LINELENGTH>=4,"The ledError() needs at least 4 led elements!");  <<<<<<<< config c++11
	
	
	uint8_t SREG_temporal = SREG; // save interrupts
    15fc:	cf b7       	in	r28, 0x3f	; 63
	cli();
    15fe:	f8 94       	cli
	led::clear();
    1600:	51 df       	rcall	.-350    	; 0x14a4 <_ZN3led5clearEv>
	led::printSign('E');
    1602:	85 e4       	ldi	r24, 0x45	; 69
    1604:	28 df       	rcall	.-432    	; 0x1456 <_ZN3led9printSignEc>
	hardware::delay(3000);
    1606:	88 eb       	ldi	r24, 0xB8	; 184
    1608:	9b e0       	ldi	r25, 0x0B	; 11
    160a:	7b dd       	rcall	.-1290   	; 0x1102 <_ZN8hardware5delayEj>
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	led::printInt(code);
    160c:	c8 01       	movw	r24, r16
    160e:	1a d0       	rcall	.+52     	; 0x1644 <_ZN3led8printIntEi>
	hardware::delay(60000);// add some fancy blinking <<<<<<<<
    1610:	80 e6       	ldi	r24, 0x60	; 96
    1612:	9a ee       	ldi	r25, 0xEA	; 234
    1614:	76 dd       	rcall	.-1300   	; 0x1102 <_ZN8hardware5delayEj>
	if (code > 99){
    1616:	04 36       	cpi	r16, 0x64	; 100
    1618:	11 05       	cpc	r17, r1
    161a:	18 f0       	brcs	.+6      	; 0x1622 <_ZN3led5errorEj+0x2e>
		while (1) {
			led::pushBitIntern(false);// this is only to avoid compiler optimization trashing this infinite loop
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	c3 dd       	rcall	.-1146   	; 0x11a6 <_ZN3led13pushBitInternEb>
	led::printSign('E');
	hardware::delay(3000);
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	led::printInt(code);
	hardware::delay(60000);// add some fancy blinking <<<<<<<<
	if (code > 99){
    1620:	fd cf       	rjmp	.-6      	; 0x161c <_ZN3led5errorEj+0x28>
		while (1) {
			led::pushBitIntern(false);// this is only to avoid compiler optimization trashing this infinite loop
		}
	}
	SREG = SREG_temporal; // activate interrupts
    1622:	cf bf       	out	0x3f, r28	; 63
}
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	08 95       	ret

0000162c <_ZN3led10printDigitEh>:
void led::printSign(char sign){//for user
	/* (visible) print a sign to the end of the led output */
	led::pushByteVisible(led::signCode(sign));
}

void led::printDigit(uint8_t digit){//for user
    162c:	cf 93       	push	r28
    162e:	c8 2f       	mov	r28, r24
	/* print a digit {0~9} (visible) to the end of the led output */
	/* DO NOT CALL WITH AN INTEGER GREATER THAN 9 (will cause a weak error) !!!!!*/
	if (digit/10){
    1630:	8a 30       	cpi	r24, 0x0A	; 10
    1632:	18 f0       	brcs	.+6      	; 0x163a <_ZN3led10printDigitEh+0xe>
		led::error(2);
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	dd df       	rcall	.-70     	; 0x15f4 <_ZN3led5errorEj>
	}
	led::printSign(48 + digit);
    163a:	80 e3       	ldi	r24, 0x30	; 48
    163c:	8c 0f       	add	r24, r28
    163e:	0b df       	rcall	.-490    	; 0x1456 <_ZN3led9printSignEc>
}
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <_ZN3led8printIntEi>:

void led::printInt(int16_t integer){//for user
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	ec 01       	movw	r28, r24
	/* print an integer to the end of the led output (of course with "-" if negative) */
	if (integer < 0){
    164c:	99 23       	and	r25, r25
    164e:	14 f4       	brge	.+4      	; 0x1654 <_ZN3led8printIntEi+0x10>
		led::printSign('-');
    1650:	8d e2       	ldi	r24, 0x2D	; 45
    1652:	01 df       	rcall	.-510    	; 0x1456 <_ZN3led9printSignEc>
	}
	uint8_t fractional = (abs(integer)) % 10;
    1654:	ce 01       	movw	r24, r28
    1656:	dd 23       	and	r29, r29
    1658:	24 f4       	brge	.+8      	; 0x1662 <_ZN3led8printIntEi+0x1e>
    165a:	88 27       	eor	r24, r24
    165c:	99 27       	eor	r25, r25
    165e:	8c 1b       	sub	r24, r28
    1660:	9d 0b       	sbc	r25, r29
    1662:	6a e0       	ldi	r22, 0x0A	; 10
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	e8 d1       	rcall	.+976    	; 0x1a38 <__divmodhi4>
    1668:	18 2f       	mov	r17, r24
	if (abs(integer/10)){
    166a:	ce 01       	movw	r24, r28
    166c:	09 96       	adiw	r24, 0x09	; 9
    166e:	43 97       	sbiw	r24, 0x13	; 19
    1670:	60 f0       	brcs	.+24     	; 0x168a <_ZN3led8printIntEi+0x46>
		led::printInt(abs(integer/10));
    1672:	ce 01       	movw	r24, r28
    1674:	6a e0       	ldi	r22, 0x0A	; 10
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	df d1       	rcall	.+958    	; 0x1a38 <__divmodhi4>
    167a:	cb 01       	movw	r24, r22
    167c:	99 23       	and	r25, r25
    167e:	24 f4       	brge	.+8      	; 0x1688 <_ZN3led8printIntEi+0x44>
    1680:	88 27       	eor	r24, r24
    1682:	99 27       	eor	r25, r25
    1684:	86 1b       	sub	r24, r22
    1686:	97 0b       	sbc	r25, r23
    1688:	dd df       	rcall	.-70     	; 0x1644 <_ZN3led8printIntEi>
	}
	led::printDigit(fractional);
    168a:	81 2f       	mov	r24, r17
    168c:	cf df       	rcall	.-98     	; 0x162c <_ZN3led10printDigitEh>
}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	08 95       	ret

00001696 <_ZN4test5led_t3runEv>:
	LFPrintString("error");
}

namespace test {
	
	void led_t::run(){
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	a3 97       	sbiw	r28, 0x23	; 35
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
		using namespace led;
		
		init(8);
    16b0:	88 e0       	ldi	r24, 0x08	; 8
    16b2:	08 df       	rcall	.-496    	; 0x14c4 <_ZN3led4initEh>
		delay(1000);
    16b4:	88 ee       	ldi	r24, 0xE8	; 232
    16b6:	93 e0       	ldi	r25, 0x03	; 3
    16b8:	24 dd       	rcall	.-1464   	; 0x1102 <_ZN8hardware5delayEj>
		
		// pushBit nad latch
		for (uint8_t i = 0; i < 70; ++i){
    16ba:	10 e0       	ldi	r17, 0x00	; 0
			pushBit(i%2);
			if (!(i%3)){
    16bc:	0b ea       	ldi	r16, 0xAB	; 171
		init(8);
		delay(1000);
		
		// pushBit nad latch
		for (uint8_t i = 0; i < 70; ++i){
			pushBit(i%2);
    16be:	81 2f       	mov	r24, r17
    16c0:	81 70       	andi	r24, 0x01	; 1
    16c2:	7d dd       	rcall	.-1286   	; 0x11be <_ZN3led7pushBitEb>
			if (!(i%3)){
    16c4:	10 9f       	mul	r17, r16
    16c6:	81 2d       	mov	r24, r1
    16c8:	11 24       	eor	r1, r1
    16ca:	86 95       	lsr	r24
    16cc:	98 2f       	mov	r25, r24
    16ce:	99 0f       	add	r25, r25
    16d0:	89 0f       	add	r24, r25
    16d2:	18 13       	cpse	r17, r24
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <_ZN4test5led_t3runEv+0x42>
				latch();
    16d6:	5f dd       	rcall	.-1346   	; 0x1196 <_ZN3led5latchEv>
			};
			delay(1000);
    16d8:	88 ee       	ldi	r24, 0xE8	; 232
    16da:	93 e0       	ldi	r25, 0x03	; 3
    16dc:	12 dd       	rcall	.-1500   	; 0x1102 <_ZN8hardware5delayEj>
		
		init(8);
		delay(1000);
		
		// pushBit nad latch
		for (uint8_t i = 0; i < 70; ++i){
    16de:	1f 5f       	subi	r17, 0xFF	; 255
    16e0:	16 34       	cpi	r17, 0x46	; 70
    16e2:	69 f7       	brne	.-38     	; 0x16be <_ZN4test5led_t3runEv+0x28>
				latch();
			};
			delay(1000);
		}
		
		clear();
    16e4:	df de       	rcall	.-578    	; 0x14a4 <_ZN3led5clearEv>
		PAUSE
    16e6:	80 ed       	ldi	r24, 0xD0	; 208
    16e8:	97 e0       	ldi	r25, 0x07	; 7
    16ea:	0b dd       	rcall	.-1514   	; 0x1102 <_ZN8hardware5delayEj>
    16ec:	00 e0       	ldi	r16, 0x00	; 0
    16ee:	10 e0       	ldi	r17, 0x00	; 0
		
		//pushByte and latch
		for (uint8_t i= 0; i<8; ++i)
		{
			pushByte(1<<i);
    16f0:	ff 24       	eor	r15, r15
    16f2:	f3 94       	inc	r15
    16f4:	8f 2d       	mov	r24, r15
    16f6:	00 2e       	mov	r0, r16
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <_ZN4test5led_t3runEv+0x66>
    16fa:	88 0f       	add	r24, r24
    16fc:	0a 94       	dec	r0
    16fe:	ea f7       	brpl	.-6      	; 0x16fa <_ZN4test5led_t3runEv+0x64>
    1700:	a5 dd       	rcall	.-1206   	; 0x124c <_ZN3led8pushByteEh>
			latch();
    1702:	49 dd       	rcall	.-1390   	; 0x1196 <_ZN3led5latchEv>
			delay(1000);
    1704:	88 ee       	ldi	r24, 0xE8	; 232
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	fc dc       	rcall	.-1544   	; 0x1102 <_ZN8hardware5delayEj>
    170a:	0f 5f       	subi	r16, 0xFF	; 255
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
		
		clear();
		PAUSE
		
		//pushByte and latch
		for (uint8_t i= 0; i<8; ++i)
    170e:	08 30       	cpi	r16, 0x08	; 8
    1710:	11 05       	cpc	r17, r1
    1712:	81 f7       	brne	.-32     	; 0x16f4 <_ZN4test5led_t3runEv+0x5e>
		{
			pushByte(1<<i);
			latch();
			delay(1000);
		}
		clear();
    1714:	c7 de       	rcall	.-626    	; 0x14a4 <_ZN3led5clearEv>
		PAUSE
    1716:	80 ed       	ldi	r24, 0xD0	; 208
    1718:	97 e0       	ldi	r25, 0x07	; 7
    171a:	f3 dc       	rcall	.-1562   	; 0x1102 <_ZN8hardware5delayEj>
		
		// pushByteVisible
		for (uint8_t i = 0; i<16; ++i){
    171c:	10 e0       	ldi	r17, 0x00	; 0
			pushByteVisible(i);
    171e:	81 2f       	mov	r24, r17
    1720:	5c de       	rcall	.-840    	; 0x13da <_ZN3led15pushByteVisibleEh>
			delay(1000);
    1722:	88 ee       	ldi	r24, 0xE8	; 232
    1724:	93 e0       	ldi	r25, 0x03	; 3
    1726:	ed dc       	rcall	.-1574   	; 0x1102 <_ZN8hardware5delayEj>
		}
		clear();
		PAUSE
		
		// pushByteVisible
		for (uint8_t i = 0; i<16; ++i){
    1728:	1f 5f       	subi	r17, 0xFF	; 255
    172a:	10 31       	cpi	r17, 0x10	; 16
    172c:	c1 f7       	brne	.-16     	; 0x171e <_ZN4test5led_t3runEv+0x88>
    172e:	10 e0       	ldi	r17, 0x00	; 0
			pushByteVisible(i);
			delay(1000);
		}
		for (uint8_t i = 0; i<16; ++i){
			pushByteVisible( (i<<4) + 0x0F);
    1730:	81 2f       	mov	r24, r17
    1732:	82 95       	swap	r24
    1734:	80 7f       	andi	r24, 0xF0	; 240
    1736:	81 5f       	subi	r24, 0xF1	; 241
    1738:	50 de       	rcall	.-864    	; 0x13da <_ZN3led15pushByteVisibleEh>
			delay(1000);
    173a:	88 ee       	ldi	r24, 0xE8	; 232
    173c:	93 e0       	ldi	r25, 0x03	; 3
    173e:	e1 dc       	rcall	.-1598   	; 0x1102 <_ZN8hardware5delayEj>
		// pushByteVisible
		for (uint8_t i = 0; i<16; ++i){
			pushByteVisible(i);
			delay(1000);
		}
		for (uint8_t i = 0; i<16; ++i){
    1740:	1f 5f       	subi	r17, 0xFF	; 255
    1742:	10 31       	cpi	r17, 0x10	; 16
    1744:	a9 f7       	brne	.-22     	; 0x1730 <_ZN4test5led_t3runEv+0x9a>
			pushByteVisible( (i<<4) + 0x0F);
			delay(1000);
		}
		clear();
    1746:	ae de       	rcall	.-676    	; 0x14a4 <_ZN3led5clearEv>
		PAUSE
    1748:	80 ed       	ldi	r24, 0xD0	; 208
    174a:	97 e0       	ldi	r25, 0x07	; 7
    174c:	da dc       	rcall	.-1612   	; 0x1102 <_ZN8hardware5delayEj>
		
		//printsign
		printSign('A');
    174e:	81 e4       	ldi	r24, 0x41	; 65
    1750:	82 de       	rcall	.-764    	; 0x1456 <_ZN3led9printSignEc>
		printSign('B');
    1752:	82 e4       	ldi	r24, 0x42	; 66
    1754:	80 de       	rcall	.-768    	; 0x1456 <_ZN3led9printSignEc>
		printSign('C');
    1756:	83 e4       	ldi	r24, 0x43	; 67
    1758:	7e de       	rcall	.-772    	; 0x1456 <_ZN3led9printSignEc>
		printSign('D');
    175a:	84 e4       	ldi	r24, 0x44	; 68
    175c:	7c de       	rcall	.-776    	; 0x1456 <_ZN3led9printSignEc>
		PAUSE;
    175e:	80 ed       	ldi	r24, 0xD0	; 208
    1760:	97 e0       	ldi	r25, 0x07	; 7
    1762:	cf dc       	rcall	.-1634   	; 0x1102 <_ZN8hardware5delayEj>
		PAUSE
    1764:	80 ed       	ldi	r24, 0xD0	; 208
    1766:	97 e0       	ldi	r25, 0x07	; 7
    1768:	cc dc       	rcall	.-1640   	; 0x1102 <_ZN8hardware5delayEj>
		clear();
    176a:	9c de       	rcall	.-712    	; 0x14a4 <_ZN3led5clearEv>
		SLEEP
    176c:	80 e7       	ldi	r24, 0x70	; 112
    176e:	97 e1       	ldi	r25, 0x17	; 23
    1770:	c8 dc       	rcall	.-1648   	; 0x1102 <_ZN8hardware5delayEj>
		
		printSign('(');
    1772:	88 e2       	ldi	r24, 0x28	; 40
    1774:	70 de       	rcall	.-800    	; 0x1456 <_ZN3led9printSignEc>
		printSign('e');
    1776:	85 e6       	ldi	r24, 0x65	; 101
    1778:	6e de       	rcall	.-804    	; 0x1456 <_ZN3led9printSignEc>
		printSign('x');
    177a:	88 e7       	ldi	r24, 0x78	; 120
    177c:	6c de       	rcall	.-808    	; 0x1456 <_ZN3led9printSignEc>
		printSign('p');
    177e:	80 e7       	ldi	r24, 0x70	; 112
    1780:	6a de       	rcall	.-812    	; 0x1456 <_ZN3led9printSignEc>
		printSign(')');
    1782:	89 e2       	ldi	r24, 0x29	; 41
    1784:	68 de       	rcall	.-816    	; 0x1456 <_ZN3led9printSignEc>
		printSign('-');
    1786:	8d e2       	ldi	r24, 0x2D	; 45
    1788:	66 de       	rcall	.-820    	; 0x1456 <_ZN3led9printSignEc>
		printSign('3');
    178a:	83 e3       	ldi	r24, 0x33	; 51
    178c:	64 de       	rcall	.-824    	; 0x1456 <_ZN3led9printSignEc>
		PAUSE PAUSE PAUSE PAUSE
    178e:	80 ed       	ldi	r24, 0xD0	; 208
    1790:	97 e0       	ldi	r25, 0x07	; 7
    1792:	b7 dc       	rcall	.-1682   	; 0x1102 <_ZN8hardware5delayEj>
    1794:	80 ed       	ldi	r24, 0xD0	; 208
    1796:	97 e0       	ldi	r25, 0x07	; 7
    1798:	b4 dc       	rcall	.-1688   	; 0x1102 <_ZN8hardware5delayEj>
    179a:	80 ed       	ldi	r24, 0xD0	; 208
    179c:	97 e0       	ldi	r25, 0x07	; 7
    179e:	b1 dc       	rcall	.-1694   	; 0x1102 <_ZN8hardware5delayEj>
    17a0:	80 ed       	ldi	r24, 0xD0	; 208
    17a2:	97 e0       	ldi	r25, 0x07	; 7
    17a4:	ae dc       	rcall	.-1700   	; 0x1102 <_ZN8hardware5delayEj>
		
		clear();
    17a6:	7e de       	rcall	.-772    	; 0x14a4 <_ZN3led5clearEv>
		PAUSE
    17a8:	80 ed       	ldi	r24, 0xD0	; 208
    17aa:	97 e0       	ldi	r25, 0x07	; 7
    17ac:	aa dc       	rcall	.-1708   	; 0x1102 <_ZN8hardware5delayEj>
		
		// printstring
		char mystring[] = "true";
    17ae:	85 e0       	ldi	r24, 0x05	; 5
    17b0:	eb e4       	ldi	r30, 0x4B	; 75
    17b2:	f1 e0       	ldi	r31, 0x01	; 1
    17b4:	de 01       	movw	r26, r28
    17b6:	5e 96       	adiw	r26, 0x1e	; 30
    17b8:	01 90       	ld	r0, Z+
    17ba:	0d 92       	st	X+, r0
    17bc:	8a 95       	dec	r24
    17be:	e1 f7       	brne	.-8      	; 0x17b8 <_ZN4test5led_t3runEv+0x122>
		char s2 [] = "str-prnt";
    17c0:	89 e0       	ldi	r24, 0x09	; 9
    17c2:	e0 e5       	ldi	r30, 0x50	; 80
    17c4:	f1 e0       	ldi	r31, 0x01	; 1
    17c6:	de 01       	movw	r26, r28
    17c8:	1a 96       	adiw	r26, 0x0a	; 10
    17ca:	01 90       	ld	r0, Z+
    17cc:	0d 92       	st	X+, r0
    17ce:	8a 95       	dec	r24
    17d0:	e1 f7       	brne	.-8      	; 0x17ca <_ZN4test5led_t3runEv+0x134>
		printString(mystring);
    17d2:	ce 01       	movw	r24, r28
    17d4:	4e 96       	adiw	r24, 0x1e	; 30
    17d6:	51 de       	rcall	.-862    	; 0x147a <_ZN3led11printStringEPKc>
		PAUSE; PAUSE PAUSE
    17d8:	80 ed       	ldi	r24, 0xD0	; 208
    17da:	97 e0       	ldi	r25, 0x07	; 7
    17dc:	92 dc       	rcall	.-1756   	; 0x1102 <_ZN8hardware5delayEj>
    17de:	80 ed       	ldi	r24, 0xD0	; 208
    17e0:	97 e0       	ldi	r25, 0x07	; 7
    17e2:	8f dc       	rcall	.-1762   	; 0x1102 <_ZN8hardware5delayEj>
    17e4:	80 ed       	ldi	r24, 0xD0	; 208
    17e6:	97 e0       	ldi	r25, 0x07	; 7
    17e8:	8c dc       	rcall	.-1768   	; 0x1102 <_ZN8hardware5delayEj>
		printString(s2);
    17ea:	ce 01       	movw	r24, r28
    17ec:	0a 96       	adiw	r24, 0x0a	; 10
    17ee:	45 de       	rcall	.-886    	; 0x147a <_ZN3led11printStringEPKc>
		PAUSE PAUSE PAUSE PAUSE
    17f0:	80 ed       	ldi	r24, 0xD0	; 208
    17f2:	97 e0       	ldi	r25, 0x07	; 7
    17f4:	86 dc       	rcall	.-1780   	; 0x1102 <_ZN8hardware5delayEj>
    17f6:	80 ed       	ldi	r24, 0xD0	; 208
    17f8:	97 e0       	ldi	r25, 0x07	; 7
    17fa:	83 dc       	rcall	.-1786   	; 0x1102 <_ZN8hardware5delayEj>
    17fc:	80 ed       	ldi	r24, 0xD0	; 208
    17fe:	97 e0       	ldi	r25, 0x07	; 7
    1800:	80 dc       	rcall	.-1792   	; 0x1102 <_ZN8hardware5delayEj>
    1802:	80 ed       	ldi	r24, 0xD0	; 208
    1804:	97 e0       	ldi	r25, 0x07	; 7
    1806:	7d dc       	rcall	.-1798   	; 0x1102 <_ZN8hardware5delayEj>
				
		clear();
    1808:	4d de       	rcall	.-870    	; 0x14a4 <_ZN3led5clearEv>
		
		// lfprintstring
		char s3 [] = "LF PRN S";
    180a:	89 e0       	ldi	r24, 0x09	; 9
    180c:	e9 e5       	ldi	r30, 0x59	; 89
    180e:	f1 e0       	ldi	r31, 0x01	; 1
    1810:	de 01       	movw	r26, r28
    1812:	11 96       	adiw	r26, 0x01	; 1
    1814:	01 90       	ld	r0, Z+
    1816:	0d 92       	st	X+, r0
    1818:	8a 95       	dec	r24
    181a:	e1 f7       	brne	.-8      	; 0x1814 <_ZN4test5led_t3runEv+0x17e>
		char s4 [] = "lf 4";
    181c:	85 e0       	ldi	r24, 0x05	; 5
    181e:	e2 e6       	ldi	r30, 0x62	; 98
    1820:	f1 e0       	ldi	r31, 0x01	; 1
    1822:	de 01       	movw	r26, r28
    1824:	59 96       	adiw	r26, 0x19	; 25
    1826:	01 90       	ld	r0, Z+
    1828:	0d 92       	st	X+, r0
    182a:	8a 95       	dec	r24
    182c:	e1 f7       	brne	.-8      	; 0x1826 <_ZN4test5led_t3runEv+0x190>
		char s5 [] = "12345";
    182e:	86 e0       	ldi	r24, 0x06	; 6
    1830:	e7 e6       	ldi	r30, 0x67	; 103
    1832:	f1 e0       	ldi	r31, 0x01	; 1
    1834:	de 01       	movw	r26, r28
    1836:	53 96       	adiw	r26, 0x13	; 19
    1838:	01 90       	ld	r0, Z+
    183a:	0d 92       	st	X+, r0
    183c:	8a 95       	dec	r24
    183e:	e1 f7       	brne	.-8      	; 0x1838 <_ZN4test5led_t3runEv+0x1a2>
		LFPrintString(s3);
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	5a de       	rcall	.-844    	; 0x14fa <_ZN3led13LFPrintStringEPKc>
		PAUSE PAUSE PAUSE
    1846:	80 ed       	ldi	r24, 0xD0	; 208
    1848:	97 e0       	ldi	r25, 0x07	; 7
    184a:	5b dc       	rcall	.-1866   	; 0x1102 <_ZN8hardware5delayEj>
    184c:	80 ed       	ldi	r24, 0xD0	; 208
    184e:	97 e0       	ldi	r25, 0x07	; 7
    1850:	58 dc       	rcall	.-1872   	; 0x1102 <_ZN8hardware5delayEj>
    1852:	80 ed       	ldi	r24, 0xD0	; 208
    1854:	97 e0       	ldi	r25, 0x07	; 7
    1856:	55 dc       	rcall	.-1878   	; 0x1102 <_ZN8hardware5delayEj>
		LFPrintString(s4);
    1858:	ce 01       	movw	r24, r28
    185a:	49 96       	adiw	r24, 0x19	; 25
    185c:	4e de       	rcall	.-868    	; 0x14fa <_ZN3led13LFPrintStringEPKc>
		PAUSE PAUSE PAUSE
    185e:	80 ed       	ldi	r24, 0xD0	; 208
    1860:	97 e0       	ldi	r25, 0x07	; 7
    1862:	4f dc       	rcall	.-1890   	; 0x1102 <_ZN8hardware5delayEj>
    1864:	80 ed       	ldi	r24, 0xD0	; 208
    1866:	97 e0       	ldi	r25, 0x07	; 7
    1868:	4c dc       	rcall	.-1896   	; 0x1102 <_ZN8hardware5delayEj>
    186a:	80 ed       	ldi	r24, 0xD0	; 208
    186c:	97 e0       	ldi	r25, 0x07	; 7
    186e:	49 dc       	rcall	.-1902   	; 0x1102 <_ZN8hardware5delayEj>
		LFPrintString(s5);
    1870:	ce 01       	movw	r24, r28
    1872:	43 96       	adiw	r24, 0x13	; 19
    1874:	42 de       	rcall	.-892    	; 0x14fa <_ZN3led13LFPrintStringEPKc>
		SLEEP
    1876:	80 e7       	ldi	r24, 0x70	; 112
    1878:	97 e1       	ldi	r25, 0x17	; 23
    187a:	43 dc       	rcall	.-1914   	; 0x1102 <_ZN8hardware5delayEj>
		LFPrintString("test-1");
    187c:	85 e2       	ldi	r24, 0x25	; 37
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	3c de       	rcall	.-904    	; 0x14fa <_ZN3led13LFPrintStringEPKc>
		SLEEP
    1882:	80 e7       	ldi	r24, 0x70	; 112
    1884:	97 e1       	ldi	r25, 0x17	; 23
    1886:	3d dc       	rcall	.-1926   	; 0x1102 <_ZN8hardware5delayEj>
		LFPrintString("last-lf");
    1888:	8c e2       	ldi	r24, 0x2C	; 44
    188a:	91 e0       	ldi	r25, 0x01	; 1
    188c:	36 de       	rcall	.-916    	; 0x14fa <_ZN3led13LFPrintStringEPKc>
		SLEEP
    188e:	80 e7       	ldi	r24, 0x70	; 112
    1890:	97 e1       	ldi	r25, 0x17	; 23
    1892:	37 dc       	rcall	.-1938   	; 0x1102 <_ZN8hardware5delayEj>
		
		
		// isDotted
		LFPrintString("isdotted");
    1894:	84 e3       	ldi	r24, 0x34	; 52
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	30 de       	rcall	.-928    	; 0x14fa <_ZN3led13LFPrintStringEPKc>
		PAUSE
    189a:	80 ed       	ldi	r24, 0xD0	; 208
    189c:	97 e0       	ldi	r25, 0x07	; 7
    189e:	31 dc       	rcall	.-1950   	; 0x1102 <_ZN8hardware5delayEj>
		printSign('0');
    18a0:	80 e3       	ldi	r24, 0x30	; 48
    18a2:	d9 dd       	rcall	.-1102   	; 0x1456 <_ZN3led9printSignEc>
		if (isDotted('a'+DOT)) { } else { throwerror();}
    18a4:	81 ee       	ldi	r24, 0xE1	; 225
    18a6:	9c dd       	rcall	.-1224   	; 0x13e0 <_ZN3led8isDottedEc>
    18a8:	81 11       	cpse	r24, r1
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <_ZN4test5led_t3runEv+0x21c>
#define WAIT delay(1000);
#define SLEEP delay(6000);

inline void throwerror(){
	using namespace led;
	LFPrintString("error");
    18ac:	8d e3       	ldi	r24, 0x3D	; 61
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	24 de       	rcall	.-952    	; 0x14fa <_ZN3led13LFPrintStringEPKc>
		// isDotted
		LFPrintString("isdotted");
		PAUSE
		printSign('0');
		if (isDotted('a'+DOT)) { } else { throwerror();}
		SLEEP;
    18b2:	80 e7       	ldi	r24, 0x70	; 112
    18b4:	97 e1       	ldi	r25, 0x17	; 23
    18b6:	25 dc       	rcall	.-1974   	; 0x1102 <_ZN8hardware5delayEj>
		printSign('1');
    18b8:	81 e3       	ldi	r24, 0x31	; 49
    18ba:	cd dd       	rcall	.-1126   	; 0x1456 <_ZN3led9printSignEc>
		if (isDotted('5')) { throwerror(); }
    18bc:	85 e3       	ldi	r24, 0x35	; 53
    18be:	90 dd       	rcall	.-1248   	; 0x13e0 <_ZN3led8isDottedEc>
    18c0:	88 23       	and	r24, r24
    18c2:	19 f0       	breq	.+6      	; 0x18ca <_ZN4test5led_t3runEv+0x234>
#define WAIT delay(1000);
#define SLEEP delay(6000);

inline void throwerror(){
	using namespace led;
	LFPrintString("error");
    18c4:	8d e3       	ldi	r24, 0x3D	; 61
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	18 de       	rcall	.-976    	; 0x14fa <_ZN3led13LFPrintStringEPKc>
		printSign('0');
		if (isDotted('a'+DOT)) { } else { throwerror();}
		SLEEP;
		printSign('1');
		if (isDotted('5')) { throwerror(); }
		SLEEP
    18ca:	80 e7       	ldi	r24, 0x70	; 112
    18cc:	97 e1       	ldi	r25, 0x17	; 23
    18ce:	19 dc       	rcall	.-1998   	; 0x1102 <_ZN8hardware5delayEj>
		SLEEP
    18d0:	80 e7       	ldi	r24, 0x70	; 112
    18d2:	97 e1       	ldi	r25, 0x17	; 23
    18d4:	16 dc       	rcall	.-2004   	; 0x1102 <_ZN8hardware5delayEj>
		
		clear();
    18d6:	e6 dd       	rcall	.-1076   	; 0x14a4 <_ZN3led5clearEv>
		SLEEP
    18d8:	80 e7       	ldi	r24, 0x70	; 112
    18da:	97 e1       	ldi	r25, 0x17	; 23
    18dc:	12 dc       	rcall	.-2012   	; 0x1102 <_ZN8hardware5delayEj>
		
		// setdot and printsigndottable
		char a = 'a';
    18de:	81 e6       	ldi	r24, 0x61	; 97
    18e0:	8b a3       	std	Y+35, r24	; 0x23
		setDot(&a,true);
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	ce 01       	movw	r24, r28
    18e6:	83 96       	adiw	r24, 0x23	; 35
    18e8:	7f dd       	rcall	.-1282   	; 0x13e8 <_ZN3led6setDotEPcb>
		printSign(a);
    18ea:	8b a1       	ldd	r24, Y+35	; 0x23
    18ec:	b4 dd       	rcall	.-1176   	; 0x1456 <_ZN3led9printSignEc>
		setDot(&a,false);
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	ce 01       	movw	r24, r28
    18f2:	83 96       	adiw	r24, 0x23	; 35
    18f4:	79 dd       	rcall	.-1294   	; 0x13e8 <_ZN3led6setDotEPcb>
		printSign(a);
    18f6:	8b a1       	ldd	r24, Y+35	; 0x23
    18f8:	ae dd       	rcall	.-1188   	; 0x1456 <_ZN3led9printSignEc>
		printSignDottable(a,true);
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	8b a1       	ldd	r24, Y+35	; 0x23
    18fe:	ae dd       	rcall	.-1188   	; 0x145c <_ZN3led17printSignDottableEcb>
		
		printSignDottable(a,false);
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	8b a1       	ldd	r24, Y+35	; 0x23
    1904:	ab dd       	rcall	.-1194   	; 0x145c <_ZN3led17printSignDottableEcb>
		
		// print digigt and integer
		printDigit(0);
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	91 de       	rcall	.-734    	; 0x162c <_ZN3led10printDigitEh>
		printDigit(3);
    190a:	83 e0       	ldi	r24, 0x03	; 3
    190c:	8f de       	rcall	.-738    	; 0x162c <_ZN3led10printDigitEh>
		printDigit((7));
    190e:	87 e0       	ldi	r24, 0x07	; 7
    1910:	8d de       	rcall	.-742    	; 0x162c <_ZN3led10printDigitEh>
		SLEEP
    1912:	80 e7       	ldi	r24, 0x70	; 112
    1914:	97 e1       	ldi	r25, 0x17	; 23
    1916:	f5 db       	rcall	.-2070   	; 0x1102 <_ZN8hardware5delayEj>
		
		clear();
    1918:	c5 dd       	rcall	.-1142   	; 0x14a4 <_ZN3led5clearEv>
		printInt(2106);
    191a:	8a e3       	ldi	r24, 0x3A	; 58
    191c:	98 e0       	ldi	r25, 0x08	; 8
    191e:	92 de       	rcall	.-732    	; 0x1644 <_ZN3led8printIntEi>
		SLEEP
    1920:	80 e7       	ldi	r24, 0x70	; 112
    1922:	97 e1       	ldi	r25, 0x17	; 23
    1924:	ee db       	rcall	.-2084   	; 0x1102 <_ZN8hardware5delayEj>
		SLEEP
    1926:	80 e7       	ldi	r24, 0x70	; 112
    1928:	97 e1       	ldi	r25, 0x17	; 23
    192a:	eb db       	rcall	.-2090   	; 0x1102 <_ZN8hardware5delayEj>
		LFPrintString("THE END");
    192c:	83 e4       	ldi	r24, 0x43	; 67
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	e4 dd       	rcall	.-1080   	; 0x14fa <_ZN3led13LFPrintStringEPKc>
	}
    1932:	a3 96       	adiw	r28, 0x23	; 35
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	08 95       	ret

0000194a <_Z15after_selectingv>:
#include "f_arch.h"
#include "f_gui.h"
#include "f_test.h"


void foo(){
    194a:	ac cd       	rjmp	.-1192   	; 0x14a4 <_ZN3led5clearEv>
    194c:	08 95       	ret

0000194e <_Z13guiBootScreenv>:
//const uint16_t PROGRAMCOUNT = arch::programCount(); // there is a better c++ alternative // <<<<<<<
}



void guiBootScreen(){
    194e:	cf 93       	push	r28
		led::LFPrintString("-FUSSEL-");
    1950:	8d e6       	ldi	r24, 0x6D	; 109
    1952:	91 e0       	ldi	r25, 0x01	; 1
    1954:	d2 dd       	rcall	.-1116   	; 0x14fa <_ZN3led13LFPrintStringEPKc>
    1956:	c5 e0       	ldi	r28, 0x05	; 5
		for(uint8_t i = 0 ; i < 5; ++i){
			led::printDotsOnly(0xFF);
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	d8 dd       	rcall	.-1104   	; 0x150c <_ZN3led13printDotsOnlyEh>
			hardware::delay(500);
    195c:	84 ef       	ldi	r24, 0xF4	; 244
    195e:	91 e0       	ldi	r25, 0x01	; 1
    1960:	d0 db       	rcall	.-2144   	; 0x1102 <_ZN8hardware5delayEj>
			led::printDotsOnly(0x00);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	d3 dd       	rcall	.-1114   	; 0x150c <_ZN3led13printDotsOnlyEh>
			hardware::delay(500);
    1966:	84 ef       	ldi	r24, 0xF4	; 244
    1968:	91 e0       	ldi	r25, 0x01	; 1
    196a:	cb db       	rcall	.-2154   	; 0x1102 <_ZN8hardware5delayEj>
    196c:	c1 50       	subi	r28, 0x01	; 1



void guiBootScreen(){
		led::LFPrintString("-FUSSEL-");
		for(uint8_t i = 0 ; i < 5; ++i){
    196e:	a1 f7       	brne	.-24     	; 0x1958 <_Z13guiBootScreenv+0xa>
			led::printDotsOnly(0xFF);
			hardware::delay(500);
			led::printDotsOnly(0x00);
			hardware::delay(500);
		}
		led::clear();
    1970:	99 dd       	rcall	.-1230   	; 0x14a4 <_ZN3led5clearEv>
}
    1972:	cf 91       	pop	r28
    1974:	08 95       	ret

00001976 <main>:
void after_selecting(){
	// do nothing
	led::clear();
}

int main(void){
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	29 97       	sbiw	r28, 0x09	; 9
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
	//###
	// please check the board frequency of quartz and redefine fcpu in hardware.cpp
	// define dot position in ledline.cpp -> please find out it's hardware configuration
	
	/* test code */
	test::led_t::run();
    198a:	85 de       	rcall	.-758    	; 0x1696 <_ZN4test5led_t3runEv>
	
	
	led::init(8);
    198c:	88 e0       	ldi	r24, 0x08	; 8
    198e:	9a dd       	rcall	.-1228   	; 0x14c4 <_ZN3led4initEh>
	guiBootScreen();
    1990:	de df       	rcall	.-68     	; 0x194e <_Z13guiBootScreenv>
	
	led::LFPrintString("ARCH...");
    1992:	86 e7       	ldi	r24, 0x76	; 118
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	b1 dd       	rcall	.-1182   	; 0x14fa <_ZN3led13LFPrintStringEPKc>
	hardware::delay(2000);
    1998:	80 ed       	ldi	r24, 0xD0	; 208
    199a:	97 e0       	ldi	r25, 0x07	; 7
    199c:	b2 db       	rcall	.-2204   	; 0x1102 <_ZN8hardware5delayEj>
		/* push 15 bit to the light line (MSB first) and make it visible */
	
	inline void init(){//for init
		
		// IO register B for the lights:
		DDRB |= 0b00000111;// LATCH BIT ::: CLOCK BIT ::: DATA BIT
    199e:	87 b3       	in	r24, 0x17	; 23
    19a0:	87 60       	ori	r24, 0x07	; 7
    19a2:	87 bb       	out	0x17, r24	; 23
		PORTB &= 0b11111000;
    19a4:	88 b3       	in	r24, 0x18	; 24
    19a6:	88 7f       	andi	r24, 0xF8	; 248
    19a8:	88 bb       	out	0x18, r24	; 24
		
		pushLineVisible(0xFFFF);
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	9f ef       	ldi	r25, 0xFF	; 255
    19ae:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN4arch15pushLineVisibleEj>
		hardware::delay(1000);
    19b2:	88 ee       	ldi	r24, 0xE8	; 232
    19b4:	93 e0       	ldi	r25, 0x03	; 3
    19b6:	a5 db       	rcall	.-2230   	; 0x1102 <_ZN8hardware5delayEj>
		pushLineVisible(0x0000);
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 7a 00 	call	0xf4	; 0xf4 <_ZN4arch15pushLineVisibleEj>
		
		// maybe this could be left out, but for alarm function this could be useful
		runProgram(0);
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN4arch10runProgramEh>
	arch::init();
	led::clear();
    19c6:	6e dd       	rcall	.-1316   	; 0x14a4 <_ZN3led5clearEv>
		typedef struct item_s {
			char label[8];
			void (*procedure)();
		} item_t;
		
		ItemManager() : cancelProcedure(nullptr), position(0) {}
    19c8:	1c 82       	std	Y+4, r1	; 0x04
    19ca:	1b 82       	std	Y+3, r1	; 0x03
    19cc:	1e 82       	std	Y+6, r1	; 0x06
    19ce:	1d 82       	std	Y+5, r1	; 0x05
		
		virtual void runItemProcedureInternal() override; /* start running slected program in arch // this must be changed for later uses // and run the finalize function if non-null */
		
	public:
		
		ArcProgramItemManager() : finalProcedure(nullptr), includingOffProgram(true){}
    19d0:	85 e1       	ldi	r24, 0x15	; 21
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	89 87       	std	Y+9, r24	; 0x09
		
		inline virtual void init(void (*cancelProcedure)(), void (*finalProcedure)(), bool includingOffProgram) {
			ItemManager::init(cancelProcedure);
			this->finalProcedure = finalProcedure;
    19dc:	85 ea       	ldi	r24, 0xA5	; 165
    19de:	9c e0       	ldi	r25, 0x0C	; 12
    19e0:	98 87       	std	Y+8, r25	; 0x08
    19e2:	8f 83       	std	Y+7, r24	; 0x07
	
	ArcProgramItemManager programItemManager;
	programItemManager.init(nullptr,after_selecting,true);
	ItemSelector::initialisation(2,0,1,&programItemManager);
    19e4:	9e 01       	movw	r18, r28
    19e6:	2f 5f       	subi	r18, 0xFF	; 255
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	41 e0       	ldi	r20, 0x01	; 1
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	35 da       	rcall	.-2966   	; 0xe5c <_ZN12ItemSelector14initialisationEhhhP11ItemManager>
	ItemSelector::run();
    19f2:	27 db       	rcall	.-2482   	; 0x1042 <_ZN12ItemSelector3runEv>
	while (1){
		arch::controller();
    19f4:	18 d9       	rcall	.-3536   	; 0xc26 <_ZN4arch10controllerEv>
    19f6:	fe cf       	rjmp	.-4      	; 0x19f4 <main+0x7e>

000019f8 <__udivmodqi4>:
    19f8:	99 1b       	sub	r25, r25
    19fa:	79 e0       	ldi	r23, 0x09	; 9
    19fc:	04 c0       	rjmp	.+8      	; 0x1a06 <__udivmodqi4_ep>

000019fe <__udivmodqi4_loop>:
    19fe:	99 1f       	adc	r25, r25
    1a00:	96 17       	cp	r25, r22
    1a02:	08 f0       	brcs	.+2      	; 0x1a06 <__udivmodqi4_ep>
    1a04:	96 1b       	sub	r25, r22

00001a06 <__udivmodqi4_ep>:
    1a06:	88 1f       	adc	r24, r24
    1a08:	7a 95       	dec	r23
    1a0a:	c9 f7       	brne	.-14     	; 0x19fe <__udivmodqi4_loop>
    1a0c:	80 95       	com	r24
    1a0e:	08 95       	ret

00001a10 <__udivmodhi4>:
    1a10:	aa 1b       	sub	r26, r26
    1a12:	bb 1b       	sub	r27, r27
    1a14:	51 e1       	ldi	r21, 0x11	; 17
    1a16:	07 c0       	rjmp	.+14     	; 0x1a26 <__udivmodhi4_ep>

00001a18 <__udivmodhi4_loop>:
    1a18:	aa 1f       	adc	r26, r26
    1a1a:	bb 1f       	adc	r27, r27
    1a1c:	a6 17       	cp	r26, r22
    1a1e:	b7 07       	cpc	r27, r23
    1a20:	10 f0       	brcs	.+4      	; 0x1a26 <__udivmodhi4_ep>
    1a22:	a6 1b       	sub	r26, r22
    1a24:	b7 0b       	sbc	r27, r23

00001a26 <__udivmodhi4_ep>:
    1a26:	88 1f       	adc	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	5a 95       	dec	r21
    1a2c:	a9 f7       	brne	.-22     	; 0x1a18 <__udivmodhi4_loop>
    1a2e:	80 95       	com	r24
    1a30:	90 95       	com	r25
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	08 95       	ret

00001a38 <__divmodhi4>:
    1a38:	97 fb       	bst	r25, 7
    1a3a:	07 2e       	mov	r0, r23
    1a3c:	16 f4       	brtc	.+4      	; 0x1a42 <__divmodhi4+0xa>
    1a3e:	00 94       	com	r0
    1a40:	06 d0       	rcall	.+12     	; 0x1a4e <__divmodhi4_neg1>
    1a42:	77 fd       	sbrc	r23, 7
    1a44:	08 d0       	rcall	.+16     	; 0x1a56 <__divmodhi4_neg2>
    1a46:	e4 df       	rcall	.-56     	; 0x1a10 <__udivmodhi4>
    1a48:	07 fc       	sbrc	r0, 7
    1a4a:	05 d0       	rcall	.+10     	; 0x1a56 <__divmodhi4_neg2>
    1a4c:	3e f4       	brtc	.+14     	; 0x1a5c <__divmodhi4_exit>

00001a4e <__divmodhi4_neg1>:
    1a4e:	90 95       	com	r25
    1a50:	81 95       	neg	r24
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	08 95       	ret

00001a56 <__divmodhi4_neg2>:
    1a56:	70 95       	com	r23
    1a58:	61 95       	neg	r22
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255

00001a5c <__divmodhi4_exit>:
    1a5c:	08 95       	ret

00001a5e <__ashldi3>:
    1a5e:	0f 93       	push	r16
    1a60:	08 30       	cpi	r16, 0x08	; 8
    1a62:	90 f0       	brcs	.+36     	; 0x1a88 <__ashldi3+0x2a>
    1a64:	98 2f       	mov	r25, r24
    1a66:	87 2f       	mov	r24, r23
    1a68:	76 2f       	mov	r23, r22
    1a6a:	65 2f       	mov	r22, r21
    1a6c:	54 2f       	mov	r21, r20
    1a6e:	43 2f       	mov	r20, r19
    1a70:	32 2f       	mov	r19, r18
    1a72:	22 27       	eor	r18, r18
    1a74:	08 50       	subi	r16, 0x08	; 8
    1a76:	f4 cf       	rjmp	.-24     	; 0x1a60 <__ashldi3+0x2>
    1a78:	22 0f       	add	r18, r18
    1a7a:	33 1f       	adc	r19, r19
    1a7c:	44 1f       	adc	r20, r20
    1a7e:	55 1f       	adc	r21, r21
    1a80:	66 1f       	adc	r22, r22
    1a82:	77 1f       	adc	r23, r23
    1a84:	88 1f       	adc	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 95       	dec	r16
    1a8a:	b2 f7       	brpl	.-20     	; 0x1a78 <__ashldi3+0x1a>
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <__adddi3>:
    1a90:	2a 0d       	add	r18, r10
    1a92:	3b 1d       	adc	r19, r11
    1a94:	4c 1d       	adc	r20, r12
    1a96:	5d 1d       	adc	r21, r13
    1a98:	6e 1d       	adc	r22, r14
    1a9a:	7f 1d       	adc	r23, r15
    1a9c:	80 1f       	adc	r24, r16
    1a9e:	91 1f       	adc	r25, r17
    1aa0:	08 95       	ret

00001aa2 <__cmpdi2_s8>:
    1aa2:	00 24       	eor	r0, r0
    1aa4:	a7 fd       	sbrc	r26, 7
    1aa6:	00 94       	com	r0
    1aa8:	2a 17       	cp	r18, r26
    1aaa:	30 05       	cpc	r19, r0
    1aac:	40 05       	cpc	r20, r0
    1aae:	50 05       	cpc	r21, r0
    1ab0:	60 05       	cpc	r22, r0
    1ab2:	70 05       	cpc	r23, r0
    1ab4:	80 05       	cpc	r24, r0
    1ab6:	90 05       	cpc	r25, r0
    1ab8:	08 95       	ret

00001aba <eeprom_read_byte>:
    1aba:	e1 99       	sbic	0x1c, 1	; 28
    1abc:	fe cf       	rjmp	.-4      	; 0x1aba <eeprom_read_byte>
    1abe:	9f bb       	out	0x1f, r25	; 31
    1ac0:	8e bb       	out	0x1e, r24	; 30
    1ac2:	e0 9a       	sbi	0x1c, 0	; 28
    1ac4:	99 27       	eor	r25, r25
    1ac6:	8d b3       	in	r24, 0x1d	; 29
    1ac8:	08 95       	ret

00001aca <_exit>:
    1aca:	f8 94       	cli

00001acc <__stop_program>:
    1acc:	ff cf       	rjmp	.-2      	; 0x1acc <__stop_program>
