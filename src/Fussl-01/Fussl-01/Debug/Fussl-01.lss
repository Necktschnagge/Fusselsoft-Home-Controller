
Fussl-01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00001e18  00001eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000113  0080017e  0080017e  00001f2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044b7  00000000  00000000  00002258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012d7  00000000  00000000  0000670f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019a9  00000000  00000000  000079e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008fc  00000000  00000000  00009390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001256  00000000  00000000  00009c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027d6  00000000  00000000  0000aee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	68 c0       	rjmp	.+208    	; 0xd2 <__ctors_end>
       2:	00 00       	nop
       4:	85 c0       	rjmp	.+266    	; 0x110 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c0       	rjmp	.+262    	; 0x110 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c0       	rjmp	.+258    	; 0x110 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c0       	rjmp	.+254    	; 0x110 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c0       	rjmp	.+250    	; 0x110 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c0       	rjmp	.+246    	; 0x110 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c0       	rjmp	.+242    	; 0x110 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c0       	rjmp	.+238    	; 0x110 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c0       	rjmp	.+234    	; 0x110 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c0       	rjmp	.+230    	; 0x110 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c0       	rjmp	.+226    	; 0x110 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6f c0       	rjmp	.+222    	; 0x110 <__bad_interrupt>
      32:	00 00       	nop
      34:	6d c0       	rjmp	.+218    	; 0x110 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c0       	rjmp	.+214    	; 0x110 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c0       	rjmp	.+210    	; 0x110 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c0       	rjmp	.+206    	; 0x110 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c0       	rjmp	.+202    	; 0x110 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c0       	rjmp	.+198    	; 0x110 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c0       	rjmp	.+194    	; 0x110 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c0       	rjmp	.+190    	; 0x110 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c0       	rjmp	.+186    	; 0x110 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c0       	rjmp	.+182    	; 0x110 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c0       	rjmp	.+178    	; 0x110 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c0       	rjmp	.+174    	; 0x110 <__bad_interrupt>
      62:	00 00       	nop
      64:	55 c0       	rjmp	.+170    	; 0x110 <__bad_interrupt>
      66:	00 00       	nop
      68:	53 c0       	rjmp	.+166    	; 0x110 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	51 c0       	rjmp	.+162    	; 0x110 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c0       	rjmp	.+158    	; 0x110 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c0       	rjmp	.+154    	; 0x110 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c0       	rjmp	.+150    	; 0x110 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c0       	rjmp	.+146    	; 0x110 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c0       	rjmp	.+142    	; 0x110 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c0       	rjmp	.+138    	; 0x110 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c0       	rjmp	.+134    	; 0x110 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	c8 0a       	sbc	r12, r24
      8e:	7f 6e       	ori	r23, 0xEF	; 239
      90:	99 3f       	cpi	r25, 0xF9	; 249
      92:	00 16       	cp	r0, r16
      94:	4c 2b       	or	r20, r28
      96:	49 40       	sbci	r20, 0x09	; 9
      98:	01 80       	ldd	r0, Z+1	; 0x01
      9a:	19 7e       	andi	r17, 0xE9	; 233
      9c:	48 3d       	cpi	r20, 0xD8	; 216
      9e:	6d 4b       	sbci	r22, 0xBD	; 189
      a0:	67 77       	andi	r22, 0x77	; 119
      a2:	4c 7f       	andi	r20, 0xFC	; 252
      a4:	6f 81       	ldd	r22, Y+7	; 0x07
      a6:	c0 39       	cpi	r28, 0x90	; 144
      a8:	21 63       	ori	r18, 0x31	; 49
      aa:	9d 5d       	subi	r25, 0xDD	; 221
      ac:	5f 73       	andi	r21, 0x3F	; 63
      ae:	31 79       	andi	r19, 0x91	; 145
      b0:	37 17       	cp	r19, r23
      b2:	76 53       	subi	r23, 0x36	; 54
      b4:	12 78       	andi	r17, 0x82	; 130
      b6:	3b 32       	cpi	r19, 0x2B	; 43
      b8:	5e 51       	subi	r21, 0x1E	; 30
      ba:	71 1f       	adc	r23, r17
      bc:	4f 57       	subi	r20, 0x7F	; 127
      be:	66 4c       	sbci	r22, 0xC6	; 198
      c0:	70 2a       	or	r7, r16
      c2:	7a 5b       	subi	r23, 0xBA	; 186
      c4:	6b 3c       	cpi	r22, 0xCB	; 203
      c6:	36 43       	sbci	r19, 0x36	; 54
      c8:	6c 0e       	add	r6, r28
      ca:	20 08       	sbc	r2, r0
      cc:	27 5a       	subi	r18, 0xA7	; 167
      ce:	2d 75       	andi	r18, 0x5D	; 93
      d0:	0f 00       	.word	0x000f	; ????

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d0 e1       	ldi	r29, 0x10	; 16
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	11 e0       	ldi	r17, 0x01	; 1
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e8 e1       	ldi	r30, 0x18	; 24
      e6:	fe e1       	ldi	r31, 0x1E	; 30
      e8:	00 e0       	ldi	r16, 0x00	; 0
      ea:	0b bf       	out	0x3b, r16	; 59
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x14>
      ee:	07 90       	elpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	ae 37       	cpi	r26, 0x7E	; 126
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0x10>

000000f8 <__do_clear_bss>:
      f8:	22 e0       	ldi	r18, 0x02	; 2
      fa:	ae e7       	ldi	r26, 0x7E	; 126
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a1 39       	cpi	r26, 0x91	; 145
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <main>
     10c:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <_exit>

00000110 <__bad_interrupt>:
     110:	77 cf       	rjmp	.-274    	; 0x0 <__vectors>

00000112 <_ZN4arch7pushBitEb>:
	arch::programHeaderInterpreter();
}

void arch::pushBit(bool bit){
	/* push a bit to the end of the light line */
	PORTB = (PORTB & 0b11111110) | bit;
     112:	98 b3       	in	r25, 0x18	; 24
     114:	9e 7f       	andi	r25, 0xFE	; 254
     116:	89 2b       	or	r24, r25
     118:	88 bb       	out	0x18, r24	; 24
	PORTB ^= 0b00000010;
     11a:	98 b3       	in	r25, 0x18	; 24
     11c:	82 e0       	ldi	r24, 0x02	; 2
     11e:	98 27       	eor	r25, r24
     120:	98 bb       	out	0x18, r25	; 24
	PORTB ^= 0b00000010;
     122:	98 b3       	in	r25, 0x18	; 24
     124:	89 27       	eor	r24, r25
     126:	88 bb       	out	0x18, r24	; 24
     128:	08 95       	ret

0000012a <_ZN4arch5latchEv>:
}

void arch::latch(void){
	/* send a latch signal to the light line */
	PORTB ^= 0b00000100;
     12a:	98 b3       	in	r25, 0x18	; 24
     12c:	84 e0       	ldi	r24, 0x04	; 4
     12e:	98 27       	eor	r25, r24
     130:	98 bb       	out	0x18, r25	; 24
	PORTB ^= 0b00000100;
     132:	98 b3       	in	r25, 0x18	; 24
     134:	89 27       	eor	r24, r25
     136:	88 bb       	out	0x18, r24	; 24
     138:	08 95       	ret

0000013a <_ZN4arch15pushLineVisibleEj>:
}

void arch::pushLineVisible(uint16_t line){// for user needing manipulation
     13a:	cf 92       	push	r12
     13c:	df 92       	push	r13
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	7c 01       	movw	r14, r24
     14c:	cf e0       	ldi	r28, 0x0F	; 15
     14e:	d0 e0       	ldi	r29, 0x00	; 0
	/* push 16 bit to the light line (MSB first) and make it visible */
	for(int8_t i = 15; i>=0; --i){
		arch::pushBit(line & (1<<i));
     150:	01 e0       	ldi	r16, 0x01	; 1
     152:	10 e0       	ldi	r17, 0x00	; 0
     154:	dd 24       	eor	r13, r13
     156:	d3 94       	inc	r13
     158:	c1 2c       	mov	r12, r1
     15a:	98 01       	movw	r18, r16
     15c:	0c 2e       	mov	r0, r28
     15e:	02 c0       	rjmp	.+4      	; 0x164 <_ZN4arch15pushLineVisibleEj+0x2a>
     160:	22 0f       	add	r18, r18
     162:	33 1f       	adc	r19, r19
     164:	0a 94       	dec	r0
     166:	e2 f7       	brpl	.-8      	; 0x160 <_ZN4arch15pushLineVisibleEj+0x26>
     168:	2e 21       	and	r18, r14
     16a:	3f 21       	and	r19, r15
     16c:	8d 2d       	mov	r24, r13
     16e:	23 2b       	or	r18, r19
     170:	09 f4       	brne	.+2      	; 0x174 <_ZN4arch15pushLineVisibleEj+0x3a>
     172:	8c 2d       	mov	r24, r12
     174:	ce df       	rcall	.-100    	; 0x112 <_ZN4arch7pushBitEb>
     176:	21 97       	sbiw	r28, 0x01	; 1
     178:	80 f7       	brcc	.-32     	; 0x15a <_ZN4arch15pushLineVisibleEj+0x20>
	}
	arch::latch();
     17a:	d7 df       	rcall	.-82     	; 0x12a <_ZN4arch5latchEv>
}
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	1f 91       	pop	r17
     182:	0f 91       	pop	r16
     184:	ff 90       	pop	r15
     186:	ef 90       	pop	r14
     188:	df 90       	pop	r13
     18a:	cf 90       	pop	r12
     18c:	08 95       	ret

0000018e <_ZN4arch10readBufferEv>:

void arch::readBuffer(void){
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
	/* check whether we can read from the light buffer. if so: execute one buffer entry. if not: set the bufferWait Flag */
	if (state.light.read!=state.light.write){
     192:	c0 91 ef 01 	lds	r28, 0x01EF	; 0x8001ef <__data_end+0x71>
     196:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <__data_end+0x72>
     19a:	c8 17       	cp	r28, r24
     19c:	d1 f0       	breq	.+52     	; 0x1d2 <_ZN4arch10readBufferEv+0x44>
		if (state.light.buffer[state.light.read].light>>15 == 0){
     19e:	d0 e0       	ldi	r29, 0x00	; 0
     1a0:	fe 01       	movw	r30, r28
     1a2:	ee 0f       	add	r30, r30
     1a4:	ff 1f       	adc	r31, r31
     1a6:	ec 0f       	add	r30, r28
     1a8:	fd 1f       	adc	r31, r29
     1aa:	e1 54       	subi	r30, 0x41	; 65
     1ac:	fe 4f       	sbci	r31, 0xFE	; 254
     1ae:	80 81       	ld	r24, Z
     1b0:	91 81       	ldd	r25, Z+1	; 0x01
     1b2:	99 23       	and	r25, r25
     1b4:	0c f0       	brlt	.+2      	; 0x1b8 <_ZN4arch10readBufferEv+0x2a>
			arch::pushLineVisible(state.light.buffer[state.light.read].light);
     1b6:	c1 df       	rcall	.-126    	; 0x13a <_ZN4arch15pushLineVisibleEj>
inline void BufferWriteIndexerInc(){
	state.light.write = (state.light.write + 1 ) % BUFFERSIZE;
}

inline void BufferReadIndexerInc(){
	state.light.read = (state.light.read + 1) % BUFFERSIZE;
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	8f 70       	andi	r24, 0x0F	; 15
     1be:	90 78       	andi	r25, 0x80	; 128
     1c0:	99 23       	and	r25, r25
     1c2:	24 f4       	brge	.+8      	; 0x1cc <_ZN4arch10readBufferEv+0x3e>
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	80 6f       	ori	r24, 0xF0	; 240
     1c8:	9f 6f       	ori	r25, 0xFF	; 255
     1ca:	01 96       	adiw	r24, 0x01	; 1
     1cc:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <__data_end+0x71>
     1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <_ZN4arch10readBufferEv+0x4a>
			arch::pushLineVisible(state.light.buffer[state.light.read].light);
		}
		//### set timer = state.light.buffer[state.light.read].delay; after time execute arch::readBuffer
		BufferReadIndexerInc();
	} else {
		state.light.bufferWait = true;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <__data_end+0x73>
		// set a waiting signal to led output??? <<<< gui can do ths
	}
}
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	08 95       	ret

000001de <_ZN4arch17instructionLengthEh>:

uint8_t arch::instructionLength(const uint8_t firstByte){
	/* return the length of the instruction in bytes when the first byte is given */
	if  (	(firstByte >= (3<<6)) /* ALU Register */
     1de:	80 3c       	cpi	r24, 0xC0	; 192
     1e0:	58 f4       	brcc	.+22     	; 0x1f8 <_ZN4arch17instructionLengthEh+0x1a>
		||	((firstByte & 0b11110100) == 0b10110100) /* DEC (Register) and WAIT-R */	){	
     1e2:	98 2f       	mov	r25, r24
     1e4:	94 7f       	andi	r25, 0xF4	; 244
     1e6:	94 3b       	cpi	r25, 0xB4	; 180
     1e8:	49 f0       	breq	.+18     	; 0x1fc <_ZN4arch17instructionLengthEh+0x1e>
		return 1; // 8 bit
	}
	if ((firstByte & 0b11110000)==0x80){ /* Jump on Condition */
     1ea:	80 7f       	andi	r24, 0xF0	; 240
     1ec:	80 38       	cpi	r24, 0x80	; 128
     1ee:	41 f0       	breq	.+16     	; 0x200 <_ZN4arch17instructionLengthEh+0x22>
		return 3; // 24 bit
	}
	if ((firstByte & 0b11110000)==0xA0){ /* CALL */
     1f0:	80 3a       	cpi	r24, 0xA0	; 160
     1f2:	41 f0       	breq	.+16     	; 0x204 <_ZN4arch17instructionLengthEh+0x26>
		return 8; // 64 bit
	}
	return 2; // 16 bit (for each other instruction)
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	08 95       	ret

uint8_t arch::instructionLength(const uint8_t firstByte){
	/* return the length of the instruction in bytes when the first byte is given */
	if  (	(firstByte >= (3<<6)) /* ALU Register */
		||	((firstByte & 0b11110100) == 0b10110100) /* DEC (Register) and WAIT-R */	){	
		return 1; // 8 bit
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	08 95       	ret
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	08 95       	ret
	}
	if ((firstByte & 0b11110000)==0x80){ /* Jump on Condition */
		return 3; // 24 bit
     200:	83 e0       	ldi	r24, 0x03	; 3
     202:	08 95       	ret
	}
	if ((firstByte & 0b11110000)==0xA0){ /* CALL */
		return 8; // 64 bit
     204:	88 e0       	ldi	r24, 0x08	; 8
	}
	return 2; // 16 bit (for each other instruction)
}
     206:	08 95       	ret

00000208 <_ZN4arch17EEPAddressHelper_EhhRKb>:

uint16_t arch::EEPAddressHelper_(uint8_t program, uint8_t instruction, const bool& counting){
     208:	cf 92       	push	r12
     20a:	df 92       	push	r13
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	d8 2f       	mov	r29, r24
     21a:	d6 2e       	mov	r13, r22
     21c:	7a 01       	movw	r14, r20
	/* combined calculating of:
				EEPROM program address (given program ID, instruction of program)		(iff counting==false)
				program counting	(up to 255)											(iff counting)
																													*/
	uint16_t ptr = PROGRAMSTART;
	if ((program == 0) && !counting){
     21e:	81 11       	cpse	r24, r1
     220:	07 c0       	rjmp	.+14     	; 0x230 <_ZN4arch17EEPAddressHelper_EhhRKb+0x28>
     222:	fa 01       	movw	r30, r20
     224:	80 81       	ld	r24, Z
     226:	81 11       	cpse	r24, r1
     228:	0a c0       	rjmp	.+20     	; 0x23e <_ZN4arch17EEPAddressHelper_EhhRKb+0x36>
		ptr = EEPNULL;
     22a:	8f ef       	ldi	r24, 0xFF	; 255
     22c:	9f ef       	ldi	r25, 0xFF	; 255
     22e:	69 c0       	rjmp	.+210    	; 0x302 <_ZN4arch17EEPAddressHelper_EhhRKb+0xfa>
		// ledError(3); ## please delete error from manuscript this should be allowed for compatibility
	} else {
		// select the program
		--program;
		if (counting) program = 0;
     230:	fa 01       	movw	r30, r20
     232:	80 81       	ld	r24, Z
     234:	81 11       	cpse	r24, r1
     236:	02 c0       	rjmp	.+4      	; 0x23c <_ZN4arch17EEPAddressHelper_EhhRKb+0x34>
	if ((program == 0) && !counting){
		ptr = EEPNULL;
		// ledError(3); ## please delete error from manuscript this should be allowed for compatibility
	} else {
		// select the program
		--program;
     238:	d1 50       	subi	r29, 0x01	; 1
     23a:	01 c0       	rjmp	.+2      	; 0x23e <_ZN4arch17EEPAddressHelper_EhhRKb+0x36>
		if (counting) program = 0;
     23c:	d0 e0       	ldi	r29, 0x00	; 0
		while (program || counting){
			--program;
     23e:	00 e0       	ldi	r16, 0x00	; 0
     240:	14 e0       	ldi	r17, 0x04	; 4
     242:	cc 24       	eor	r12, r12
     244:	ca 94       	dec	r12
     246:	2d c0       	rjmp	.+90     	; 0x2a2 <_ZN4arch17EEPAddressHelper_EhhRKb+0x9a>
     248:	d1 50       	subi	r29, 0x01	; 1
			ptr =  (static_cast<uint16_t>(eeprom_read_byte((uint8_t*)ptr))<<8) | eeprom_read_byte((uint8_t*)(ptr+1));// read two bytes big endian
     24a:	c8 01       	movw	r24, r16
     24c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
     250:	c8 2f       	mov	r28, r24
     252:	c8 01       	movw	r24, r16
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
     25a:	2c 2f       	mov	r18, r28
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	32 2f       	mov	r19, r18
     260:	22 27       	eor	r18, r18
     262:	89 01       	movw	r16, r18
     264:	08 2b       	or	r16, r24
			if (hardware::isEEPNull(ptr)) {
     266:	c8 01       	movw	r24, r16
     268:	82 d7       	rcall	.+3844   	; 0x116e <_ZN8hardware9isEEPNullEj>
     26a:	88 23       	and	r24, r24
     26c:	81 f0       	breq	.+32     	; 0x28e <_ZN4arch17EEPAddressHelper_EhhRKb+0x86>
     26e:	01 c0       	rjmp	.+2      	; 0x272 <_ZN4arch17EEPAddressHelper_EhhRKb+0x6a>
	} else {
		// select the program
		--program;
		if (counting) program = 0;
		while (program || counting){
			--program;
     270:	dc 2d       	mov	r29, r12
			ptr =  (static_cast<uint16_t>(eeprom_read_byte((uint8_t*)ptr))<<8) | eeprom_read_byte((uint8_t*)(ptr+1));// read two bytes big endian
			if (hardware::isEEPNull(ptr)) {
				if (counting){
     272:	f7 01       	movw	r30, r14
     274:	80 81       	ld	r24, Z
     276:	88 23       	and	r24, r24
     278:	31 f0       	breq	.+12     	; 0x286 <_ZN4arch17EEPAddressHelper_EhhRKb+0x7e>
					return -program;
     27a:	8d 2f       	mov	r24, r29
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	91 95       	neg	r25
     280:	81 95       	neg	r24
     282:	91 09       	sbc	r25, r1
     284:	3e c0       	rjmp	.+124    	; 0x302 <_ZN4arch17EEPAddressHelper_EhhRKb+0xfa>
				}
				led::error(101);
     286:	85 e6       	ldi	r24, 0x65	; 101
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 87 0b 	call	0x170e	; 0x170e <_ZN3led5errorEj>
			}
			if ((program==0) && counting){
     28e:	d1 11       	cpse	r29, r1
     290:	08 c0       	rjmp	.+16     	; 0x2a2 <_ZN4arch17EEPAddressHelper_EhhRKb+0x9a>
     292:	f7 01       	movw	r30, r14
     294:	80 81       	ld	r24, Z
     296:	88 23       	and	r24, r24
     298:	21 f0       	breq	.+8      	; 0x2a2 <_ZN4arch17EEPAddressHelper_EhhRKb+0x9a>
				led::error(1);
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 87 0b 	call	0x170e	; 0x170e <_ZN3led5errorEj>
		// ledError(3); ## please delete error from manuscript this should be allowed for compatibility
	} else {
		// select the program
		--program;
		if (counting) program = 0;
		while (program || counting){
     2a2:	d1 11       	cpse	r29, r1
     2a4:	d1 cf       	rjmp	.-94     	; 0x248 <_ZN4arch17EEPAddressHelper_EhhRKb+0x40>
     2a6:	f7 01       	movw	r30, r14
     2a8:	80 81       	ld	r24, Z
     2aa:	81 11       	cpse	r24, r1
     2ac:	16 c0       	rjmp	.+44     	; 0x2da <_ZN4arch17EEPAddressHelper_EhhRKb+0xd2>
		if (counting){
			led::error(102);
		}
		// select the certain instruction
		// instruction == 0 : init part of the program;
		if (instruction){
     2ae:	dd 20       	and	r13, r13
     2b0:	81 f0       	breq	.+32     	; 0x2d2 <_ZN4arch17EEPAddressHelper_EhhRKb+0xca>
			ptr += 14;
     2b2:	e8 01       	movw	r28, r16
     2b4:	2e 96       	adiw	r28, 0x0e	; 14
			--instruction;
     2b6:	da 94       	dec	r13
			while (instruction){
     2b8:	dd 20       	and	r13, r13
     2ba:	69 f0       	breq	.+26     	; 0x2d6 <_ZN4arch17EEPAddressHelper_EhhRKb+0xce>
				--instruction;
     2bc:	da 94       	dec	r13
				ptr += arch::instructionLength(eeprom_read_byte((uint8_t*) ptr));
     2be:	ce 01       	movw	r24, r28
     2c0:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
     2c4:	8c df       	rcall	.-232    	; 0x1de <_ZN4arch17instructionLengthEh>
     2c6:	c8 0f       	add	r28, r24
     2c8:	d1 1d       	adc	r29, r1
		// select the certain instruction
		// instruction == 0 : init part of the program;
		if (instruction){
			ptr += 14;
			--instruction;
			while (instruction){
     2ca:	d1 10       	cpse	r13, r1
     2cc:	f7 cf       	rjmp	.-18     	; 0x2bc <_ZN4arch17EEPAddressHelper_EhhRKb+0xb4>
				--instruction;
				ptr += arch::instructionLength(eeprom_read_byte((uint8_t*) ptr));
     2ce:	ce 01       	movw	r24, r28
     2d0:	18 c0       	rjmp	.+48     	; 0x302 <_ZN4arch17EEPAddressHelper_EhhRKb+0xfa>
     2d2:	c8 01       	movw	r24, r16
     2d4:	16 c0       	rjmp	.+44     	; 0x302 <_ZN4arch17EEPAddressHelper_EhhRKb+0xfa>
			led::error(102);
		}
		// select the certain instruction
		// instruction == 0 : init part of the program;
		if (instruction){
			ptr += 14;
     2d6:	ce 01       	movw	r24, r28
     2d8:	14 c0       	rjmp	.+40     	; 0x302 <_ZN4arch17EEPAddressHelper_EhhRKb+0xfa>
		// select the program
		--program;
		if (counting) program = 0;
		while (program || counting){
			--program;
			ptr =  (static_cast<uint16_t>(eeprom_read_byte((uint8_t*)ptr))<<8) | eeprom_read_byte((uint8_t*)(ptr+1));// read two bytes big endian
     2da:	c8 01       	movw	r24, r16
     2dc:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
     2e0:	c8 2f       	mov	r28, r24
     2e2:	c8 01       	movw	r24, r16
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
     2ea:	2c 2f       	mov	r18, r28
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	32 2f       	mov	r19, r18
     2f0:	22 27       	eor	r18, r18
     2f2:	89 01       	movw	r16, r18
     2f4:	08 2b       	or	r16, r24
			if (hardware::isEEPNull(ptr)) {
     2f6:	c8 01       	movw	r24, r16
     2f8:	3a d7       	rcall	.+3700   	; 0x116e <_ZN8hardware9isEEPNullEj>
     2fa:	81 11       	cpse	r24, r1
     2fc:	b9 cf       	rjmp	.-142    	; 0x270 <_ZN4arch17EEPAddressHelper_EhhRKb+0x68>
	} else {
		// select the program
		--program;
		if (counting) program = 0;
		while (program || counting){
			--program;
     2fe:	dc 2d       	mov	r29, r12
     300:	d0 cf       	rjmp	.-96     	; 0x2a2 <_ZN4arch17EEPAddressHelper_EhhRKb+0x9a>
				ptr += arch::instructionLength(eeprom_read_byte((uint8_t*) ptr));
			}
		}
	}
	return ptr;
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	08 95       	ret

00000314 <_ZN4arch14getProgramNameEhPc>:

void arch::getProgramName(uint8_t program, char* string_8_bytes){// for gui programmer
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	00 d0       	rcall	.+0      	; 0x326 <_ZN4arch14getProgramNameEhPc+0x12>
     326:	00 d0       	rcall	.+0      	; 0x328 <_ZN4arch14getProgramNameEhPc+0x14>
     328:	1f 92       	push	r1
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	6b 01       	movw	r12, r22
	/* read the program name of a given program from the EEPROM */
	if (program == 0){
     330:	81 11       	cpse	r24, r1
     332:	10 c0       	rjmp	.+32     	; 0x354 <_ZN4arch14getProgramNameEhPc+0x40>
		char off[] = "OFF";
     334:	8f e4       	ldi	r24, 0x4F	; 79
     336:	96 e4       	ldi	r25, 0x46	; 70
     338:	a6 e4       	ldi	r26, 0x46	; 70
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	8a 83       	std	Y+2, r24	; 0x02
     33e:	9b 83       	std	Y+3, r25	; 0x03
     340:	ac 83       	std	Y+4, r26	; 0x04
     342:	bd 83       	std	Y+5, r27	; 0x05
		hardware::copyString(string_8_bytes,off,8,false);
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	48 e0       	ldi	r20, 0x08	; 8
     348:	be 01       	movw	r22, r28
     34a:	6e 5f       	subi	r22, 0xFE	; 254
     34c:	7f 4f       	sbci	r23, 0xFF	; 255
     34e:	c6 01       	movw	r24, r12
     350:	20 d7       	rcall	.+3648   	; 0x1192 <_ZN8hardware10copyStringEPcPKchb>
     352:	18 c0       	rjmp	.+48     	; 0x384 <_ZN4arch14getProgramNameEhPc+0x70>
					program counting	(up to 255)											(iff counting)
																														*/
	
	inline uint16_t getAddress(uint8_t program, uint8_t instruction){
		/* calculate the eeprom address of instruction (instruction) in program (program) */
		return EEPAddressHelper_(program,instruction);
     354:	19 82       	std	Y+1, r1	; 0x01
     356:	ae 01       	movw	r20, r28
     358:	4f 5f       	subi	r20, 0xFF	; 255
     35a:	5f 4f       	sbci	r21, 0xFF	; 255
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	54 df       	rcall	.-344    	; 0x208 <_ZN4arch17EEPAddressHelper_EhhRKb>
     360:	76 01       	movw	r14, r12
     362:	28 e0       	ldi	r18, 0x08	; 8
     364:	c2 0e       	add	r12, r18
     366:	d1 1c       	adc	r13, r1
	} else {
		uint16_t address = arch::getAddress(program,0) + 2;
     368:	8c 01       	movw	r16, r24
     36a:	0e 5f       	subi	r16, 0xFE	; 254
     36c:	1f 4f       	sbci	r17, 0xFF	; 255
		for (uint8_t i = 0; i<8; ++i){
			string_8_bytes[i] = eeprom_read_byte((uint8_t*) (address + i));
     36e:	c8 01       	movw	r24, r16
     370:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
     374:	f7 01       	movw	r30, r14
     376:	81 93       	st	Z+, r24
     378:	7f 01       	movw	r14, r30
     37a:	0f 5f       	subi	r16, 0xFF	; 255
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
	if (program == 0){
		char off[] = "OFF";
		hardware::copyString(string_8_bytes,off,8,false);
	} else {
		uint16_t address = arch::getAddress(program,0) + 2;
		for (uint8_t i = 0; i<8; ++i){
     37e:	ec 15       	cp	r30, r12
     380:	fd 05       	cpc	r31, r13
     382:	a9 f7       	brne	.-22     	; 0x36e <_ZN4arch14getProgramNameEhPc+0x5a>
			string_8_bytes[i] = eeprom_read_byte((uint8_t*) (address + i));
		}
	} // ### check if running correctly
}
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	08 95       	ret

000003a0 <_ZN4arch24programHeaderInterpreterEv>:

void arch::programHeaderInterpreter(){
     3a0:	cf 92       	push	r12
     3a2:	df 92       	push	r13
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
	/* interprete the 14 INIT Bytes of the begin of a program (and update the pc) */
	pavrecord avrecord = &(state.light.avrecord[state.light.ptr]);
     3b0:	c0 91 be 01 	lds	r28, 0x01BE	; 0x8001be <__data_end+0x40>
     3b4:	ec 2e       	mov	r14, r28
     3b6:	f1 2c       	mov	r15, r1
	   C:										Reg 2
	   D:										Reg 3
	   E:													------------------------------------- address of the 1st instruction (PROGRAM PART)
	   F:		...															*/
	/************************************************************************/
	if (avrecord->program==0){ // if program 0 is called there is no header to deal with
     3b8:	f7 01       	movw	r30, r14
     3ba:	ee 0f       	add	r30, r30
     3bc:	ff 1f       	adc	r31, r31
     3be:	ee 0f       	add	r30, r30
     3c0:	ff 1f       	adc	r31, r31
     3c2:	ee 0f       	add	r30, r30
     3c4:	ff 1f       	adc	r31, r31
     3c6:	e2 58       	subi	r30, 0x82	; 130
     3c8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ca:	80 81       	ld	r24, Z
     3cc:	88 23       	and	r24, r24
     3ce:	89 f1       	breq	.+98     	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
		return;
	}
	for(uint8_t i = 1; i < 4; ++i){
		avrecord->reg[i] = eeprom_read_byte((uint8_t*)(avrecord->pc+10+i));
     3d0:	f7 01       	movw	r30, r14
     3d2:	ee 0f       	add	r30, r30
     3d4:	ff 1f       	adc	r31, r31
     3d6:	ee 0f       	add	r30, r30
     3d8:	ff 1f       	adc	r31, r31
     3da:	ee 0f       	add	r30, r30
     3dc:	ff 1f       	adc	r31, r31
     3de:	e2 58       	subi	r30, 0x82	; 130
     3e0:	fe 4f       	sbci	r31, 0xFE	; 254
     3e2:	c1 80       	ldd	r12, Z+1	; 0x01
     3e4:	d2 80       	ldd	r13, Z+2	; 0x02
     3e6:	86 01       	movw	r16, r12
     3e8:	05 5f       	subi	r16, 0xF5	; 245
     3ea:	1f 4f       	sbci	r17, 0xFF	; 255
     3ec:	e7 01       	movw	r28, r14
     3ee:	cc 0f       	add	r28, r28
     3f0:	dd 1f       	adc	r29, r29
     3f2:	cc 0f       	add	r28, r28
     3f4:	dd 1f       	adc	r29, r29
     3f6:	cc 0f       	add	r28, r28
     3f8:	dd 1f       	adc	r29, r29
     3fa:	cd 57       	subi	r28, 0x7D	; 125
     3fc:	de 4f       	sbci	r29, 0xFE	; 254
     3fe:	8e e0       	ldi	r24, 0x0E	; 14
     400:	c8 0e       	add	r12, r24
     402:	d1 1c       	adc	r13, r1
     404:	c8 01       	movw	r24, r16
     406:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
     40a:	89 93       	st	Y+, r24
     40c:	0f 5f       	subi	r16, 0xFF	; 255
     40e:	1f 4f       	sbci	r17, 0xFF	; 255
	   F:		...															*/
	/************************************************************************/
	if (avrecord->program==0){ // if program 0 is called there is no header to deal with
		return;
	}
	for(uint8_t i = 1; i < 4; ++i){
     410:	0c 15       	cp	r16, r12
     412:	1d 05       	cpc	r17, r13
     414:	b9 f7       	brne	.-18     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
		avrecord->reg[i] = eeprom_read_byte((uint8_t*)(avrecord->pc+10+i));
	}
	avrecord->pc += 14;
     416:	f7 01       	movw	r30, r14
     418:	ee 0f       	add	r30, r30
     41a:	ff 1f       	adc	r31, r31
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	ee 0f       	add	r30, r30
     422:	ff 1f       	adc	r31, r31
     424:	e2 58       	subi	r30, 0x82	; 130
     426:	fe 4f       	sbci	r31, 0xFE	; 254
     428:	81 81       	ldd	r24, Z+1	; 0x01
     42a:	92 81       	ldd	r25, Z+2	; 0x02
     42c:	0e 96       	adiw	r24, 0x0e	; 14
     42e:	92 83       	std	Z+2, r25	; 0x02
     430:	81 83       	std	Z+1, r24	; 0x01
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	ef 90       	pop	r14
     43e:	df 90       	pop	r13
     440:	cf 90       	pop	r12
     442:	08 95       	ret

00000444 <_ZN4arch10runProgramEh>:

inline void BufferReadIndexerInc(){
	state.light.read = (state.light.read + 1) % BUFFERSIZE;
}

void arch::runProgram(uint8_t program){// for user
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	1f 92       	push	r1
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
	/* initialization of avrecord to run given program */
	//## turn off timer
	state.light.ptr = 0;
     452:	0e e7       	ldi	r16, 0x7E	; 126
     454:	11 e0       	ldi	r17, 0x01	; 1
     456:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <__data_end+0x40>
	state.light.avrecord[0].returnMatter = 0x00;
     45a:	f8 01       	movw	r30, r16
     45c:	13 82       	std	Z+3, r1	; 0x03
	state.light.avrecord[0].program = program;
     45e:	80 83       	st	Z, r24
     460:	19 82       	std	Y+1, r1	; 0x01
     462:	ae 01       	movw	r20, r28
     464:	4f 5f       	subi	r20, 0xFF	; 255
     466:	5f 4f       	sbci	r21, 0xFF	; 255
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	ce de       	rcall	.-612    	; 0x208 <_ZN4arch17EEPAddressHelper_EhhRKb>
	state.light.avrecord[0].pc = arch::getAddress(program,0);
     46c:	f8 01       	movw	r30, r16
     46e:	92 83       	std	Z+2, r25	; 0x02
     470:	81 83       	std	Z+1, r24	; 0x01
	state.light.read =  0;
     472:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <__data_end+0x71>
	state.light.write = 0;
     476:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <__data_end+0x72>
	
	state.light.bufferWait = true;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <__data_end+0x73>
} tstate;

static tstate state;

inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e8       	ldi	r25, 0x80	; 128
     484:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <__data_end+0x42>
     488:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <__data_end+0x41>
	state.light.write = 0;
	
	state.light.bufferWait = true;
	WaitOnlyBufferPrepare();
	// ## timer will be started automatically because of bufferWait
	arch::programHeaderInterpreter();
     48c:	89 df       	rcall	.-238    	; 0x3a0 <_ZN4arch24programHeaderInterpreterEv>
}
     48e:	0f 90       	pop	r0
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <_ZN4arch11fetchBufferEv>:
		avrecord->reg[i] = eeprom_read_byte((uint8_t*)(avrecord->pc+10+i));
	}
	avrecord->pc += 14;
}

bool arch::fetchBuffer(void){// check the prg logic !!! ######
     49a:	2f 92       	push	r2
     49c:	3f 92       	push	r3
     49e:	4f 92       	push	r4
     4a0:	5f 92       	push	r5
     4a2:	6f 92       	push	r6
     4a4:	7f 92       	push	r7
     4a6:	8f 92       	push	r8
     4a8:	9f 92       	push	r9
     4aa:	af 92       	push	r10
     4ac:	bf 92       	push	r11
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	29 97       	sbiw	r28, 0x09	; 9
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
	/* Interpreter which deals with exactly one task, returns true if idle ( = the buffer is full) */
	/* feeds the state.light.buffer */
	
	if ( (state.light.write+1) % BUFFERSIZE == state.light.read ){
     4ce:	e0 90 f0 01 	lds	r14, 0x01F0	; 0x8001f0 <__data_end+0x72>
     4d2:	f1 2c       	mov	r15, r1
     4d4:	87 01       	movw	r16, r14
     4d6:	0f 5f       	subi	r16, 0xFF	; 255
     4d8:	1f 4f       	sbci	r17, 0xFF	; 255
     4da:	0f 70       	andi	r16, 0x0F	; 15
     4dc:	10 78       	andi	r17, 0x80	; 128
     4de:	11 23       	and	r17, r17
     4e0:	34 f4       	brge	.+12     	; 0x4ee <_ZN4arch11fetchBufferEv+0x54>
     4e2:	01 50       	subi	r16, 0x01	; 1
     4e4:	11 09       	sbc	r17, r1
     4e6:	00 6f       	ori	r16, 0xF0	; 240
     4e8:	1f 6f       	ori	r17, 0xFF	; 255
     4ea:	0f 5f       	subi	r16, 0xFF	; 255
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
     4ee:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <__data_end+0x71>
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	08 17       	cp	r16, r24
     4f6:	19 07       	cpc	r17, r25
     4f8:	09 f4       	brne	.+2      	; 0x4fc <_ZN4arch11fetchBufferEv+0x62>
     4fa:	91 c3       	rjmp	.+1826   	; 0xc1e <_ZN4arch11fetchBufferEv+0x784>
		// no space to buffer new instructions
		return true;
	}
	
	pavrecord avrecord = &(state.light.avrecord[state.light.ptr]);
     4fc:	40 90 be 01 	lds	r4, 0x01BE	; 0x8001be <__data_end+0x40>
     500:	c4 2c       	mov	r12, r4
     502:	d1 2c       	mov	r13, r1
	pbuffer buffer = &(state.light.buffer[state.light.write]);
	
	if (avrecord->program == 0){
     504:	f6 01       	movw	r30, r12
     506:	ee 0f       	add	r30, r30
     508:	ff 1f       	adc	r31, r31
     50a:	ee 0f       	add	r30, r30
     50c:	ff 1f       	adc	r31, r31
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e2 58       	subi	r30, 0x82	; 130
     514:	fe 4f       	sbci	r31, 0xFE	; 254
     516:	30 80       	ld	r3, Z
     518:	31 10       	cpse	r3, r1
     51a:	20 c0       	rjmp	.+64     	; 0x55c <_ZN4arch11fetchBufferEv+0xc2>
		// realize the non ordinary 0-program function
		buffer->light = 0x0000; // set light to buffer
     51c:	c7 01       	movw	r24, r14
     51e:	88 0f       	add	r24, r24
     520:	99 1f       	adc	r25, r25
     522:	8e 0d       	add	r24, r14
     524:	9f 1d       	adc	r25, r15
     526:	82 58       	subi	r24, 0x82	; 130
     528:	9e 4f       	sbci	r25, 0xFE	; 254
     52a:	fc 01       	movw	r30, r24
     52c:	ef 5b       	subi	r30, 0xBF	; 191
     52e:	ff 4f       	sbci	r31, 0xFF	; 255
     530:	11 82       	std	Z+1, r1	; 0x01
     532:	10 82       	st	Z, r1
		buffer->delay = 0xFF;  // set delay time after light to buffer
     534:	32 96       	adiw	r30, 0x02	; 2
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	80 83       	st	Z, r24
inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
}

inline void BufferWriteIndexerInc(){
	state.light.write = (state.light.write + 1 ) % BUFFERSIZE;
     53a:	00 93 f0 01 	sts	0x01F0, r16	; 0x8001f0 <__data_end+0x72>
} tstate;

static tstate state;

inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
     53e:	11 27       	eor	r17, r17
     540:	f8 01       	movw	r30, r16
     542:	ee 0f       	add	r30, r30
     544:	ff 1f       	adc	r31, r31
     546:	0e 0f       	add	r16, r30
     548:	1f 1f       	adc	r17, r31
     54a:	f8 01       	movw	r30, r16
     54c:	e1 54       	subi	r30, 0x41	; 65
     54e:	fe 4f       	sbci	r31, 0xFE	; 254
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e8       	ldi	r25, 0x80	; 128
     554:	91 83       	std	Z+1, r25	; 0x01
     556:	80 83       	st	Z, r24
		// realize the non ordinary 0-program function
		buffer->light = 0x0000; // set light to buffer
		buffer->delay = 0xFF;  // set delay time after light to buffer
		BufferWriteIndexerInc();
		WaitOnlyBufferPrepare();
		return false;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	72 c3       	rjmp	.+1764   	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
	}
	
	uint8_t instruction[3] = {eeprom_read_byte((uint8_t*)avrecord->pc),
     55c:	f6 01       	movw	r30, r12
     55e:	ee 0f       	add	r30, r30
     560:	ff 1f       	adc	r31, r31
     562:	ee 0f       	add	r30, r30
     564:	ff 1f       	adc	r31, r31
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	e2 58       	subi	r30, 0x82	; 130
     56c:	fe 4f       	sbci	r31, 0xFE	; 254
     56e:	a1 80       	ldd	r10, Z+1	; 0x01
     570:	b2 80       	ldd	r11, Z+2	; 0x02
     572:	c5 01       	movw	r24, r10
     574:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
     578:	58 2e       	mov	r5, r24
							  eeprom_read_byte((uint8_t*) ((avrecord->pc+1)% ADDRESSSPACE)),
     57a:	35 01       	movw	r6, r10
     57c:	4f ef       	ldi	r20, 0xFF	; 255
     57e:	64 1a       	sub	r6, r20
     580:	74 0a       	sbc	r7, r20
     582:	c3 01       	movw	r24, r6
     584:	9f 70       	andi	r25, 0x0F	; 15
     586:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
     58a:	28 2e       	mov	r2, r24
							  eeprom_read_byte((uint8_t*) ((avrecord->pc+2)% ADDRESSSPACE))};
     58c:	45 01       	movw	r8, r10
     58e:	52 e0       	ldi	r21, 0x02	; 2
     590:	85 0e       	add	r8, r21
     592:	91 1c       	adc	r9, r1
     594:	c4 01       	movw	r24, r8
     596:	9f 70       	andi	r25, 0x0F	; 15
     598:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
     59c:	89 87       	std	Y+9, r24	; 0x09
	uint8_t* const reg6 = &(  avrecord->reg[  (instruction[1] & 0b00001100)>>2  ]  );
	uint8_t* const reg7 = &(  avrecord->reg[    (instruction[1] & 0b00000011)   ]  );
	
	uint8_t seg;
	
	if (instruction[0] & 0b10000000){
     59e:	55 20       	and	r5, r5
     5a0:	0c f0       	brlt	.+2      	; 0x5a4 <_ZN4arch11fetchBufferEv+0x10a>
     5a2:	20 c3       	rjmp	.+1600   	; 0xbe4 <_ZN4arch11fetchBufferEv+0x74a>
	
	uint8_t instruction[3] = {eeprom_read_byte((uint8_t*)avrecord->pc),
							  eeprom_read_byte((uint8_t*) ((avrecord->pc+1)% ADDRESSSPACE)),
							  eeprom_read_byte((uint8_t*) ((avrecord->pc+2)% ADDRESSSPACE))};
	
	uint8_t* const reg2 = &(  avrecord->reg[  (instruction[0] & 0b00001100)>>2  ]  );
     5a4:	85 2d       	mov	r24, r5
     5a6:	8c 70       	andi	r24, 0x0C	; 12
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	95 95       	asr	r25
     5ac:	87 95       	ror	r24
     5ae:	95 95       	asr	r25
     5b0:	87 95       	ror	r24
	uint8_t* const reg3 = &(  avrecord->reg[    (instruction[0] & 0b00000011)   ]  );
     5b2:	25 2d       	mov	r18, r5
     5b4:	23 70       	andi	r18, 0x03	; 3
     5b6:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t* const reg7 = &(  avrecord->reg[    (instruction[1] & 0b00000011)   ]  );
	
	uint8_t seg;
	
	if (instruction[0] & 0b10000000){
		if (instruction[0] & 0b01000000){
     5b8:	56 fe       	sbrs	r5, 6
     5ba:	6f c0       	rjmp	.+222    	; 0x69a <_ZN4arch11fetchBufferEv+0x200>
			// ALU Register Operations: 0b11 XX R2 R3
			seg = (instruction[0] & 0b00110000)>>4;
     5bc:	45 2d       	mov	r20, r5
     5be:	40 73       	andi	r20, 0x30	; 48
     5c0:	42 95       	swap	r20
     5c2:	4f 70       	andi	r20, 0x0F	; 15
			if (seg==0){
     5c4:	a9 f4       	brne	.+42     	; 0x5f0 <_ZN4arch11fetchBufferEv+0x156>
				//ADD
				*reg2 = *reg2 + *reg3;
     5c6:	b6 01       	movw	r22, r12
     5c8:	66 0f       	add	r22, r22
     5ca:	77 1f       	adc	r23, r23
     5cc:	66 0f       	add	r22, r22
     5ce:	77 1f       	adc	r23, r23
     5d0:	66 0f       	add	r22, r22
     5d2:	77 1f       	adc	r23, r23
     5d4:	62 58       	subi	r22, 0x82	; 130
     5d6:	7e 4f       	sbci	r23, 0xFE	; 254
     5d8:	fb 01       	movw	r30, r22
     5da:	e8 0f       	add	r30, r24
     5dc:	f9 1f       	adc	r31, r25
     5de:	62 0f       	add	r22, r18
     5e0:	73 1f       	adc	r23, r19
     5e2:	14 81       	ldd	r17, Z+4	; 0x04
     5e4:	db 01       	movw	r26, r22
     5e6:	14 96       	adiw	r26, 0x04	; 4
     5e8:	5c 91       	ld	r21, X
     5ea:	51 0f       	add	r21, r17
     5ec:	54 83       	std	Z+4, r21	; 0x04
     5ee:	31 c0       	rjmp	.+98     	; 0x652 <_ZN4arch11fetchBufferEv+0x1b8>
			}
			if (seg==1){
     5f0:	41 30       	cpi	r20, 0x01	; 1
     5f2:	b9 f4       	brne	.+46     	; 0x622 <_ZN4arch11fetchBufferEv+0x188>
				//MUL
				*reg2 = (*reg2) * (*reg3);
     5f4:	a6 01       	movw	r20, r12
     5f6:	44 0f       	add	r20, r20
     5f8:	55 1f       	adc	r21, r21
     5fa:	44 0f       	add	r20, r20
     5fc:	55 1f       	adc	r21, r21
     5fe:	44 0f       	add	r20, r20
     600:	55 1f       	adc	r21, r21
     602:	42 58       	subi	r20, 0x82	; 130
     604:	5e 4f       	sbci	r21, 0xFE	; 254
     606:	fa 01       	movw	r30, r20
     608:	e8 0f       	add	r30, r24
     60a:	f9 1f       	adc	r31, r25
     60c:	da 01       	movw	r26, r20
     60e:	a2 0f       	add	r26, r18
     610:	b3 1f       	adc	r27, r19
     612:	94 81       	ldd	r25, Z+4	; 0x04
     614:	14 96       	adiw	r26, 0x04	; 4
     616:	8c 91       	ld	r24, X
     618:	98 9f       	mul	r25, r24
     61a:	90 2d       	mov	r25, r0
     61c:	11 24       	eor	r1, r1
     61e:	94 83       	std	Z+4, r25	; 0x04
     620:	2f c0       	rjmp	.+94     	; 0x680 <_ZN4arch11fetchBufferEv+0x1e6>
			}
			if (seg==2){
     622:	42 30       	cpi	r20, 0x02	; 2
     624:	b1 f4       	brne	.+44     	; 0x652 <_ZN4arch11fetchBufferEv+0x1b8>
				//DIV
				*reg2 = *reg2 / *reg3;
     626:	a6 01       	movw	r20, r12
     628:	44 0f       	add	r20, r20
     62a:	55 1f       	adc	r21, r21
     62c:	44 0f       	add	r20, r20
     62e:	55 1f       	adc	r21, r21
     630:	44 0f       	add	r20, r20
     632:	55 1f       	adc	r21, r21
     634:	42 58       	subi	r20, 0x82	; 130
     636:	5e 4f       	sbci	r21, 0xFE	; 254
     638:	fa 01       	movw	r30, r20
     63a:	e8 0f       	add	r30, r24
     63c:	f9 1f       	adc	r31, r25
     63e:	da 01       	movw	r26, r20
     640:	a2 0f       	add	r26, r18
     642:	b3 1f       	adc	r27, r19
     644:	84 81       	ldd	r24, Z+4	; 0x04
     646:	14 96       	adiw	r26, 0x04	; 4
     648:	6c 91       	ld	r22, X
     64a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__udivmodqi4>
     64e:	84 83       	std	Z+4, r24	; 0x04
     650:	17 c0       	rjmp	.+46     	; 0x680 <_ZN4arch11fetchBufferEv+0x1e6>
			}
			if (seg==3){
     652:	43 30       	cpi	r20, 0x03	; 3
     654:	a9 f4       	brne	.+42     	; 0x680 <_ZN4arch11fetchBufferEv+0x1e6>
				//MOD
				*reg2 = *reg2 % *reg3;
     656:	a6 01       	movw	r20, r12
     658:	44 0f       	add	r20, r20
     65a:	55 1f       	adc	r21, r21
     65c:	44 0f       	add	r20, r20
     65e:	55 1f       	adc	r21, r21
     660:	44 0f       	add	r20, r20
     662:	55 1f       	adc	r21, r21
     664:	42 58       	subi	r20, 0x82	; 130
     666:	5e 4f       	sbci	r21, 0xFE	; 254
     668:	fa 01       	movw	r30, r20
     66a:	e8 0f       	add	r30, r24
     66c:	f9 1f       	adc	r31, r25
     66e:	da 01       	movw	r26, r20
     670:	a2 0f       	add	r26, r18
     672:	b3 1f       	adc	r27, r19
     674:	84 81       	ldd	r24, Z+4	; 0x04
     676:	14 96       	adiw	r26, 0x04	; 4
     678:	6c 91       	ld	r22, X
     67a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__udivmodqi4>
     67e:	94 83       	std	Z+4, r25	; 0x04
			}
			avrecord->pc += 1; 
     680:	f6 01       	movw	r30, r12
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	e2 58       	subi	r30, 0x82	; 130
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	72 82       	std	Z+2, r7	; 0x02
     694:	61 82       	std	Z+1, r6	; 0x01
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	d3 c2       	rjmp	.+1446   	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
				//MOD
				*reg2 = *reg2 % *reg3;
			}
			avrecord->pc += 1; 
		} else {
			if (instruction[0] & 0b00100000){
     69a:	55 fe       	sbrs	r5, 5
     69c:	e0 c1       	rjmp	.+960    	; 0xa5e <_ZN4arch11fetchBufferEv+0x5c4>
				if (instruction[0] & 0b00010000){
     69e:	54 fe       	sbrs	r5, 4
     6a0:	56 c1       	rjmp	.+684    	; 0x94e <_ZN4arch11fetchBufferEv+0x4b4>
					//0xB
					if (instruction[0] & 0b00001000){
     6a2:	53 fe       	sbrs	r5, 3
     6a4:	14 c1       	rjmp	.+552    	; 0x8ce <_ZN4arch11fetchBufferEv+0x434>
						if (instruction[0] & 0b00000100){
     6a6:	52 fe       	sbrs	r5, 2
     6a8:	16 c0       	rjmp	.+44     	; 0x6d6 <_ZN4arch11fetchBufferEv+0x23c>
							// DEC: 0b1011 11 RR
							*reg3 -=1;
     6aa:	f6 01       	movw	r30, r12
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	ee 0f       	add	r30, r30
     6b6:	ff 1f       	adc	r31, r31
     6b8:	e2 58       	subi	r30, 0x82	; 130
     6ba:	fe 4f       	sbci	r31, 0xFE	; 254
     6bc:	df 01       	movw	r26, r30
     6be:	a2 0f       	add	r26, r18
     6c0:	b3 1f       	adc	r27, r19
     6c2:	14 96       	adiw	r26, 0x04	; 4
     6c4:	8c 91       	ld	r24, X
     6c6:	14 97       	sbiw	r26, 0x04	; 4
     6c8:	81 50       	subi	r24, 0x01	; 1
     6ca:	14 96       	adiw	r26, 0x04	; 4
     6cc:	8c 93       	st	X, r24
							avrecord->pc += 1;
     6ce:	72 82       	std	Z+2, r7	; 0x02
     6d0:	61 82       	std	Z+1, r6	; 0x01
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	b5 c2       	rjmp	.+1386   	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
						if (instruction[0] & 0b00000100){
							// DEC: 0b1011 11 RR
							*reg3 -=1;
							avrecord->pc += 1;
						} else {
							if (instruction[0] & 0b00000010){
     6d6:	51 fe       	sbrs	r5, 1
     6d8:	bd c0       	rjmp	.+378    	; 0x854 <_ZN4arch11fetchBufferEv+0x3ba>
								if (instruction[0] & 0b00000001){
     6da:	50 fe       	sbrs	r5, 0
     6dc:	1c c0       	rjmp	.+56     	; 0x716 <_ZN4arch11fetchBufferEv+0x27c>
									// RET: 0xBB | MATTER
									avrecord->pc += 2;
     6de:	f6 01       	movw	r30, r12
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ee 0f       	add	r30, r30
     6e6:	ff 1f       	adc	r31, r31
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	e2 58       	subi	r30, 0x82	; 130
     6ee:	fe 4f       	sbci	r31, 0xFE	; 254
     6f0:	92 82       	std	Z+2, r9	; 0x02
     6f2:	81 82       	std	Z+1, r8	; 0x01
									if (instruction[1] & (avrecord->returnMatter)){//check matter match
     6f4:	83 81       	ldd	r24, Z+3	; 0x03
     6f6:	28 22       	and	r2, r24
     6f8:	09 f4       	brne	.+2      	; 0x6fc <_ZN4arch11fetchBufferEv+0x262>
     6fa:	93 c2       	rjmp	.+1318   	; 0xc22 <_ZN4arch11fetchBufferEv+0x788>
										if (state.light.ptr==0){
     6fc:	41 10       	cpse	r4, r1
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <_ZN4arch11fetchBufferEv+0x26e>
											led::error(103);
     700:	87 e6       	ldi	r24, 0x67	; 103
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 87 0b 	call	0x170e	; 0x170e <_ZN3led5errorEj>
										}
										--state.light.ptr;
     708:	ee eb       	ldi	r30, 0xBE	; 190
     70a:	f1 e0       	ldi	r31, 0x01	; 1
     70c:	80 81       	ld	r24, Z
     70e:	81 50       	subi	r24, 0x01	; 1
     710:	80 83       	st	Z, r24
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	95 c2       	rjmp	.+1322   	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
							  eeprom_read_byte((uint8_t*) ((avrecord->pc+1)% ADDRESSSPACE)),
							  eeprom_read_byte((uint8_t*) ((avrecord->pc+2)% ADDRESSSPACE))};
	
	uint8_t* const reg2 = &(  avrecord->reg[  (instruction[0] & 0b00001100)>>2  ]  );
	uint8_t* const reg3 = &(  avrecord->reg[    (instruction[0] & 0b00000011)   ]  );
	uint8_t* const reg6 = &(  avrecord->reg[  (instruction[1] & 0b00001100)>>2  ]  );
     716:	22 2d       	mov	r18, r2
     718:	2c 70       	andi	r18, 0x0C	; 12
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	35 95       	asr	r19
     71e:	27 95       	ror	r18
     720:	35 95       	asr	r19
     722:	27 95       	ror	r18
	uint8_t* const reg7 = &(  avrecord->reg[    (instruction[1] & 0b00000011)   ]  );
     724:	82 2d       	mov	r24, r2
     726:	83 70       	andi	r24, 0x03	; 3
     728:	90 e0       	ldi	r25, 0x00	; 0
										}
										--state.light.ptr;
									}
								} else {
									// 0xBA
									seg = (instruction[1] & 0b11110000)>>4;
     72a:	62 2d       	mov	r22, r2
     72c:	62 95       	swap	r22
     72e:	6f 70       	andi	r22, 0x0F	; 15
									if (seg==0){
     730:	91 f4       	brne	.+36     	; 0x756 <_ZN4arch11fetchBufferEv+0x2bc>
										// MOVE: 0b 1011 1010 | 0000 RD RS
										 *reg6 = *reg7; 
     732:	a6 01       	movw	r20, r12
     734:	44 0f       	add	r20, r20
     736:	55 1f       	adc	r21, r21
     738:	44 0f       	add	r20, r20
     73a:	55 1f       	adc	r21, r21
     73c:	44 0f       	add	r20, r20
     73e:	55 1f       	adc	r21, r21
     740:	42 58       	subi	r20, 0x82	; 130
     742:	5e 4f       	sbci	r21, 0xFE	; 254
     744:	fa 01       	movw	r30, r20
     746:	e8 0f       	add	r30, r24
     748:	f9 1f       	adc	r31, r25
     74a:	74 81       	ldd	r23, Z+4	; 0x04
     74c:	fa 01       	movw	r30, r20
     74e:	e2 0f       	add	r30, r18
     750:	f3 1f       	adc	r31, r19
     752:	74 83       	std	Z+4, r23	; 0x04
     754:	45 c0       	rjmp	.+138    	; 0x7e0 <_ZN4arch11fetchBufferEv+0x346>
									}
									if (seg==1){
     756:	61 30       	cpi	r22, 0x01	; 1
     758:	29 f5       	brne	.+74     	; 0x7a4 <_ZN4arch11fetchBufferEv+0x30a>
										//SET-LR: 0b 1011 1010 | 0001 RH RL
										buffer->light = ((*reg6<<8) + *reg7) & ~(1<<15);
     75a:	f7 01       	movw	r30, r14
     75c:	ee 0f       	add	r30, r30
     75e:	ff 1f       	adc	r31, r31
     760:	ee 0d       	add	r30, r14
     762:	ff 1d       	adc	r31, r15
     764:	e1 54       	subi	r30, 0x41	; 65
     766:	fe 4f       	sbci	r31, 0xFE	; 254
     768:	a6 01       	movw	r20, r12
     76a:	44 0f       	add	r20, r20
     76c:	55 1f       	adc	r21, r21
     76e:	44 0f       	add	r20, r20
     770:	55 1f       	adc	r21, r21
     772:	44 0f       	add	r20, r20
     774:	55 1f       	adc	r21, r21
     776:	42 58       	subi	r20, 0x82	; 130
     778:	5e 4f       	sbci	r21, 0xFE	; 254
     77a:	da 01       	movw	r26, r20
     77c:	a2 0f       	add	r26, r18
     77e:	b3 1f       	adc	r27, r19
     780:	14 96       	adiw	r26, 0x04	; 4
     782:	2c 91       	ld	r18, X
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	32 2f       	mov	r19, r18
     788:	22 27       	eor	r18, r18
     78a:	da 01       	movw	r26, r20
     78c:	a8 0f       	add	r26, r24
     78e:	b9 1f       	adc	r27, r25
     790:	14 96       	adiw	r26, 0x04	; 4
     792:	8c 91       	ld	r24, X
     794:	79 01       	movw	r14, r18
     796:	e8 0e       	add	r14, r24
     798:	f1 1c       	adc	r15, r1
     79a:	c7 01       	movw	r24, r14
     79c:	9f 77       	andi	r25, 0x7F	; 127
     79e:	91 83       	std	Z+1, r25	; 0x01
     7a0:	80 83       	st	Z, r24
     7a2:	35 c0       	rjmp	.+106    	; 0x80e <_ZN4arch11fetchBufferEv+0x374>
									}
									if (seg==2){
     7a4:	62 30       	cpi	r22, 0x02	; 2
     7a6:	e1 f4       	brne	.+56     	; 0x7e0 <_ZN4arch11fetchBufferEv+0x346>
										//SWAP: 0b 1011 1010 | 0010 RR RR
										seg = *reg6;
     7a8:	d6 01       	movw	r26, r12
     7aa:	aa 0f       	add	r26, r26
     7ac:	bb 1f       	adc	r27, r27
     7ae:	aa 0f       	add	r26, r26
     7b0:	bb 1f       	adc	r27, r27
     7b2:	aa 0f       	add	r26, r26
     7b4:	bb 1f       	adc	r27, r27
     7b6:	a2 58       	subi	r26, 0x82	; 130
     7b8:	be 4f       	sbci	r27, 0xFE	; 254
     7ba:	ad 01       	movw	r20, r26
     7bc:	42 0f       	add	r20, r18
     7be:	53 1f       	adc	r21, r19
     7c0:	fa 01       	movw	r30, r20
     7c2:	24 81       	ldd	r18, Z+4	; 0x04
										*reg6 = *reg7;
     7c4:	8a 0f       	add	r24, r26
     7c6:	9b 1f       	adc	r25, r27
     7c8:	fc 01       	movw	r30, r24
     7ca:	34 81       	ldd	r19, Z+4	; 0x04
     7cc:	fa 01       	movw	r30, r20
     7ce:	34 83       	std	Z+4, r19	; 0x04
										*reg7 = seg;
     7d0:	fc 01       	movw	r30, r24
     7d2:	24 83       	std	Z+4, r18	; 0x04
									}
									if (seg==3){
										//NEG: 0b 1011 1010  | 0011 XX RR
										*reg7 = - (*reg7);//
									}
									avrecord->pc += 2;
     7d4:	12 96       	adiw	r26, 0x02	; 2
     7d6:	9c 92       	st	X, r9
     7d8:	8e 92       	st	-X, r8
     7da:	11 97       	sbiw	r26, 0x01	; 1
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	30 c2       	rjmp	.+1120   	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
										seg = *reg6;
										*reg6 = *reg7;
										*reg7 = seg;
										seg = 2;
									}
									if (seg==3){
     7e0:	63 30       	cpi	r22, 0x03	; 3
     7e2:	a9 f4       	brne	.+42     	; 0x80e <_ZN4arch11fetchBufferEv+0x374>
										//NEG: 0b 1011 1010  | 0011 XX RR
										*reg7 = - (*reg7);//
     7e4:	d6 01       	movw	r26, r12
     7e6:	aa 0f       	add	r26, r26
     7e8:	bb 1f       	adc	r27, r27
     7ea:	aa 0f       	add	r26, r26
     7ec:	bb 1f       	adc	r27, r27
     7ee:	aa 0f       	add	r26, r26
     7f0:	bb 1f       	adc	r27, r27
     7f2:	a2 58       	subi	r26, 0x82	; 130
     7f4:	be 4f       	sbci	r27, 0xFE	; 254
     7f6:	fd 01       	movw	r30, r26
     7f8:	e8 0f       	add	r30, r24
     7fa:	f9 1f       	adc	r31, r25
     7fc:	84 81       	ldd	r24, Z+4	; 0x04
     7fe:	81 95       	neg	r24
     800:	84 83       	std	Z+4, r24	; 0x04
									}
									avrecord->pc += 2;
     802:	12 96       	adiw	r26, 0x02	; 2
     804:	9c 92       	st	X, r9
     806:	8e 92       	st	-X, r8
     808:	11 97       	sbiw	r26, 0x01	; 1
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	19 c2       	rjmp	.+1074   	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
									}
									if (seg==3){
										//NEG: 0b 1011 1010  | 0011 XX RR
										*reg7 = - (*reg7);//
									}
									avrecord->pc += 2;
     80e:	f6 01       	movw	r30, r12
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	ee 0f       	add	r30, r30
     816:	ff 1f       	adc	r31, r31
     818:	ee 0f       	add	r30, r30
     81a:	ff 1f       	adc	r31, r31
     81c:	e2 58       	subi	r30, 0x82	; 130
     81e:	fe 4f       	sbci	r31, 0xFE	; 254
     820:	92 82       	std	Z+2, r9	; 0x02
     822:	81 82       	std	Z+1, r8	; 0x01
									if (seg==4){
     824:	64 30       	cpi	r22, 0x04	; 4
     826:	09 f0       	breq	.+2      	; 0x82a <_ZN4arch11fetchBufferEv+0x390>
     828:	fe c1       	rjmp	.+1020   	; 0xc26 <_ZN4arch11fetchBufferEv+0x78c>
     82a:	1c 82       	std	Y+4, r1	; 0x04
     82c:	ae 01       	movw	r20, r28
     82e:	4c 5f       	subi	r20, 0xFC	; 252
     830:	5f 4f       	sbci	r21, 0xFF	; 255
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	83 2d       	mov	r24, r3
     836:	e8 dc       	rcall	.-1584   	; 0x208 <_ZN4arch17EEPAddressHelper_EhhRKb>
										//RESET: 0b 1011 1010 | 0100 XXXX
										avrecord->pc = arch::getAddress(avrecord->program,0);
     838:	f6 01       	movw	r30, r12
     83a:	ee 0f       	add	r30, r30
     83c:	ff 1f       	adc	r31, r31
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	e2 58       	subi	r30, 0x82	; 130
     848:	fe 4f       	sbci	r31, 0xFE	; 254
     84a:	92 83       	std	Z+2, r25	; 0x02
     84c:	81 83       	std	Z+1, r24	; 0x01
										arch::programHeaderInterpreter();
     84e:	a8 dd       	rcall	.-1200   	; 0x3a0 <_ZN4arch24programHeaderInterpreterEv>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	f6 c1       	rjmp	.+1004   	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
										avrecord->pc = arch::getAddress(avrecord->program,0);
										arch::programHeaderInterpreter();
									}
								}
							} else {
								avrecord->pc += 2;
     854:	f6 01       	movw	r30, r12
     856:	ee 0f       	add	r30, r30
     858:	ff 1f       	adc	r31, r31
     85a:	ee 0f       	add	r30, r30
     85c:	ff 1f       	adc	r31, r31
     85e:	ee 0f       	add	r30, r30
     860:	ff 1f       	adc	r31, r31
     862:	e2 58       	subi	r30, 0x82	; 130
     864:	fe 4f       	sbci	r31, 0xFE	; 254
     866:	92 82       	std	Z+2, r9	; 0x02
     868:	81 82       	std	Z+1, r8	; 0x01
								if (instruction[0] & 0b00000001){
     86a:	50 fe       	sbrs	r5, 0
     86c:	19 c0       	rjmp	.+50     	; 0x8a0 <_ZN4arch11fetchBufferEv+0x406>
									//WAIT-I: 0xB9 | Immediate
									buffer->delay = instruction[1];
     86e:	f7 01       	movw	r30, r14
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	ee 0d       	add	r30, r14
     876:	ff 1d       	adc	r31, r15
     878:	ef 53       	subi	r30, 0x3F	; 63
     87a:	fe 4f       	sbci	r31, 0xFE	; 254
     87c:	20 82       	st	Z, r2
inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
}

inline void BufferWriteIndexerInc(){
	state.light.write = (state.light.write + 1 ) % BUFFERSIZE;
     87e:	00 93 f0 01 	sts	0x01F0, r16	; 0x8001f0 <__data_end+0x72>
} tstate;

static tstate state;

inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
     882:	11 27       	eor	r17, r17
     884:	f8 01       	movw	r30, r16
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	0e 0f       	add	r16, r30
     88c:	1f 1f       	adc	r17, r31
     88e:	f8 01       	movw	r30, r16
     890:	e1 54       	subi	r30, 0x41	; 65
     892:	fe 4f       	sbci	r31, 0xFE	; 254
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e8       	ldi	r25, 0x80	; 128
     898:	91 83       	std	Z+1, r25	; 0x01
     89a:	80 83       	st	Z, r24
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	d0 c1       	rjmp	.+928    	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
									buffer->delay = instruction[1];
									BufferWriteIndexerInc();
									WaitOnlyBufferPrepare();									
								} else {
									//JMP: 0xB8 | local address
									if (instruction[1] == 0) {
     8a0:	22 20       	and	r2, r2
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <_ZN4arch11fetchBufferEv+0x40c>
     8a4:	c2 c1       	rjmp	.+900    	; 0xc2a <_ZN4arch11fetchBufferEv+0x790>
     8a6:	1b 82       	std	Y+3, r1	; 0x03
     8a8:	ae 01       	movw	r20, r28
     8aa:	4d 5f       	subi	r20, 0xFD	; 253
     8ac:	5f 4f       	sbci	r21, 0xFF	; 255
     8ae:	62 2d       	mov	r22, r2
     8b0:	83 2d       	mov	r24, r3
     8b2:	aa dc       	rcall	.-1708   	; 0x208 <_ZN4arch17EEPAddressHelper_EhhRKb>
										//### throw error: you should use reset instead
									} else {
										avrecord->pc = arch::getAddress(avrecord->program,instruction[1]);
     8b4:	f6 01       	movw	r30, r12
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	ee 0f       	add	r30, r30
     8bc:	ff 1f       	adc	r31, r31
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	e2 58       	subi	r30, 0x82	; 130
     8c4:	fe 4f       	sbci	r31, 0xFE	; 254
     8c6:	92 83       	std	Z+2, r25	; 0x02
     8c8:	81 83       	std	Z+1, r24	; 0x01
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	b9 c1       	rjmp	.+882    	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
									}
								}
							}
						}
					} else {
						if (instruction[0] & 0b00000100){
     8ce:	52 fe       	sbrs	r5, 2
     8d0:	2c c0       	rjmp	.+88     	; 0x92a <_ZN4arch11fetchBufferEv+0x490>
							// WAIT-R: 0b1011 01 RR
							buffer->delay = *reg3;
     8d2:	f7 01       	movw	r30, r14
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	ee 0d       	add	r30, r14
     8da:	ff 1d       	adc	r31, r15
     8dc:	af 01       	movw	r20, r30
     8de:	4f 53       	subi	r20, 0x3F	; 63
     8e0:	5e 4f       	sbci	r21, 0xFE	; 254
     8e2:	d6 01       	movw	r26, r12
     8e4:	aa 0f       	add	r26, r26
     8e6:	bb 1f       	adc	r27, r27
     8e8:	aa 0f       	add	r26, r26
     8ea:	bb 1f       	adc	r27, r27
     8ec:	aa 0f       	add	r26, r26
     8ee:	bb 1f       	adc	r27, r27
     8f0:	a2 58       	subi	r26, 0x82	; 130
     8f2:	be 4f       	sbci	r27, 0xFE	; 254
     8f4:	2a 0f       	add	r18, r26
     8f6:	3b 1f       	adc	r19, r27
     8f8:	f9 01       	movw	r30, r18
     8fa:	84 81       	ldd	r24, Z+4	; 0x04
     8fc:	fa 01       	movw	r30, r20
     8fe:	80 83       	st	Z, r24
inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
}

inline void BufferWriteIndexerInc(){
	state.light.write = (state.light.write + 1 ) % BUFFERSIZE;
     900:	00 93 f0 01 	sts	0x01F0, r16	; 0x8001f0 <__data_end+0x72>
} tstate;

static tstate state;

inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
     904:	11 27       	eor	r17, r17
     906:	f8 01       	movw	r30, r16
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	0e 0f       	add	r16, r30
     90e:	1f 1f       	adc	r17, r31
     910:	f8 01       	movw	r30, r16
     912:	e1 54       	subi	r30, 0x41	; 65
     914:	fe 4f       	sbci	r31, 0xFE	; 254
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e8       	ldi	r25, 0x80	; 128
     91a:	91 83       	std	Z+1, r25	; 0x01
     91c:	80 83       	st	Z, r24
						if (instruction[0] & 0b00000100){
							// WAIT-R: 0b1011 01 RR
							buffer->delay = *reg3;
							BufferWriteIndexerInc();
							WaitOnlyBufferPrepare();
							avrecord->pc += 1;
     91e:	12 96       	adiw	r26, 0x02	; 2
     920:	7c 92       	st	X, r7
     922:	6e 92       	st	-X, r6
     924:	11 97       	sbiw	r26, 0x01	; 1
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	8b c1       	rjmp	.+790    	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
							BufferWriteIndexerInc();
							WaitOnlyBufferPrepare();
							avrecord->pc += 1;
						} else {
							//SET-RI: 0b1011 00 RR | Immediate
							*reg3 = instruction[1];
     92a:	f6 01       	movw	r30, r12
     92c:	ee 0f       	add	r30, r30
     92e:	ff 1f       	adc	r31, r31
     930:	ee 0f       	add	r30, r30
     932:	ff 1f       	adc	r31, r31
     934:	ee 0f       	add	r30, r30
     936:	ff 1f       	adc	r31, r31
     938:	e2 58       	subi	r30, 0x82	; 130
     93a:	fe 4f       	sbci	r31, 0xFE	; 254
     93c:	df 01       	movw	r26, r30
     93e:	a2 0f       	add	r26, r18
     940:	b3 1f       	adc	r27, r19
     942:	14 96       	adiw	r26, 0x04	; 4
     944:	2c 92       	st	X, r2
							avrecord->pc += 2;
     946:	92 82       	std	Z+2, r9	; 0x02
     948:	81 82       	std	Z+1, r8	; 0x01
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	79 c1       	rjmp	.+754    	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
					// QQQQ:		Q==0	->		immediate	->		(8 bit immediate)
					//				Q==1	->		register	->		(XX CC RD RS)	:	RS .. source register; write back in RD iff CC==11
					// this version is always without writing BACK !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
					// iff the return matter is 0 call will empty the avrecord and start from a blanc list again
					
					uint8_t matter = eeprom_read_byte((uint8_t*) ((avrecord->pc+3)% ADDRESSSPACE));
     94e:	c5 01       	movw	r24, r10
     950:	03 96       	adiw	r24, 0x03	; 3
     952:	9f 70       	andi	r25, 0x0F	; 15
     954:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
     958:	f8 2e       	mov	r15, r24
					
					if ((state.light.ptr != RECURSIONDEPTH-1) || (matter == 0)){
     95a:	f7 e0       	ldi	r31, 0x07	; 7
     95c:	4f 12       	cpse	r4, r31
     95e:	02 c0       	rjmp	.+4      	; 0x964 <_ZN4arch11fetchBufferEv+0x4ca>
     960:	81 11       	cpse	r24, r1
     962:	65 c1       	rjmp	.+714    	; 0xc2e <_ZN4arch11fetchBufferEv+0x794>
						
						// fetch more instructions
						// 5x fetching: % is not necessary because programmer should provide presence of the parameters <<<<<<< catch this as an error and make all lights off or such a thing
						uint8_t values[4] = {	eeprom_read_byte((uint8_t*) ((avrecord->pc+4)% ADDRESSSPACE)),
     964:	c5 01       	movw	r24, r10
     966:	04 96       	adiw	r24, 0x04	; 4
     968:	9f 70       	andi	r25, 0x0F	; 15
     96a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
												eeprom_read_byte((uint8_t*) ((avrecord->pc+5)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+6)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+7)% ADDRESSSPACE))};
     96e:	8d 83       	std	Y+5, r24	; 0x05
					if ((state.light.ptr != RECURSIONDEPTH-1) || (matter == 0)){
						
						// fetch more instructions
						// 5x fetching: % is not necessary because programmer should provide presence of the parameters <<<<<<< catch this as an error and make all lights off or such a thing
						uint8_t values[4] = {	eeprom_read_byte((uint8_t*) ((avrecord->pc+4)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+5)% ADDRESSSPACE)),
     970:	c5 01       	movw	r24, r10
     972:	05 96       	adiw	r24, 0x05	; 5
     974:	9f 70       	andi	r25, 0x0F	; 15
     976:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
												eeprom_read_byte((uint8_t*) ((avrecord->pc+6)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+7)% ADDRESSSPACE))};
     97a:	8e 83       	std	Y+6, r24	; 0x06
						
						// fetch more instructions
						// 5x fetching: % is not necessary because programmer should provide presence of the parameters <<<<<<< catch this as an error and make all lights off or such a thing
						uint8_t values[4] = {	eeprom_read_byte((uint8_t*) ((avrecord->pc+4)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+5)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+6)% ADDRESSSPACE)),
     97c:	c5 01       	movw	r24, r10
     97e:	06 96       	adiw	r24, 0x06	; 6
     980:	9f 70       	andi	r25, 0x0F	; 15
     982:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
												eeprom_read_byte((uint8_t*) ((avrecord->pc+7)% ADDRESSSPACE))};
     986:	8f 83       	std	Y+7, r24	; 0x07
     988:	c5 01       	movw	r24, r10
     98a:	07 96       	adiw	r24, 0x07	; 7
     98c:	9f 70       	andi	r25, 0x0F	; 15
     98e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_read_byte>
     992:	88 87       	std	Y+8, r24	; 0x08
						
						avrecord->pc += 8; //<<<< catch if user makes such code which will make me an eeprom read because of the pc which is out of range / ADRESSSpace
     994:	f6 01       	movw	r30, r12
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	ee 0f       	add	r30, r30
     9a0:	ff 1f       	adc	r31, r31
     9a2:	e2 58       	subi	r30, 0x82	; 130
     9a4:	fe 4f       	sbci	r31, 0xFE	; 254
     9a6:	48 e0       	ldi	r20, 0x08	; 8
     9a8:	a4 0e       	add	r10, r20
     9aa:	b1 1c       	adc	r11, r1
     9ac:	b2 82       	std	Z+2, r11	; 0x02
     9ae:	a1 82       	std	Z+1, r10	; 0x01
						state.light.ptr++;
						if (matter == 0) state.light.ptr = 0;
     9b0:	ff 20       	and	r15, r15
     9b2:	21 f0       	breq	.+8      	; 0x9bc <_ZN4arch11fetchBufferEv+0x522>
												eeprom_read_byte((uint8_t*) ((avrecord->pc+5)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+6)% ADDRESSSPACE)),
												eeprom_read_byte((uint8_t*) ((avrecord->pc+7)% ADDRESSSPACE))};
						
						avrecord->pc += 8; //<<<< catch if user makes such code which will make me an eeprom read because of the pc which is out of range / ADRESSSpace
						state.light.ptr++;
     9b4:	43 94       	inc	r4
     9b6:	40 92 be 01 	sts	0x01BE, r4	; 0x8001be <__data_end+0x40>
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <_ZN4arch11fetchBufferEv+0x526>
						if (matter == 0) state.light.ptr = 0;
     9bc:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <__data_end+0x40>
						
						pavrecord av2 = &(state.light.avrecord[state.light.ptr]);
     9c0:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <__data_end+0x40>
     9c4:	0a 2f       	mov	r16, r26
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	1a 82       	std	Y+2, r1	; 0x02
     9ca:	ae 01       	movw	r20, r28
     9cc:	4e 5f       	subi	r20, 0xFE	; 254
     9ce:	5f 4f       	sbci	r21, 0xFF	; 255
     9d0:	69 85       	ldd	r22, Y+9	; 0x09
     9d2:	82 2d       	mov	r24, r2
     9d4:	19 dc       	rcall	.-1998   	; 0x208 <_ZN4arch17EEPAddressHelper_EhhRKb>
						av2->pc = arch::getAddress(instruction[1],instruction[2]);
     9d6:	d8 01       	movw	r26, r16
     9d8:	aa 0f       	add	r26, r26
     9da:	bb 1f       	adc	r27, r27
     9dc:	aa 0f       	add	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	aa 0f       	add	r26, r26
     9e2:	bb 1f       	adc	r27, r27
     9e4:	fd 01       	movw	r30, r26
     9e6:	e2 58       	subi	r30, 0x82	; 130
     9e8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ea:	92 83       	std	Z+2, r25	; 0x02
     9ec:	81 83       	std	Z+1, r24	; 0x01
						av2->program = instruction[1];
     9ee:	20 82       	st	Z, r2
						av2->returnMatter = matter;
     9f0:	f3 82       	std	Z+3, r15	; 0x03
     9f2:	cd 01       	movw	r24, r26
     9f4:	8e 57       	subi	r24, 0x7E	; 126
     9f6:	9e 4f       	sbci	r25, 0xFE	; 254
     9f8:	5c 01       	movw	r10, r24
     9fa:	fe 01       	movw	r30, r28
     9fc:	35 96       	adiw	r30, 0x05	; 5
     9fe:	ae 01       	movw	r20, r28
     a00:	47 5f       	subi	r20, 0xF7	; 247
     a02:	5f 4f       	sbci	r21, 0xFF	; 255
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	90 e0       	ldi	r25, 0x00	; 0
						for(uint8_t i = 0; i<4; ++i){
							av2->reg[i] = (instruction[0] & (1<<(3-i))) 	? /*reg*/			avrecord->reg[values[i] & 0b11]
																			: /*immediate*/		values[i]
																			;
     a08:	65 2d       	mov	r22, r5
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	86 01       	movw	r16, r12
     a0e:	00 0f       	add	r16, r16
     a10:	11 1f       	adc	r17, r17
     a12:	00 0f       	add	r16, r16
     a14:	11 1f       	adc	r17, r17
     a16:	00 0f       	add	r16, r16
     a18:	11 1f       	adc	r17, r17
     a1a:	02 58       	subi	r16, 0x82	; 130
     a1c:	1e 4f       	sbci	r17, 0xFE	; 254
     a1e:	9b 01       	movw	r18, r22
     a20:	08 2e       	mov	r0, r24
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <_ZN4arch11fetchBufferEv+0x58e>
     a24:	35 95       	asr	r19
     a26:	27 95       	ror	r18
     a28:	0a 94       	dec	r0
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <_ZN4arch11fetchBufferEv+0x58a>
     a2c:	20 ff       	sbrs	r18, 0
     a2e:	08 c0       	rjmp	.+16     	; 0xa40 <_ZN4arch11fetchBufferEv+0x5a6>
						pavrecord av2 = &(state.light.avrecord[state.light.ptr]);
						av2->pc = arch::getAddress(instruction[1],instruction[2]);
						av2->program = instruction[1];
						av2->returnMatter = matter;
						for(uint8_t i = 0; i<4; ++i){
							av2->reg[i] = (instruction[0] & (1<<(3-i))) 	? /*reg*/			avrecord->reg[values[i] & 0b11]
     a30:	20 81       	ld	r18, Z
     a32:	23 70       	andi	r18, 0x03	; 3
																			: /*immediate*/		values[i]
																			;
     a34:	d8 01       	movw	r26, r16
     a36:	a2 0f       	add	r26, r18
     a38:	b1 1d       	adc	r27, r1
     a3a:	14 96       	adiw	r26, 0x04	; 4
     a3c:	2c 91       	ld	r18, X
     a3e:	01 c0       	rjmp	.+2      	; 0xa42 <_ZN4arch11fetchBufferEv+0x5a8>
     a40:	20 81       	ld	r18, Z
     a42:	d5 01       	movw	r26, r10
     a44:	2d 93       	st	X+, r18
     a46:	5d 01       	movw	r10, r26
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	31 96       	adiw	r30, 0x01	; 1
						
						pavrecord av2 = &(state.light.avrecord[state.light.ptr]);
						av2->pc = arch::getAddress(instruction[1],instruction[2]);
						av2->program = instruction[1];
						av2->returnMatter = matter;
						for(uint8_t i = 0; i<4; ++i){
     a4c:	e4 17       	cp	r30, r20
     a4e:	f5 07       	cpc	r31, r21
     a50:	31 f7       	brne	.-52     	; 0xa1e <_ZN4arch11fetchBufferEv+0x584>
							av2->reg[i] = (instruction[0] & (1<<(3-i))) 	? /*reg*/			avrecord->reg[values[i] & 0b11]
																			: /*immediate*/		values[i]
																			;
						}
						// if called program header:
						if (instruction[2] == 0) {
     a52:	e9 84       	ldd	r14, Y+9	; 0x09
     a54:	e1 10       	cpse	r14, r1
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <_ZN4arch11fetchBufferEv+0x5c0>
							arch::programHeaderInterpreter();
     a58:	a3 dc       	rcall	.-1722   	; 0x3a0 <_ZN4arch24programHeaderInterpreterEv>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	f1 c0       	rjmp	.+482    	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
						//throw little error <<<<
					}
				}
			} else {
				seg = (instruction[0] & 0b00001100)>>2;
				if (instruction[0] & 0b00010000){
     a5e:	54 fe       	sbrs	r5, 4
     a60:	59 c0       	rjmp	.+178    	; 0xb14 <_ZN4arch11fetchBufferEv+0x67a>
					// ALU IMMEDIATE Operations: 0x1001 XX RR | Immediate
					avrecord->pc += 2;
     a62:	f6 01       	movw	r30, r12
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	ee 0f       	add	r30, r30
     a6a:	ff 1f       	adc	r31, r31
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	e2 58       	subi	r30, 0x82	; 130
     a72:	fe 4f       	sbci	r31, 0xFE	; 254
     a74:	92 82       	std	Z+2, r9	; 0x02
     a76:	81 82       	std	Z+1, r8	; 0x01
					if (seg==0){
     a78:	81 11       	cpse	r24, r1
     a7a:	0f c0       	rjmp	.+30     	; 0xa9a <_ZN4arch11fetchBufferEv+0x600>
						// ADD-I
						*reg3 += instruction[1];
     a7c:	f6 01       	movw	r30, r12
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	e2 58       	subi	r30, 0x82	; 130
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	e2 0f       	add	r30, r18
     a90:	f3 1f       	adc	r31, r19
     a92:	94 81       	ldd	r25, Z+4	; 0x04
     a94:	92 0d       	add	r25, r2
     a96:	94 83       	std	Z+4, r25	; 0x04
     a98:	28 c0       	rjmp	.+80     	; 0xaea <_ZN4arch11fetchBufferEv+0x650>
					}
					if (seg==1){
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	91 f4       	brne	.+36     	; 0xac2 <_ZN4arch11fetchBufferEv+0x628>
						// MUL-I
						*reg3 *= instruction[1];
     a9e:	f6 01       	movw	r30, r12
     aa0:	ee 0f       	add	r30, r30
     aa2:	ff 1f       	adc	r31, r31
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	ee 0f       	add	r30, r30
     aaa:	ff 1f       	adc	r31, r31
     aac:	e2 58       	subi	r30, 0x82	; 130
     aae:	fe 4f       	sbci	r31, 0xFE	; 254
     ab0:	e2 0f       	add	r30, r18
     ab2:	f3 1f       	adc	r31, r19
     ab4:	84 81       	ldd	r24, Z+4	; 0x04
     ab6:	82 9d       	mul	r24, r2
     ab8:	20 2c       	mov	r2, r0
     aba:	11 24       	eor	r1, r1
     abc:	24 82       	std	Z+4, r2	; 0x04
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	bf c0       	rjmp	.+382    	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
					}
					if (seg==1){
						// MUL-I
						*reg3 *= instruction[1];
					}
					if (seg==2){
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	91 f4       	brne	.+36     	; 0xaea <_ZN4arch11fetchBufferEv+0x650>
						// DIV-I
						*reg3 /= instruction[1];
     ac6:	f6 01       	movw	r30, r12
     ac8:	ee 0f       	add	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	e2 58       	subi	r30, 0x82	; 130
     ad6:	fe 4f       	sbci	r31, 0xFE	; 254
     ad8:	e2 0f       	add	r30, r18
     ada:	f3 1f       	adc	r31, r19
     adc:	84 81       	ldd	r24, Z+4	; 0x04
     ade:	62 2d       	mov	r22, r2
     ae0:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__udivmodqi4>
     ae4:	84 83       	std	Z+4, r24	; 0x04
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	ab c0       	rjmp	.+342    	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
					}
					if (seg==2){
						// DIV-I
						*reg3 /= instruction[1];
					}
					if (seg==3){
     aea:	83 30       	cpi	r24, 0x03	; 3
     aec:	09 f0       	breq	.+2      	; 0xaf0 <_ZN4arch11fetchBufferEv+0x656>
     aee:	a1 c0       	rjmp	.+322    	; 0xc32 <_ZN4arch11fetchBufferEv+0x798>
						// MOD-I
						*reg3 = *reg3 % instruction[1];
     af0:	f6 01       	movw	r30, r12
     af2:	ee 0f       	add	r30, r30
     af4:	ff 1f       	adc	r31, r31
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	e2 58       	subi	r30, 0x82	; 130
     b00:	fe 4f       	sbci	r31, 0xFE	; 254
     b02:	e2 0f       	add	r30, r18
     b04:	f3 1f       	adc	r31, r19
     b06:	84 81       	ldd	r24, Z+4	; 0x04
     b08:	62 2d       	mov	r22, r2
     b0a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__udivmodqi4>
     b0e:	94 83       	std	Z+4, r25	; 0x04
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	96 c0       	rjmp	.+300    	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
						// MOD-I
						*reg3 = *reg3 % instruction[1];
					}
				} else {
					// JUMP ON CONDITION: 0x 1000 XX RR | Immediate | Instruction - Address
					avrecord->pc += 3;
     b14:	f6 01       	movw	r30, r12
     b16:	ee 0f       	add	r30, r30
     b18:	ff 1f       	adc	r31, r31
     b1a:	ee 0f       	add	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	e2 58       	subi	r30, 0x82	; 130
     b24:	fe 4f       	sbci	r31, 0xFE	; 254
     b26:	43 e0       	ldi	r20, 0x03	; 3
     b28:	a4 0e       	add	r10, r20
     b2a:	b1 1c       	adc	r11, r1
     b2c:	b2 82       	std	Z+2, r11	; 0x02
     b2e:	a1 82       	std	Z+1, r10	; 0x01
					if (
     b30:	81 11       	cpse	r24, r1
     b32:	07 c0       	rjmp	.+14     	; 0xb42 <_ZN4arch11fetchBufferEv+0x6a8>
							( (seg==0) && (*reg3 == instruction[1]) ) // JMP-EQ
     b34:	e2 0f       	add	r30, r18
     b36:	f3 1f       	adc	r31, r19
     b38:	84 81       	ldd	r24, Z+4	; 0x04
     b3a:	28 16       	cp	r2, r24
     b3c:	d9 f1       	breq	.+118    	; 0xbb4 <_ZN4arch11fetchBufferEv+0x71a>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	7f c0       	rjmp	.+254    	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
				} else {
					// JUMP ON CONDITION: 0x 1000 XX RR | Immediate | Instruction - Address
					avrecord->pc += 3;
					if (
							( (seg==0) && (*reg3 == instruction[1]) ) // JMP-EQ
								||
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	89 f4       	brne	.+34     	; 0xb68 <_ZN4arch11fetchBufferEv+0x6ce>
							( (seg==1) && (*reg3 != instruction[1]) ) // JMP-NE
     b46:	c6 01       	movw	r24, r12
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	82 58       	subi	r24, 0x82	; 130
     b56:	9e 4f       	sbci	r25, 0xFE	; 254
     b58:	fc 01       	movw	r30, r24
     b5a:	e2 0f       	add	r30, r18
     b5c:	f3 1f       	adc	r31, r19
     b5e:	84 81       	ldd	r24, Z+4	; 0x04
     b60:	28 12       	cpse	r2, r24
     b62:	28 c0       	rjmp	.+80     	; 0xbb4 <_ZN4arch11fetchBufferEv+0x71a>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	6c c0       	rjmp	.+216    	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
					avrecord->pc += 3;
					if (
							( (seg==0) && (*reg3 == instruction[1]) ) // JMP-EQ
								||
							( (seg==1) && (*reg3 != instruction[1]) ) // JMP-NE
								||
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	89 f4       	brne	.+34     	; 0xb8e <_ZN4arch11fetchBufferEv+0x6f4>
							( (seg==2) && (*reg3 < instruction[1]) ) // JMP-LT
     b6c:	c6 01       	movw	r24, r12
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	82 58       	subi	r24, 0x82	; 130
     b7c:	9e 4f       	sbci	r25, 0xFE	; 254
     b7e:	fc 01       	movw	r30, r24
     b80:	e2 0f       	add	r30, r18
     b82:	f3 1f       	adc	r31, r19
     b84:	84 81       	ldd	r24, Z+4	; 0x04
     b86:	82 15       	cp	r24, r2
     b88:	a8 f0       	brcs	.+42     	; 0xbb4 <_ZN4arch11fetchBufferEv+0x71a>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	59 c0       	rjmp	.+178    	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
							( (seg==0) && (*reg3 == instruction[1]) ) // JMP-EQ
								||
							( (seg==1) && (*reg3 != instruction[1]) ) // JMP-NE
								||
							( (seg==2) && (*reg3 < instruction[1]) ) // JMP-LT
								||
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	09 f0       	breq	.+2      	; 0xb94 <_ZN4arch11fetchBufferEv+0x6fa>
     b92:	51 c0       	rjmp	.+162    	; 0xc36 <_ZN4arch11fetchBufferEv+0x79c>
							( (seg==3) && (*reg3 > instruction[1]) ) // JMP-GT
     b94:	c6 01       	movw	r24, r12
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	82 58       	subi	r24, 0x82	; 130
     ba4:	9e 4f       	sbci	r25, 0xFE	; 254
     ba6:	fc 01       	movw	r30, r24
     ba8:	e2 0f       	add	r30, r18
     baa:	f3 1f       	adc	r31, r19
     bac:	84 81       	ldd	r24, Z+4	; 0x04
     bae:	28 16       	cp	r2, r24
     bb0:	08 f0       	brcs	.+2      	; 0xbb4 <_ZN4arch11fetchBufferEv+0x71a>
     bb2:	43 c0       	rjmp	.+134    	; 0xc3a <_ZN4arch11fetchBufferEv+0x7a0>
     bb4:	19 82       	std	Y+1, r1	; 0x01
     bb6:	ae 01       	movw	r20, r28
     bb8:	4f 5f       	subi	r20, 0xFF	; 255
     bba:	5f 4f       	sbci	r21, 0xFF	; 255
     bbc:	69 85       	ldd	r22, Y+9	; 0x09
     bbe:	83 2d       	mov	r24, r3
     bc0:	23 db       	rcall	.-2490   	; 0x208 <_ZN4arch17EEPAddressHelper_EhhRKb>
																			){
						avrecord->pc = arch::getAddress(avrecord->program,instruction[2]);
     bc2:	f6 01       	movw	r30, r12
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	e2 58       	subi	r30, 0x82	; 130
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	92 83       	std	Z+2, r25	; 0x02
     bd6:	81 83       	std	Z+1, r24	; 0x01
						if (instruction[2] == 0){
     bd8:	e9 84       	ldd	r14, Y+9	; 0x09
     bda:	e1 10       	cpse	r14, r1
     bdc:	30 c0       	rjmp	.+96     	; 0xc3e <_ZN4arch11fetchBufferEv+0x7a4>
							arch::programHeaderInterpreter();
     bde:	e0 db       	rcall	.-2112   	; 0x3a0 <_ZN4arch24programHeaderInterpreterEv>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	2e c0       	rjmp	.+92     	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
				}
			}
		}
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
     be4:	f7 01       	movw	r30, r14
     be6:	ee 0f       	add	r30, r30
     be8:	ff 1f       	adc	r31, r31
     bea:	ee 0d       	add	r30, r14
     bec:	ff 1d       	adc	r31, r15
     bee:	e1 54       	subi	r30, 0x41	; 65
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	85 2d       	mov	r24, r5
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	98 2f       	mov	r25, r24
     bf8:	88 27       	eor	r24, r24
     bfa:	82 0d       	add	r24, r2
     bfc:	91 1d       	adc	r25, r1
     bfe:	9f 77       	andi	r25, 0x7F	; 127
     c00:	91 83       	std	Z+1, r25	; 0x01
     c02:	80 83       	st	Z, r24
		avrecord->pc += 2;
     c04:	f6 01       	movw	r30, r12
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	e2 58       	subi	r30, 0x82	; 130
     c14:	fe 4f       	sbci	r31, 0xFE	; 254
     c16:	92 82       	std	Z+2, r9	; 0x02
     c18:	81 82       	std	Z+1, r8	; 0x01
	}
	return false;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	11 c0       	rjmp	.+34     	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
	/* Interpreter which deals with exactly one task, returns true if idle ( = the buffer is full) */
	/* feeds the state.light.buffer */
	
	if ( (state.light.write+1) % BUFFERSIZE == state.light.read ){
		// no space to buffer new instructions
		return true;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	0f c0       	rjmp	.+30     	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
	} else {
		//SET-LI: 0b0 L LL LLLL | LLLL LLLL;
		buffer->light = ((instruction[0]<<8) + instruction[1]) & ~(1<<15);
		avrecord->pc += 2;
	}
	return false;
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	0d c0       	rjmp	.+26     	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	0b c0       	rjmp	.+22     	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	09 c0       	rjmp	.+18     	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	07 c0       	rjmp	.+14     	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <_ZN4arch11fetchBufferEv+0x7a6>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
}
     c40:	29 96       	adiw	r28, 0x09	; 9
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	bf 90       	pop	r11
     c5e:	af 90       	pop	r10
     c60:	9f 90       	pop	r9
     c62:	8f 90       	pop	r8
     c64:	7f 90       	pop	r7
     c66:	6f 90       	pop	r6
     c68:	5f 90       	pop	r5
     c6a:	4f 90       	pop	r4
     c6c:	3f 90       	pop	r3
     c6e:	2f 90       	pop	r2
     c70:	08 95       	ret

00000c72 <_ZN4arch10controllerEv>:

void arch::controller()	{// for user
     c72:	cf 93       	push	r28
     c74:	c4 e1       	ldi	r28, 0x14	; 20
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <_ZN4arch10controllerEv+0xa>
     c78:	c1 50       	subi	r28, 0x01	; 1
	/* central control sequence of light controller */
	
	constexpr uint8_t max = 20; // <<<< change if this could be good, should be defined on top of this file
	for (uint8_t i = 0; (i<max) && (!arch::fetchBuffer()) ; ++i);
     c7a:	19 f0       	breq	.+6      	; 0xc82 <_ZN4arch10controllerEv+0x10>
     c7c:	0e dc       	rcall	.-2020   	; 0x49a <_ZN4arch11fetchBufferEv>
     c7e:	88 23       	and	r24, r24
     c80:	d9 f3       	breq	.-10     	; 0xc78 <_ZN4arch10controllerEv+0x6>
	
	if (state.light.bufferWait){
     c82:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <__data_end+0x73>
     c86:	88 23       	and	r24, r24
     c88:	19 f0       	breq	.+6      	; 0xc90 <_ZN4arch10controllerEv+0x1e>
		state.light.bufferWait = false;
     c8a:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <__data_end+0x73>
		arch::readBuffer();
     c8e:	7f da       	rcall	.-2818   	; 0x18e <_ZN4arch10readBufferEv>
	}
}
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <_ZN11ItemManager4initEPFvvE>:
void input::disableEvents(){
	for(uint8_t button = 0; button <5; ++button){
		inputEvents.buttonEvent[button][BUTTON_UP].enable = false;
		inputEvents.buttonEvent[button][BUTTON_DOWN].enable = false;
	}
}
     c94:	fc 01       	movw	r30, r24
     c96:	73 83       	std	Z+3, r23	; 0x03
     c98:	62 83       	std	Z+2, r22	; 0x02
     c9a:	15 82       	std	Z+5, r1	; 0x05
     c9c:	14 82       	std	Z+4, r1	; 0x04
     c9e:	08 95       	ret

00000ca0 <_ZN11ItemManager8finalizeEv>:
     ca0:	fc 01       	movw	r30, r24
     ca2:	13 82       	std	Z+3, r1	; 0x03
     ca4:	12 82       	std	Z+2, r1	; 0x02
     ca6:	15 82       	std	Z+5, r1	; 0x05
     ca8:	14 82       	std	Z+4, r1	; 0x04
     caa:	08 95       	ret

00000cac <_ZN21ArcProgramItemManager4initEPFvvES1_b>:
     cac:	fc 01       	movw	r30, r24
     cae:	73 83       	std	Z+3, r23	; 0x03
     cb0:	62 83       	std	Z+2, r22	; 0x02
     cb2:	15 82       	std	Z+5, r1	; 0x05
     cb4:	14 82       	std	Z+4, r1	; 0x04
     cb6:	57 83       	std	Z+7, r21	; 0x07
     cb8:	46 83       	std	Z+6, r20	; 0x06
     cba:	20 87       	std	Z+8, r18	; 0x08
     cbc:	08 95       	ret

00000cbe <_ZN21ArcProgramItemManagerD1Ev>:
     cbe:	08 95       	ret

00000cc0 <_ZN21ArcProgramItemManagerD0Ev>:
     cc0:	08 95       	ret

00000cc2 <_ZN21ArcProgramItemManager24runItemProcedureInternalEv>:
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	ec 01       	movw	r28, r24
     cc8:	98 85       	ldd	r25, Y+8	; 0x08
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	89 27       	eor	r24, r25
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	89 0f       	add	r24, r25
     cd2:	b8 db       	rcall	.-2192   	; 0x444 <_ZN4arch10runProgramEh>
     cd4:	ee 81       	ldd	r30, Y+6	; 0x06
     cd6:	ff 81       	ldd	r31, Y+7	; 0x07
     cd8:	30 97       	sbiw	r30, 0x00	; 0
     cda:	09 f0       	breq	.+2      	; 0xcde <_ZN21ArcProgramItemManager24runItemProcedureInternalEv+0x1c>
     cdc:	09 95       	icall
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <_ZN21ArcProgramItemManager7getSizeEv>:
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	1f 92       	push	r1
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	8c 01       	movw	r16, r24
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	ae 01       	movw	r20, r28
     cfa:	4f 5f       	subi	r20, 0xFF	; 255
     cfc:	5f 4f       	sbci	r21, 0xFF	; 255
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	82 da       	rcall	.-2812   	; 0x208 <_ZN4arch17EEPAddressHelper_EhhRKb>
     d04:	f8 01       	movw	r30, r16
     d06:	90 85       	ldd	r25, Z+8	; 0x08
     d08:	89 0f       	add	r24, r25
     d0a:	0f 90       	pop	r0
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <_ZN21ArcProgramItemManager20getItemLabelInternalEPc>:
     d16:	fc 01       	movw	r30, r24
     d18:	80 85       	ldd	r24, Z+8	; 0x08
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	98 27       	eor	r25, r24
     d1e:	84 81       	ldd	r24, Z+4	; 0x04
     d20:	89 0f       	add	r24, r25
     d22:	f8 ca       	rjmp	.-2576   	; 0x314 <_ZN4arch14getProgramNameEhPc>
     d24:	08 95       	ret

00000d26 <_ZN5input11enableEventEhPFvvE>:
     d26:	8a 30       	cpi	r24, 0x0A	; 10
     d28:	f0 f4       	brcc	.+60     	; 0xd66 <_ZN5input11enableEventEhPFvvE+0x40>
     d2a:	28 2f       	mov	r18, r24
     d2c:	26 95       	lsr	r18
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	e8 2f       	mov	r30, r24
     d32:	e1 70       	andi	r30, 0x01	; 1
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	cf 01       	movw	r24, r30
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	e8 0f       	add	r30, r24
     d3e:	f9 1f       	adc	r31, r25
     d40:	c9 01       	movw	r24, r18
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	dc 01       	movw	r26, r24
     d48:	a2 0f       	add	r26, r18
     d4a:	b3 1f       	adc	r27, r19
     d4c:	aa 0f       	add	r26, r26
     d4e:	bb 1f       	adc	r27, r27
     d50:	ae 0f       	add	r26, r30
     d52:	bf 1f       	adc	r27, r31
     d54:	a6 59       	subi	r26, 0x96	; 150
     d56:	bd 4f       	sbci	r27, 0xFD	; 253
     d58:	41 e0       	ldi	r20, 0x01	; 1
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	4c 93       	st	X, r20
     d5e:	12 97       	sbiw	r26, 0x02	; 2
     d60:	fd 01       	movw	r30, r26
     d62:	71 83       	std	Z+1, r23	; 0x01
     d64:	60 83       	st	Z, r22
     d66:	08 95       	ret

00000d68 <_ZN12ItemSelector13enableButtonsEv>:
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     d68:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_ZN12ItemSelector11button_okayE>
     d6c:	88 0f       	add	r24, r24
	inline void guiInputEnableAll(void (*proc)()){ /* set all button events to the same handler function */
		for(uint8_t i = 0; i<10; ++i) enableEvent(i,proc);
	}
	
	inline void disableEvent(uint8_t buttonEvent){ /* disable a single button event */
		inputEvents.buttonEvent[buttonEvent/2][buttonEvent%2].enable = false;
     d6e:	28 2f       	mov	r18, r24
     d70:	26 95       	lsr	r18
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	f9 01       	movw	r30, r18
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	e2 0f       	add	r30, r18
     d7c:	f3 1f       	adc	r31, r19
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	e6 59       	subi	r30, 0x96	; 150
     d84:	fd 4f       	sbci	r31, 0xFD	; 253
     d86:	12 82       	std	Z+2, r1	; 0x02
}

void ItemSelector::enableButtons(){
	using namespace input;
	disableEvent(makeEvent(button_okay,BUTTON_UP));
	enableEvent(makeEvent(button_okay,BUTTON_DOWN),ItemSelector::okay_down);
     d88:	67 e4       	ldi	r22, 0x47	; 71
     d8a:	77 e0       	ldi	r23, 0x07	; 7
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	cb df       	rcall	.-106    	; 0xd26 <_ZN5input11enableEventEhPFvvE>
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     d90:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_ZN12ItemSelector11button_nextE>
     d94:	88 0f       	add	r24, r24
	inline void guiInputEnableAll(void (*proc)()){ /* set all button events to the same handler function */
		for(uint8_t i = 0; i<10; ++i) enableEvent(i,proc);
	}
	
	inline void disableEvent(uint8_t buttonEvent){ /* disable a single button event */
		inputEvents.buttonEvent[buttonEvent/2][buttonEvent%2].enable = false;
     d96:	28 2f       	mov	r18, r24
     d98:	26 95       	lsr	r18
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	f9 01       	movw	r30, r18
     d9e:	ee 0f       	add	r30, r30
     da0:	ff 1f       	adc	r31, r31
     da2:	e2 0f       	add	r30, r18
     da4:	f3 1f       	adc	r31, r19
     da6:	ee 0f       	add	r30, r30
     da8:	ff 1f       	adc	r31, r31
     daa:	e6 59       	subi	r30, 0x96	; 150
     dac:	fd 4f       	sbci	r31, 0xFD	; 253
     dae:	12 82       	std	Z+2, r1	; 0x02
	disableEvent(makeEvent(button_next,BUTTON_UP));
	enableEvent(makeEvent(button_next,BUTTON_DOWN),ItemSelector::next);
     db0:	69 e3       	ldi	r22, 0x39	; 57
     db2:	78 e0       	ldi	r23, 0x08	; 8
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	b7 df       	rcall	.-146    	; 0xd26 <_ZN5input11enableEventEhPFvvE>
	if (button_prev != NO_BUTTON){
     db8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_ZN12ItemSelector11button_prevE>
     dbc:	8f 3f       	cpi	r24, 0xFF	; 255
     dbe:	91 f0       	breq	.+36     	; 0xde4 <_ZN12ItemSelector13enableButtonsEv+0x7c>
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     dc0:	88 0f       	add	r24, r24
	inline void guiInputEnableAll(void (*proc)()){ /* set all button events to the same handler function */
		for(uint8_t i = 0; i<10; ++i) enableEvent(i,proc);
	}
	
	inline void disableEvent(uint8_t buttonEvent){ /* disable a single button event */
		inputEvents.buttonEvent[buttonEvent/2][buttonEvent%2].enable = false;
     dc2:	28 2f       	mov	r18, r24
     dc4:	26 95       	lsr	r18
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	f9 01       	movw	r30, r18
     dca:	ee 0f       	add	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	e2 0f       	add	r30, r18
     dd0:	f3 1f       	adc	r31, r19
     dd2:	ee 0f       	add	r30, r30
     dd4:	ff 1f       	adc	r31, r31
     dd6:	e6 59       	subi	r30, 0x96	; 150
     dd8:	fd 4f       	sbci	r31, 0xFD	; 253
     dda:	12 82       	std	Z+2, r1	; 0x02
		disableEvent(makeEvent(button_prev,BUTTON_UP));
		enableEvent(makeEvent(button_prev,BUTTON_DOWN),ItemSelector::previous);
     ddc:	60 e4       	ldi	r22, 0x40	; 64
     dde:	78 e0       	ldi	r23, 0x08	; 8
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	a1 cf       	rjmp	.-190    	; 0xd26 <_ZN5input11enableEventEhPFvvE>
     de4:	08 95       	ret

00000de6 <_ZN12ItemSelector14setButtonsFreeEv>:
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     de6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_ZN12ItemSelector11button_okayE>
     dea:	88 0f       	add	r24, r24
	inline void guiInputEnableAll(void (*proc)()){ /* set all button events to the same handler function */
		for(uint8_t i = 0; i<10; ++i) enableEvent(i,proc);
	}
	
	inline void disableEvent(uint8_t buttonEvent){ /* disable a single button event */
		inputEvents.buttonEvent[buttonEvent/2][buttonEvent%2].enable = false;
     dec:	28 2f       	mov	r18, r24
     dee:	26 95       	lsr	r18
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	f9 01       	movw	r30, r18
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	e2 0f       	add	r30, r18
     dfa:	f3 1f       	adc	r31, r19
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	e6 59       	subi	r30, 0x96	; 150
     e02:	fd 4f       	sbci	r31, 0xFD	; 253
     e04:	15 82       	std	Z+5, r1	; 0x05
     e06:	c9 01       	movw	r24, r18
     e08:	fc 01       	movw	r30, r24
     e0a:	ee 0f       	add	r30, r30
     e0c:	ff 1f       	adc	r31, r31
     e0e:	e8 0f       	add	r30, r24
     e10:	f9 1f       	adc	r31, r25
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	e6 59       	subi	r30, 0x96	; 150
     e18:	fd 4f       	sbci	r31, 0xFD	; 253
     e1a:	12 82       	std	Z+2, r1	; 0x02
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     e1c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_ZN12ItemSelector11button_nextE>
     e20:	88 0f       	add	r24, r24
	inline void guiInputEnableAll(void (*proc)()){ /* set all button events to the same handler function */
		for(uint8_t i = 0; i<10; ++i) enableEvent(i,proc);
	}
	
	inline void disableEvent(uint8_t buttonEvent){ /* disable a single button event */
		inputEvents.buttonEvent[buttonEvent/2][buttonEvent%2].enable = false;
     e22:	28 2f       	mov	r18, r24
     e24:	26 95       	lsr	r18
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	f9 01       	movw	r30, r18
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	e2 0f       	add	r30, r18
     e30:	f3 1f       	adc	r31, r19
     e32:	ee 0f       	add	r30, r30
     e34:	ff 1f       	adc	r31, r31
     e36:	e6 59       	subi	r30, 0x96	; 150
     e38:	fd 4f       	sbci	r31, 0xFD	; 253
     e3a:	15 82       	std	Z+5, r1	; 0x05
     e3c:	c9 01       	movw	r24, r18
     e3e:	fc 01       	movw	r30, r24
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	e8 0f       	add	r30, r24
     e46:	f9 1f       	adc	r31, r25
     e48:	ee 0f       	add	r30, r30
     e4a:	ff 1f       	adc	r31, r31
     e4c:	e6 59       	subi	r30, 0x96	; 150
     e4e:	fd 4f       	sbci	r31, 0xFD	; 253
     e50:	12 82       	std	Z+2, r1	; 0x02
	using namespace input;
	disableEvent(makeEvent(button_okay,BUTTON_DOWN));
	disableEvent(makeEvent(button_okay,BUTTON_UP));
	disableEvent(makeEvent(button_next,BUTTON_DOWN));
	disableEvent(makeEvent(button_next,BUTTON_UP));
	if (button_prev != NO_BUTTON){
     e52:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_ZN12ItemSelector11button_prevE>
     e56:	8f 3f       	cpi	r24, 0xFF	; 255
     e58:	c9 f0       	breq	.+50     	; 0xe8c <_ZN12ItemSelector14setButtonsFreeEv+0xa6>
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     e5a:	88 0f       	add	r24, r24
	inline void guiInputEnableAll(void (*proc)()){ /* set all button events to the same handler function */
		for(uint8_t i = 0; i<10; ++i) enableEvent(i,proc);
	}
	
	inline void disableEvent(uint8_t buttonEvent){ /* disable a single button event */
		inputEvents.buttonEvent[buttonEvent/2][buttonEvent%2].enable = false;
     e5c:	28 2f       	mov	r18, r24
     e5e:	26 95       	lsr	r18
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	f9 01       	movw	r30, r18
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	e2 0f       	add	r30, r18
     e6a:	f3 1f       	adc	r31, r19
     e6c:	ee 0f       	add	r30, r30
     e6e:	ff 1f       	adc	r31, r31
     e70:	e6 59       	subi	r30, 0x96	; 150
     e72:	fd 4f       	sbci	r31, 0xFD	; 253
     e74:	15 82       	std	Z+5, r1	; 0x05
     e76:	c9 01       	movw	r24, r18
     e78:	fc 01       	movw	r30, r24
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	e8 0f       	add	r30, r24
     e80:	f9 1f       	adc	r31, r25
     e82:	ee 0f       	add	r30, r30
     e84:	ff 1f       	adc	r31, r31
     e86:	e6 59       	subi	r30, 0x96	; 150
     e88:	fd 4f       	sbci	r31, 0xFD	; 253
     e8a:	12 82       	std	Z+2, r1	; 0x02
     e8c:	08 95       	ret

00000e8e <_ZN12ItemSelector9okay_downEv>:
}


void ItemSelector::okay_down(){
	using namespace input;
	setButtonsFree();
     e8e:	ab df       	rcall	.-170    	; 0xde6 <_ZN12ItemSelector14setButtonsFreeEv>
	led::printDotsOnly(0xFF);
     e90:	8f ef       	ldi	r24, 0xFF	; 255
     e92:	c9 d3       	rcall	.+1938   	; 0x1626 <_ZN3led13printDotsOnlyEh>
	hardware::delay(300);
     e94:	8c e2       	ldi	r24, 0x2C	; 44
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	5a d1       	rcall	.+692    	; 0x114e <_ZN8hardware5delayEj>
		gchange = 0;
		//disableEvents();###
	}
	
	inline int8_t makeEvent(uint8_t button, bool up_or_down){ /* return the int code of a given event */
		return 2*button+up_or_down;
     e9a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_ZN12ItemSelector11button_okayE>
	enableEvent(makeEvent(button_okay,BUTTON_UP),okay_up);
     e9e:	6e e9       	ldi	r22, 0x9E	; 158
     ea0:	78 e0       	ldi	r23, 0x08	; 8
     ea2:	88 0f       	add	r24, r24
     ea4:	40 cf       	rjmp	.-384    	; 0xd26 <_ZN5input11enableEventEhPFvvE>
     ea6:	08 95       	ret

00000ea8 <_ZN12ItemSelector14initialisationEhhhP11ItemManager>:
		disableEvent(makeEvent(button_prev,BUTTON_UP));
	}
}

void ItemSelector::initialisation(uint8_t button_okay, uint8_t button_next, uint8_t button_prev, ItemManager* itemManager){
	ItemSelector::button_okay = button_okay;
     ea8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZN12ItemSelector11button_okayE>
	ItemSelector::button_next = button_next;
     eac:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_ZN12ItemSelector11button_nextE>
	ItemSelector::button_prev = button_prev;
     eb0:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_ZN12ItemSelector11button_prevE>
     eb4:	08 95       	ret

00000eb6 <_ZN11ItemManager18runCancelProcedureEv>:
}




bool ItemManager::runCancelProcedure(){
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
		inline uint16_t mod(){ /* return the amount of items (the mod to iterate) */
			return canCancel() + getSize();
		}
		
		inline bool canCancel(){ /* return true if there is a cancel procedure as item */
			return cancelProcedure!=nullptr;
     eba:	dc 01       	movw	r26, r24
     ebc:	12 96       	adiw	r26, 0x02	; 2
     ebe:	ed 91       	ld	r30, X+
     ec0:	fc 91       	ld	r31, X
     ec2:	13 97       	sbiw	r26, 0x03	; 3
	if (canCancel()){
     ec4:	30 97       	sbiw	r30, 0x00	; 0
     ec6:	59 f0       	breq	.+22     	; 0xede <_ZN11ItemManager18runCancelProcedureEv+0x28>
     ec8:	ec 01       	movw	r28, r24
		cancelProcedure();
     eca:	09 95       	icall
		finalize();
     ecc:	e8 81       	ld	r30, Y
     ece:	f9 81       	ldd	r31, Y+1	; 0x01
     ed0:	00 84       	ldd	r0, Z+8	; 0x08
     ed2:	f1 85       	ldd	r31, Z+9	; 0x09
     ed4:	e0 2d       	mov	r30, r0
     ed6:	ce 01       	movw	r24, r28
     ed8:	09 95       	icall
		return true;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <_ZN11ItemManager18runCancelProcedureEv+0x2a>
		} else {
		return false;
     ede:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <_ZN11ItemManagerppEv>:

ItemManager& ItemManager::operator++(){
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	ec 01       	movw	r28, r24
	position = (position + 1) % mod();
     ef4:	ec 80       	ldd	r14, Y+4	; 0x04
     ef6:	fd 80       	ldd	r15, Y+5	; 0x05
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	e8 1a       	sub	r14, r24
     efc:	f8 0a       	sbc	r15, r24
     efe:	01 e0       	ldi	r16, 0x01	; 1
     f00:	10 e0       	ldi	r17, 0x00	; 0
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	89 2b       	or	r24, r25
     f08:	11 f4       	brne	.+4      	; 0xf0e <_ZN11ItemManagerppEv+0x28>
     f0a:	00 e0       	ldi	r16, 0x00	; 0
     f0c:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		void (*cancelProcedure)(); /* pointer to void cancel function */
		
		inline uint16_t mod(){ /* return the amount of items (the mod to iterate) */
			return canCancel() + getSize();
     f0e:	e8 81       	ld	r30, Y
     f10:	f9 81       	ldd	r31, Y+1	; 0x01
     f12:	04 80       	ldd	r0, Z+4	; 0x04
     f14:	f5 81       	ldd	r31, Z+5	; 0x05
     f16:	e0 2d       	mov	r30, r0
     f18:	ce 01       	movw	r24, r28
     f1a:	09 95       	icall
     f1c:	b8 01       	movw	r22, r16
     f1e:	68 0f       	add	r22, r24
     f20:	71 1d       	adc	r23, r1
     f22:	c7 01       	movw	r24, r14
     f24:	2c d6       	rcall	.+3160   	; 0x1b7e <__udivmodhi4>
     f26:	9d 83       	std	Y+5, r25	; 0x05
     f28:	8c 83       	std	Y+4, r24	; 0x04
	return *this;
}
     f2a:	ce 01       	movw	r24, r28
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	08 95       	ret

00000f3a <_ZN11ItemManagermmEv>:

ItemManager& ItemManager::operator--(){
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	ec 01       	movw	r28, r24
	position = (position - 1) % mod();
     f48:	ec 80       	ldd	r14, Y+4	; 0x04
     f4a:	fd 80       	ldd	r15, Y+5	; 0x05
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	e8 1a       	sub	r14, r24
     f50:	f1 08       	sbc	r15, r1
		}
		
		inline bool canCancel(){ /* return true if there is a cancel procedure as item */
			return cancelProcedure!=nullptr;
     f52:	01 e0       	ldi	r16, 0x01	; 1
     f54:	10 e0       	ldi	r17, 0x00	; 0
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	9b 81       	ldd	r25, Y+3	; 0x03
     f5a:	89 2b       	or	r24, r25
     f5c:	11 f4       	brne	.+4      	; 0xf62 <_ZN11ItemManagermmEv+0x28>
     f5e:	00 e0       	ldi	r16, 0x00	; 0
     f60:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		void (*cancelProcedure)(); /* pointer to void cancel function */
		
		inline uint16_t mod(){ /* return the amount of items (the mod to iterate) */
			return canCancel() + getSize();
     f62:	e8 81       	ld	r30, Y
     f64:	f9 81       	ldd	r31, Y+1	; 0x01
     f66:	04 80       	ldd	r0, Z+4	; 0x04
     f68:	f5 81       	ldd	r31, Z+5	; 0x05
     f6a:	e0 2d       	mov	r30, r0
     f6c:	ce 01       	movw	r24, r28
     f6e:	09 95       	icall
     f70:	b8 01       	movw	r22, r16
     f72:	68 0f       	add	r22, r24
     f74:	71 1d       	adc	r23, r1
     f76:	c7 01       	movw	r24, r14
     f78:	02 d6       	rcall	.+3076   	; 0x1b7e <__udivmodhi4>
     f7a:	9d 83       	std	Y+5, r25	; 0x05
     f7c:	8c 83       	std	Y+4, r24	; 0x04
	return *this;
}
     f7e:	ce 01       	movw	r24, r28
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	08 95       	ret

00000f8e <_ZN11ItemManager12getItemLabelEPc>:

void ItemManager::getItemLabel(char* string_8_bytes){
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	27 97       	sbiw	r28, 0x07	; 7
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	8c 01       	movw	r16, r24
     fb0:	6b 01       	movw	r12, r22

class ItemManager {
	
	private:
		inline bool onCancelItem(){ /* return wehther the selected item is the cancel item*/
			return (canCancel()) && (static_cast<uint8_t> (position) == mod()-1);
     fb2:	dc 01       	movw	r26, r24
     fb4:	12 96       	adiw	r26, 0x02	; 2
     fb6:	8d 91       	ld	r24, X+
     fb8:	9c 91       	ld	r25, X
     fba:	13 97       	sbiw	r26, 0x03	; 3
     fbc:	89 2b       	or	r24, r25
     fbe:	11 f1       	breq	.+68     	; 0x1004 <_ZN11ItemManager12getItemLabelEPc+0x76>
     fc0:	14 96       	adiw	r26, 0x04	; 4
     fc2:	ed 90       	ld	r14, X+
     fc4:	fc 90       	ld	r15, X
     fc6:	15 97       	sbiw	r26, 0x05	; 5
     fc8:	ff 24       	eor	r15, r15
		}
		
		void (*cancelProcedure)(); /* pointer to void cancel function */
		
		inline uint16_t mod(){ /* return the amount of items (the mod to iterate) */
			return canCancel() + getSize();
     fca:	ed 91       	ld	r30, X+
     fcc:	fc 91       	ld	r31, X
     fce:	04 80       	ldd	r0, Z+4	; 0x04
     fd0:	f5 81       	ldd	r31, Z+5	; 0x05
     fd2:	e0 2d       	mov	r30, r0
     fd4:	c8 01       	movw	r24, r16
     fd6:	09 95       	icall
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
	if (onCancelItem()){
     fdc:	e2 16       	cp	r14, r18
     fde:	f3 06       	cpc	r15, r19
     fe0:	89 f4       	brne	.+34     	; 0x1004 <_ZN11ItemManager12getItemLabelEPc+0x76>
		//## make a Cancel
		char mystring[] = "CANCEL";
     fe2:	87 e0       	ldi	r24, 0x07	; 7
     fe4:	e3 e0       	ldi	r30, 0x03	; 3
     fe6:	f1 e0       	ldi	r31, 0x01	; 1
     fe8:	de 01       	movw	r26, r28
     fea:	11 96       	adiw	r26, 0x01	; 1
     fec:	01 90       	ld	r0, Z+
     fee:	0d 92       	st	X+, r0
     ff0:	8a 95       	dec	r24
     ff2:	e1 f7       	brne	.-8      	; 0xfec <_ZN11ItemManager12getItemLabelEPc+0x5e>
		hardware::copyString(string_8_bytes,mystring,8,false);
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	48 e0       	ldi	r20, 0x08	; 8
     ff8:	be 01       	movw	r22, r28
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	c6 01       	movw	r24, r12
    1000:	c8 d0       	rcall	.+400    	; 0x1192 <_ZN8hardware10copyStringEPcPKchb>
    1002:	09 c0       	rjmp	.+18     	; 0x1016 <_ZN11ItemManager12getItemLabelEPc+0x88>
		} else {
		getItemLabelInternal(string_8_bytes);
    1004:	d8 01       	movw	r26, r16
    1006:	ed 91       	ld	r30, X+
    1008:	fc 91       	ld	r31, X
    100a:	01 90       	ld	r0, Z+
    100c:	f0 81       	ld	r31, Z
    100e:	e0 2d       	mov	r30, r0
    1010:	b6 01       	movw	r22, r12
    1012:	c8 01       	movw	r24, r16
    1014:	09 95       	icall
	}
}
    1016:	27 96       	adiw	r28, 0x07	; 7
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	08 95       	ret

00001034 <_ZN12ItemSelector9printItemEv>:
void ItemSelector::previous(){
	--(*itemManager);
	printItem();
}

void ItemSelector::printItem(){
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	29 97       	sbiw	r28, 0x09	; 9
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
	char label[9];
	itemManager->getItemLabel(label);
    1048:	be 01       	movw	r22, r28
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN12ItemSelector11itemManagerE>
    1052:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <_ZN12ItemSelector11itemManagerE+0x1>
    1056:	9b df       	rcall	.-202    	; 0xf8e <_ZN11ItemManager12getItemLabelEPc>
	label[8] = '\0';
    1058:	19 86       	std	Y+9, r1	; 0x09
	led::LFPrintString(label);// this function should also exist with an secound parameter to set the string legth!!!#####
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	da d2       	rcall	.+1460   	; 0x1614 <_ZN3led13LFPrintStringEPKc>
}
    1060:	29 96       	adiw	r28, 0x09	; 9
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <_ZN12ItemSelector4nextEv>:
	finalize();
}


void ItemSelector::next(){
	++(*itemManager);
    1072:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN12ItemSelector11itemManagerE>
    1076:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <_ZN12ItemSelector11itemManagerE+0x1>
    107a:	35 df       	rcall	.-406    	; 0xee6 <_ZN11ItemManagerppEv>
	printItem();
    107c:	db cf       	rjmp	.-74     	; 0x1034 <_ZN12ItemSelector9printItemEv>
    107e:	08 95       	ret

00001080 <_ZN12ItemSelector8previousEv>:
}

void ItemSelector::previous(){
	--(*itemManager);
    1080:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN12ItemSelector11itemManagerE>
    1084:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <_ZN12ItemSelector11itemManagerE+0x1>
    1088:	58 df       	rcall	.-336    	; 0xf3a <_ZN11ItemManagermmEv>
	printItem();
    108a:	d4 cf       	rjmp	.-88     	; 0x1034 <_ZN12ItemSelector9printItemEv>
    108c:	08 95       	ret

0000108e <_ZN12ItemSelector3runEv>:
	itemManager->getItemLabel(label);
	label[8] = '\0';
	led::LFPrintString(label);// this function should also exist with an secound parameter to set the string legth!!!#####
}

bool ItemSelector::run(){
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
	// no items:
	if (itemManager->isEmpty()) return false; //<<<<<< throw error
    1092:	a0 91 68 02 	lds	r26, 0x0268	; 0x800268 <_ZN12ItemSelector11itemManagerE>
    1096:	b0 91 69 02 	lds	r27, 0x0269	; 0x800269 <_ZN12ItemSelector11itemManagerE+0x1>
		}
		
		inline bool canCancel(){ /* return true if there is a cancel procedure as item */
			return cancelProcedure!=nullptr;
    109a:	c1 e0       	ldi	r28, 0x01	; 1
    109c:	d0 e0       	ldi	r29, 0x00	; 0
    109e:	12 96       	adiw	r26, 0x02	; 2
    10a0:	8d 91       	ld	r24, X+
    10a2:	9c 91       	ld	r25, X
    10a4:	13 97       	sbiw	r26, 0x03	; 3
    10a6:	89 2b       	or	r24, r25
    10a8:	11 f4       	brne	.+4      	; 0x10ae <_ZN12ItemSelector3runEv+0x20>
    10aa:	c0 e0       	ldi	r28, 0x00	; 0
    10ac:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		void (*cancelProcedure)(); /* pointer to void cancel function */
		
		inline uint16_t mod(){ /* return the amount of items (the mod to iterate) */
			return canCancel() + getSize();
    10ae:	ed 91       	ld	r30, X+
    10b0:	fc 91       	ld	r31, X
    10b2:	11 97       	sbiw	r26, 0x01	; 1
    10b4:	04 80       	ldd	r0, Z+4	; 0x04
    10b6:	f5 81       	ldd	r31, Z+5	; 0x05
    10b8:	e0 2d       	mov	r30, r0
    10ba:	cd 01       	movw	r24, r26
    10bc:	09 95       	icall
    10be:	c8 0f       	add	r28, r24
    10c0:	d1 1d       	adc	r29, r1
    10c2:	cd 2b       	or	r28, r29
    10c4:	51 f0       	breq	.+20     	; 0x10da <_ZN12ItemSelector3runEv+0x4c>
	enableButtons();
    10c6:	50 de       	rcall	.-864    	; 0xd68 <_ZN12ItemSelector13enableButtonsEv>
	led::LFPrintString("SELECT");
    10c8:	8a e0       	ldi	r24, 0x0A	; 10
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	a3 d2       	rcall	.+1350   	; 0x1614 <_ZN3led13LFPrintStringEPKc>
	hardware::delay(1000);
    10ce:	88 ee       	ldi	r24, 0xE8	; 232
    10d0:	93 e0       	ldi	r25, 0x03	; 3
    10d2:	3d d0       	rcall	.+122    	; 0x114e <_ZN8hardware5delayEj>
	printItem();
    10d4:	af df       	rcall	.-162    	; 0x1034 <_ZN12ItemSelector9printItemEv>
	return true;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <_ZN12ItemSelector3runEv+0x4e>
	led::LFPrintString(label);// this function should also exist with an secound parameter to set the string legth!!!#####
}

bool ItemSelector::run(){
	// no items:
	if (itemManager->isEmpty()) return false; //<<<<<< throw error
    10da:	80 e0       	ldi	r24, 0x00	; 0
	enableButtons();
	led::LFPrintString("SELECT");
	hardware::delay(1000);
	printItem();
	return true;
}
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <_ZN11ItemManager16runItemProcedureEv>:
		} else {
		getItemLabelInternal(string_8_bytes);
	}
}

void ItemManager::runItemProcedure(){
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	ec 01       	movw	r28, r24

class ItemManager {
	
	private:
		inline bool onCancelItem(){ /* return wehther the selected item is the cancel item*/
			return (canCancel()) && (static_cast<uint8_t> (position) == mod()-1);
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	9b 81       	ldd	r25, Y+3	; 0x03
    10f0:	89 2b       	or	r24, r25
    10f2:	89 f0       	breq	.+34     	; 0x1116 <__stack+0x17>
    10f4:	0c 81       	ldd	r16, Y+4	; 0x04
    10f6:	1d 81       	ldd	r17, Y+5	; 0x05
    10f8:	11 27       	eor	r17, r17
		}
		
		void (*cancelProcedure)(); /* pointer to void cancel function */
		
		inline uint16_t mod(){ /* return the amount of items (the mod to iterate) */
			return canCancel() + getSize();
    10fa:	e8 81       	ld	r30, Y
    10fc:	f9 81       	ldd	r31, Y+1	; 0x01
    10fe:	04 80       	ldd	r0, Z+4	; 0x04
    1100:	f5 81       	ldd	r31, Z+5	; 0x05
    1102:	e0 2d       	mov	r30, r0
    1104:	ce 01       	movw	r24, r28
    1106:	09 95       	icall
    1108:	90 e0       	ldi	r25, 0x00	; 0
	if (onCancelItem()){
    110a:	08 17       	cp	r16, r24
    110c:	19 07       	cpc	r17, r25
    110e:	19 f4       	brne	.+6      	; 0x1116 <__stack+0x17>
		runCancelProcedure();
    1110:	ce 01       	movw	r24, r28
    1112:	d1 de       	rcall	.-606    	; 0xeb6 <_ZN11ItemManager18runCancelProcedureEv>
    1114:	07 c0       	rjmp	.+14     	; 0x1124 <__stack+0x25>
		} else {
		runItemProcedureInternal();
    1116:	e8 81       	ld	r30, Y
    1118:	f9 81       	ldd	r31, Y+1	; 0x01
    111a:	02 80       	ldd	r0, Z+2	; 0x02
    111c:	f3 81       	ldd	r31, Z+3	; 0x03
    111e:	e0 2d       	mov	r30, r0
    1120:	ce 01       	movw	r24, r28
    1122:	09 95       	icall
	}
	finalize();
    1124:	e8 81       	ld	r30, Y
    1126:	f9 81       	ldd	r31, Y+1	; 0x01
    1128:	00 84       	ldd	r0, Z+8	; 0x08
    112a:	f1 85       	ldd	r31, Z+9	; 0x09
    112c:	e0 2d       	mov	r30, r0
    112e:	ce 01       	movw	r24, r28
    1130:	09 95       	icall
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	08 95       	ret

0000113c <_ZN12ItemSelector7okay_upEv>:
	hardware::delay(300);
	enableEvent(makeEvent(button_okay,BUTTON_UP),okay_up);
}

void ItemSelector::okay_up(){
	led::printDotsOnly(0x00);
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	73 d2       	rcall	.+1254   	; 0x1626 <_ZN3led13printDotsOnlyEh>
	itemManager->runItemProcedure();
    1140:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN12ItemSelector11itemManagerE>
    1144:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <_ZN12ItemSelector11itemManagerE+0x1>
    1148:	cc df       	rcall	.-104    	; 0x10e2 <_ZN11ItemManager16runItemProcedureEv>
	void setButtonsFree(); /* disable the NEXT, PREVIOUS & OKAY methods associated to the buttons (for internal use only) */
	
	void initialisation(uint8_t button_okay, uint8_t button_next, uint8_t button_prev, ItemManager* itemManager); /* init variables, the ItemManager* is just a pointer to an ItemManager. You have to care about construction, destruction yourself */
	
	inline void finalize(){ /* disable button events (for using programmer) */
		setButtonsFree();
    114a:	4d ce       	rjmp	.-870    	; 0xde6 <_ZN12ItemSelector14setButtonsFreeEv>
    114c:	08 95       	ret

0000114e <_ZN8hardware5delayEj>:
#include "f_ledline.h"

void hardware::delay(uint16_t ms){
	/* busy delay in ms */
	// <<<<<< refactor and check the function of delay
	for(uint16_t i = 0; i<ms; i+=10){
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	69 f0       	breq	.+26     	; 0x116c <_ZN8hardware5delayEj+0x1e>
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1156:	ef e3       	ldi	r30, 0x3F	; 63
    1158:	fc e9       	ldi	r31, 0x9C	; 156
    115a:	31 97       	sbiw	r30, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <_ZN8hardware5delayEj+0xc>
    115e:	00 c0       	rjmp	.+0      	; 0x1160 <_ZN8hardware5delayEj+0x12>
    1160:	00 00       	nop
    1162:	26 5f       	subi	r18, 0xF6	; 246
    1164:	3f 4f       	sbci	r19, 0xFF	; 255
    1166:	28 17       	cp	r18, r24
    1168:	39 07       	cpc	r19, r25
    116a:	a8 f3       	brcs	.-22     	; 0x1156 <_ZN8hardware5delayEj+0x8>
    116c:	08 95       	ret

0000116e <_ZN8hardware9isEEPNullEj>:
		_delay_ms(10);
	}
}

bool hardware::isEEPNull(uint16_t address){
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
	/* return whether an eeprom address is out of range (NULL), throw an error if a non standard NULL address (!=EEPNULL) was used */
	if (	(address >= (1<<12))		&&		(address!=EEPNULL)		){
    1174:	90 51       	subi	r25, 0x10	; 16
    1176:	8f 3f       	cpi	r24, 0xFF	; 255
    1178:	9f 4e       	sbci	r25, 0xEF	; 239
    117a:	18 f4       	brcc	.+6      	; 0x1182 <_ZN8hardware9isEEPNullEj+0x14>
		led::error(0);
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	c6 d2       	rcall	.+1420   	; 0x170e <_ZN3led5errorEj>
	}
	return (address >= (1<<12));
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	c1 15       	cp	r28, r1
    1186:	d0 41       	sbci	r29, 0x10	; 16
    1188:	08 f4       	brcc	.+2      	; 0x118c <_ZN8hardware9isEEPNullEj+0x1e>
    118a:	80 e0       	ldi	r24, 0x00	; 0
}
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <_ZN8hardware10copyStringEPcPKchb>:

void hardware::copyString(char* destination, const char* source, uint8_t count, bool nullTerminated){
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	8c 01       	movw	r16, r24
	uint8_t index = 0;
	while(index < count){
    119c:	44 23       	and	r20, r20
    119e:	b1 f0       	breq	.+44     	; 0x11cc <_ZN8hardware10copyStringEPcPKchb+0x3a>
		destination[index] = source[index];
    11a0:	fb 01       	movw	r30, r22
    11a2:	80 81       	ld	r24, Z
    11a4:	f8 01       	movw	r30, r16
    11a6:	80 83       	st	Z, r24
		if (source[index] =='\0') return;
    11a8:	fb 01       	movw	r30, r22
    11aa:	80 81       	ld	r24, Z
    11ac:	88 23       	and	r24, r24
    11ae:	a1 f0       	breq	.+40     	; 0x11d8 <_ZN8hardware10copyStringEPcPKchb+0x46>
    11b0:	d8 01       	movw	r26, r16
    11b2:	11 96       	adiw	r26, 0x01	; 1
    11b4:	31 96       	adiw	r30, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <_ZN8hardware10copyStringEPcPKchb+0x34>
    11ba:	ef 01       	movw	r28, r30
}

void hardware::copyString(char* destination, const char* source, uint8_t count, bool nullTerminated){
	uint8_t index = 0;
	while(index < count){
		destination[index] = source[index];
    11bc:	31 91       	ld	r19, Z+
    11be:	3d 93       	st	X+, r19
		if (source[index] =='\0') return;
    11c0:	38 81       	ld	r19, Y
    11c2:	33 23       	and	r19, r19
    11c4:	49 f0       	breq	.+18     	; 0x11d8 <_ZN8hardware10copyStringEPcPKchb+0x46>
		++index;
    11c6:	9f 5f       	subi	r25, 0xFF	; 255
	return (address >= (1<<12));
}

void hardware::copyString(char* destination, const char* source, uint8_t count, bool nullTerminated){
	uint8_t index = 0;
	while(index < count){
    11c8:	94 13       	cpse	r25, r20
    11ca:	f7 cf       	rjmp	.-18     	; 0x11ba <_ZN8hardware10copyStringEPcPKchb+0x28>
		destination[index] = source[index];
		if (source[index] =='\0') return;
		++index;
	}
	if (nullTerminated) {destination[index] = '\0';}
    11cc:	22 23       	and	r18, r18
    11ce:	21 f0       	breq	.+8      	; 0x11d8 <_ZN8hardware10copyStringEPcPKchb+0x46>
    11d0:	f8 01       	movw	r30, r16
    11d2:	e4 0f       	add	r30, r20
    11d4:	f1 1d       	adc	r31, r1
    11d6:	10 82       	st	Z, r1
}
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	08 95       	ret

000011e2 <_ZN3led5latchEv>:
	led::printSign(sign);
}

void led::printSignDottableExplicit(char sign, const bool dot){
	led::pushByteVisible(  (led::signCode(sign) & (~led::DOT))    |    (dot * led::DOT)  );
}
    11e2:	9b b3       	in	r25, 0x1b	; 27
    11e4:	84 e0       	ldi	r24, 0x04	; 4
    11e6:	98 27       	eor	r25, r24
    11e8:	9b bb       	out	0x1b, r25	; 27
    11ea:	9b b3       	in	r25, 0x1b	; 27
    11ec:	89 27       	eor	r24, r25
    11ee:	8b bb       	out	0x1b, r24	; 27
    11f0:	08 95       	ret

000011f2 <_ZN3led5clockEv>:
    11f2:	9b b3       	in	r25, 0x1b	; 27
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	98 27       	eor	r25, r24
    11f8:	9b bb       	out	0x1b, r25	; 27
    11fa:	9b b3       	in	r25, 0x1b	; 27
    11fc:	89 27       	eor	r24, r25
    11fe:	8b bb       	out	0x1b, r24	; 27
    1200:	08 95       	ret

00001202 <_ZN3led13pushBitInternEb>:
    1202:	9b b3       	in	r25, 0x1b	; 27
    1204:	9e 7f       	andi	r25, 0xFE	; 254
    1206:	89 2b       	or	r24, r25
    1208:	8b bb       	out	0x1b, r24	; 27
    120a:	f3 cf       	rjmp	.-26     	; 0x11f2 <_ZN3led5clockEv>
    120c:	08 95       	ret

0000120e <_ZN3led7pushBitEb>:
    120e:	af 92       	push	r10
    1210:	bf 92       	push	r11
    1212:	cf 92       	push	r12
    1214:	df 92       	push	r13
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	e8 2f       	mov	r30, r24
    1220:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <_ZL9_LEDLINE_>
    1224:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <_ZL9_LEDLINE_+0x1>
    1228:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <_ZL9_LEDLINE_+0x2>
    122c:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <_ZL9_LEDLINE_+0x3>
    1230:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <_ZL9_LEDLINE_+0x4>
    1234:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <_ZL9_LEDLINE_+0x5>
    1238:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZL9_LEDLINE_+0x6>
    123c:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <_ZL9_LEDLINE_+0x7>
    1240:	01 e0       	ldi	r16, 0x01	; 1
    1242:	94 d5       	rcall	.+2856   	; 0x1d6c <__ashldi3>
    1244:	a2 2e       	mov	r10, r18
    1246:	b3 2e       	mov	r11, r19
    1248:	c4 2e       	mov	r12, r20
    124a:	d5 2e       	mov	r13, r21
    124c:	e6 2e       	mov	r14, r22
    124e:	f7 2e       	mov	r15, r23
    1250:	08 2f       	mov	r16, r24
    1252:	19 2f       	mov	r17, r25
    1254:	2e 2f       	mov	r18, r30
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	ba d5       	rcall	.+2932   	; 0x1dda <__adddi3>
    1266:	20 93 88 02 	sts	0x0288, r18	; 0x800288 <_ZL9_LEDLINE_>
    126a:	30 93 89 02 	sts	0x0289, r19	; 0x800289 <_ZL9_LEDLINE_+0x1>
    126e:	40 93 8a 02 	sts	0x028A, r20	; 0x80028a <_ZL9_LEDLINE_+0x2>
    1272:	50 93 8b 02 	sts	0x028B, r21	; 0x80028b <_ZL9_LEDLINE_+0x3>
    1276:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <_ZL9_LEDLINE_+0x4>
    127a:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <_ZL9_LEDLINE_+0x5>
    127e:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <_ZL9_LEDLINE_+0x6>
    1282:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <_ZL9_LEDLINE_+0x7>
    1286:	8e 2f       	mov	r24, r30
    1288:	bc df       	rcall	.-136    	; 0x1202 <_ZN3led13pushBitInternEb>
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	df 90       	pop	r13
    1294:	cf 90       	pop	r12
    1296:	bf 90       	pop	r11
    1298:	af 90       	pop	r10
    129a:	08 95       	ret

0000129c <_ZN3led8pushByteEh>:
    129c:	af 92       	push	r10
    129e:	bf 92       	push	r11
    12a0:	cf 92       	push	r12
    12a2:	df 92       	push	r13
    12a4:	ef 92       	push	r14
    12a6:	ff 92       	push	r15
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	e8 2f       	mov	r30, r24
    12b2:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <_ZL9_LEDLINE_>
    12b6:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <_ZL9_LEDLINE_+0x1>
    12ba:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <_ZL9_LEDLINE_+0x2>
    12be:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <_ZL9_LEDLINE_+0x3>
    12c2:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <_ZL9_LEDLINE_+0x4>
    12c6:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <_ZL9_LEDLINE_+0x5>
    12ca:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZL9_LEDLINE_+0x6>
    12ce:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <_ZL9_LEDLINE_+0x7>
    12d2:	08 e0       	ldi	r16, 0x08	; 8
    12d4:	4b d5       	rcall	.+2710   	; 0x1d6c <__ashldi3>
    12d6:	a2 2e       	mov	r10, r18
    12d8:	b3 2e       	mov	r11, r19
    12da:	c4 2e       	mov	r12, r20
    12dc:	d5 2e       	mov	r13, r21
    12de:	e6 2e       	mov	r14, r22
    12e0:	f7 2e       	mov	r15, r23
    12e2:	08 2f       	mov	r16, r24
    12e4:	19 2f       	mov	r17, r25
    12e6:	2e 2f       	mov	r18, r30
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	71 d5       	rcall	.+2786   	; 0x1dda <__adddi3>
    12f8:	20 93 88 02 	sts	0x0288, r18	; 0x800288 <_ZL9_LEDLINE_>
    12fc:	30 93 89 02 	sts	0x0289, r19	; 0x800289 <_ZL9_LEDLINE_+0x1>
    1300:	40 93 8a 02 	sts	0x028A, r20	; 0x80028a <_ZL9_LEDLINE_+0x2>
    1304:	50 93 8b 02 	sts	0x028B, r21	; 0x80028b <_ZL9_LEDLINE_+0x3>
    1308:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <_ZL9_LEDLINE_+0x4>
    130c:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <_ZL9_LEDLINE_+0x5>
    1310:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <_ZL9_LEDLINE_+0x6>
    1314:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <_ZL9_LEDLINE_+0x7>
    1318:	c7 e0       	ldi	r28, 0x07	; 7
    131a:	d0 e0       	ldi	r29, 0x00	; 0
    131c:	0e 2f       	mov	r16, r30
    131e:	10 e0       	ldi	r17, 0x00	; 0
    1320:	c8 01       	movw	r24, r16
    1322:	0c 2e       	mov	r0, r28
    1324:	02 c0       	rjmp	.+4      	; 0x132a <_ZN3led8pushByteEh+0x8e>
    1326:	95 95       	asr	r25
    1328:	87 95       	ror	r24
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <_ZN3led8pushByteEh+0x8a>
    132e:	81 70       	andi	r24, 0x01	; 1
    1330:	68 df       	rcall	.-304    	; 0x1202 <_ZN3led13pushBitInternEb>
    1332:	21 97       	sbiw	r28, 0x01	; 1
    1334:	a8 f7       	brcc	.-22     	; 0x1320 <_ZN3led8pushByteEh+0x84>
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	df 90       	pop	r13
    1344:	cf 90       	pop	r12
    1346:	bf 90       	pop	r11
    1348:	af 90       	pop	r10
    134a:	08 95       	ret

0000134c <_ZN3led6push64Ey>:
    134c:	7f 92       	push	r7
    134e:	8f 92       	push	r8
    1350:	9f 92       	push	r9
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	82 2e       	mov	r8, r18
    1368:	93 2e       	mov	r9, r19
    136a:	a4 2e       	mov	r10, r20
    136c:	b5 2e       	mov	r11, r21
    136e:	c6 2e       	mov	r12, r22
    1370:	d7 2e       	mov	r13, r23
    1372:	08 2f       	mov	r16, r24
    1374:	19 2f       	mov	r17, r25
    1376:	20 93 88 02 	sts	0x0288, r18	; 0x800288 <_ZL9_LEDLINE_>
    137a:	30 93 89 02 	sts	0x0289, r19	; 0x800289 <_ZL9_LEDLINE_+0x1>
    137e:	40 93 8a 02 	sts	0x028A, r20	; 0x80028a <_ZL9_LEDLINE_+0x2>
    1382:	50 93 8b 02 	sts	0x028B, r21	; 0x80028b <_ZL9_LEDLINE_+0x3>
    1386:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <_ZL9_LEDLINE_+0x4>
    138a:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <_ZL9_LEDLINE_+0x5>
    138e:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <_ZL9_LEDLINE_+0x6>
    1392:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <_ZL9_LEDLINE_+0x7>
    1396:	cf e3       	ldi	r28, 0x3F	; 63
    1398:	d0 e0       	ldi	r29, 0x00	; 0
    139a:	ee 24       	eor	r14, r14
    139c:	e3 94       	inc	r14
    139e:	f1 2c       	mov	r15, r1
    13a0:	77 24       	eor	r7, r7
    13a2:	73 94       	inc	r7
    13a4:	f7 01       	movw	r30, r14
    13a6:	0c 2e       	mov	r0, r28
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <_ZN3led6push64Ey+0x62>
    13aa:	ee 0f       	add	r30, r30
    13ac:	ff 1f       	adc	r31, r31
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <_ZN3led6push64Ey+0x5e>
    13b2:	9f 2f       	mov	r25, r31
    13b4:	99 0f       	add	r25, r25
    13b6:	99 0b       	sbc	r25, r25
    13b8:	28 2d       	mov	r18, r8
    13ba:	2e 23       	and	r18, r30
    13bc:	39 2d       	mov	r19, r9
    13be:	3f 23       	and	r19, r31
    13c0:	49 2f       	mov	r20, r25
    13c2:	4a 21       	and	r20, r10
    13c4:	59 2f       	mov	r21, r25
    13c6:	5b 21       	and	r21, r11
    13c8:	69 2f       	mov	r22, r25
    13ca:	6c 21       	and	r22, r12
    13cc:	79 2f       	mov	r23, r25
    13ce:	7d 21       	and	r23, r13
    13d0:	e7 2d       	mov	r30, r7
    13d2:	89 2f       	mov	r24, r25
    13d4:	80 23       	and	r24, r16
    13d6:	91 23       	and	r25, r17
    13d8:	a0 e0       	ldi	r26, 0x00	; 0
    13da:	08 d5       	rcall	.+2576   	; 0x1dec <__cmpdi2_s8>
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <_ZN3led6push64Ey+0x94>
    13de:	e0 e0       	ldi	r30, 0x00	; 0
    13e0:	8e 2f       	mov	r24, r30
    13e2:	0f df       	rcall	.-482    	; 0x1202 <_ZN3led13pushBitInternEb>
    13e4:	21 97       	sbiw	r28, 0x01	; 1
    13e6:	f0 f6       	brcc	.-68     	; 0x13a4 <_ZN3led6push64Ey+0x58>
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	ff 90       	pop	r15
    13f2:	ef 90       	pop	r14
    13f4:	df 90       	pop	r13
    13f6:	cf 90       	pop	r12
    13f8:	bf 90       	pop	r11
    13fa:	af 90       	pop	r10
    13fc:	9f 90       	pop	r9
    13fe:	8f 90       	pop	r8
    1400:	7f 90       	pop	r7
    1402:	08 95       	ret

00001404 <_ZN3led10pushMemoryEv>:
    1404:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <_ZL9_LEDLINE_>
    1408:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <_ZL9_LEDLINE_+0x1>
    140c:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <_ZL9_LEDLINE_+0x2>
    1410:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <_ZL9_LEDLINE_+0x3>
    1414:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <_ZL9_LEDLINE_+0x4>
    1418:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <_ZL9_LEDLINE_+0x5>
    141c:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZL9_LEDLINE_+0x6>
    1420:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <_ZL9_LEDLINE_+0x7>
    1424:	93 df       	rcall	.-218    	; 0x134c <_ZN3led6push64Ey>
    1426:	dd ce       	rjmp	.-582    	; 0x11e2 <_ZN3led5latchEv>
    1428:	08 95       	ret

0000142a <_ZN3led15pushByteVisibleEh>:
    142a:	38 df       	rcall	.-400    	; 0x129c <_ZN3led8pushByteEh>
    142c:	da ce       	rjmp	.-588    	; 0x11e2 <_ZN3led5latchEv>
    142e:	08 95       	ret

00001430 <_ZN3led8isDottedEc>:
    1430:	88 1f       	adc	r24, r24
    1432:	88 27       	eor	r24, r24
    1434:	88 1f       	adc	r24, r24
    1436:	08 95       	ret

00001438 <_ZN3led6setDotEPcb>:
    1438:	fc 01       	movw	r30, r24
    143a:	90 81       	ld	r25, Z
    143c:	60 fb       	bst	r22, 0
    143e:	97 f9       	bld	r25, 7
    1440:	90 83       	st	Z, r25
    1442:	08 95       	ret

00001444 <_ZN3led8signCodeEc>:
    1444:	e8 2f       	mov	r30, r24
    1446:	ef 77       	andi	r30, 0x7F	; 127
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	ea 30       	cpi	r30, 0x0A	; 10
    144c:	f1 05       	cpc	r31, r1
    144e:	a1 f0       	breq	.+40     	; 0x1478 <_ZN3led8signCodeEc+0x34>
    1450:	e1 32       	cpi	r30, 0x21	; 33
    1452:	f1 05       	cpc	r31, r1
    1454:	18 f4       	brcc	.+6      	; 0x145c <_ZN3led8signCodeEc+0x18>
    1456:	80 78       	andi	r24, 0x80	; 128
    1458:	80 95       	com	r24
    145a:	08 95       	ret
    145c:	e1 36       	cpi	r30, 0x61	; 97
    145e:	f1 05       	cpc	r31, r1
    1460:	28 f0       	brcs	.+10     	; 0x146c <_ZN3led8signCodeEc+0x28>
    1462:	eb 37       	cpi	r30, 0x7B	; 123
    1464:	f1 05       	cpc	r31, r1
    1466:	08 f0       	brcs	.+2      	; 0x146a <_ZN3led8signCodeEc+0x26>
    1468:	36 96       	adiw	r30, 0x06	; 6
    146a:	b0 97       	sbiw	r30, 0x20	; 32
    146c:	e5 59       	subi	r30, 0x95	; 149
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	e4 91       	lpm	r30, Z
    1472:	80 78       	andi	r24, 0x80	; 128
    1474:	8e 27       	eor	r24, r30
    1476:	08 95       	ret
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	08 95       	ret

0000147c <_ZN3led9printSignEc>:
    147c:	e3 df       	rcall	.-58     	; 0x1444 <_ZN3led8signCodeEc>
    147e:	d5 cf       	rjmp	.-86     	; 0x142a <_ZN3led15pushByteVisibleEh>
    1480:	08 95       	ret

00001482 <_ZN3led10printDigitEh>:
    1482:	8a 30       	cpi	r24, 0x0A	; 10
    1484:	18 f0       	brcs	.+6      	; 0x148c <_ZN3led10printDigitEh+0xa>
    1486:	80 e4       	ldi	r24, 0x40	; 64
    1488:	f9 cf       	rjmp	.-14     	; 0x147c <_ZN3led9printSignEc>
    148a:	08 95       	ret
    148c:	80 5d       	subi	r24, 0xD0	; 208
    148e:	f6 cf       	rjmp	.-20     	; 0x147c <_ZN3led9printSignEc>
    1490:	08 95       	ret

00001492 <_ZN3led8printIntExb>:
    1492:	2f 92       	push	r2
    1494:	3f 92       	push	r3
    1496:	4f 92       	push	r4
    1498:	5f 92       	push	r5
    149a:	6f 92       	push	r6
    149c:	7f 92       	push	r7
    149e:	8f 92       	push	r8
    14a0:	9f 92       	push	r9
    14a2:	af 92       	push	r10
    14a4:	bf 92       	push	r11
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	d2 2f       	mov	r29, r18
    14b8:	c3 2f       	mov	r28, r19
    14ba:	24 2e       	mov	r2, r20
    14bc:	35 2e       	mov	r3, r21
    14be:	46 2e       	mov	r4, r22
    14c0:	57 2e       	mov	r5, r23
    14c2:	68 2e       	mov	r6, r24
    14c4:	79 2e       	mov	r7, r25
    14c6:	0f e3       	ldi	r16, 0x3F	; 63
    14c8:	6c d4       	rcall	.+2264   	; 0x1da2 <__lshrdi3>
    14ca:	92 2e       	mov	r9, r18
    14cc:	82 2e       	mov	r8, r18
    14ce:	22 23       	and	r18, r18
    14d0:	11 f0       	breq	.+4      	; 0x14d6 <_ZN3led8printIntExb+0x44>
    14d2:	8d e2       	ldi	r24, 0x2D	; 45
    14d4:	d3 df       	rcall	.-90     	; 0x147c <_ZN3led9printSignEc>
    14d6:	0f 2e       	mov	r0, r31
    14d8:	fa e0       	ldi	r31, 0x0A	; 10
    14da:	af 2e       	mov	r10, r31
    14dc:	f0 2d       	mov	r31, r0
    14de:	b1 2c       	mov	r11, r1
    14e0:	c1 2c       	mov	r12, r1
    14e2:	d1 2c       	mov	r13, r1
    14e4:	e1 2c       	mov	r14, r1
    14e6:	f1 2c       	mov	r15, r1
    14e8:	00 e0       	ldi	r16, 0x00	; 0
    14ea:	10 e0       	ldi	r17, 0x00	; 0
    14ec:	2d 2f       	mov	r18, r29
    14ee:	3c 2f       	mov	r19, r28
    14f0:	42 2d       	mov	r20, r2
    14f2:	53 2d       	mov	r21, r3
    14f4:	64 2d       	mov	r22, r4
    14f6:	75 2d       	mov	r23, r5
    14f8:	86 2d       	mov	r24, r6
    14fa:	97 2d       	mov	r25, r7
    14fc:	69 d3       	rcall	.+1746   	; 0x1bd0 <__divdi3>
    14fe:	42 2f       	mov	r20, r18
    1500:	53 2f       	mov	r21, r19
    1502:	41 15       	cp	r20, r1
    1504:	51 05       	cpc	r21, r1
    1506:	a9 f0       	breq	.+42     	; 0x1532 <_ZN3led8printIntExb+0xa0>
    1508:	ba 01       	movw	r22, r20
    150a:	77 23       	and	r23, r23
    150c:	24 f4       	brge	.+8      	; 0x1516 <_ZN3led8printIntExb+0x84>
    150e:	66 27       	eor	r22, r22
    1510:	77 27       	eor	r23, r23
    1512:	64 1b       	sub	r22, r20
    1514:	75 0b       	sbc	r23, r21
    1516:	97 2f       	mov	r25, r23
    1518:	99 0f       	add	r25, r25
    151a:	99 0b       	sbc	r25, r25
    151c:	00 e0       	ldi	r16, 0x00	; 0
    151e:	26 2f       	mov	r18, r22
    1520:	37 2f       	mov	r19, r23
    1522:	49 2f       	mov	r20, r25
    1524:	59 2f       	mov	r21, r25
    1526:	69 2f       	mov	r22, r25
    1528:	79 2f       	mov	r23, r25
    152a:	89 2f       	mov	r24, r25
    152c:	b2 df       	rcall	.-156    	; 0x1492 <_ZN3led8printIntExb>
    152e:	89 2c       	mov	r8, r9
    1530:	88 0e       	add	r8, r24
    1532:	4d 2f       	mov	r20, r29
    1534:	5c 2f       	mov	r21, r28
    1536:	ca 01       	movw	r24, r20
    1538:	99 23       	and	r25, r25
    153a:	24 f4       	brge	.+8      	; 0x1544 <_ZN3led8printIntExb+0xb2>
    153c:	88 27       	eor	r24, r24
    153e:	99 27       	eor	r25, r25
    1540:	84 1b       	sub	r24, r20
    1542:	95 0b       	sbc	r25, r21
    1544:	6a e0       	ldi	r22, 0x0A	; 10
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	2e d3       	rcall	.+1628   	; 0x1ba6 <__divmodhi4>
    154a:	9b df       	rcall	.-202    	; 0x1482 <_ZN3led10printDigitEh>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	88 0d       	add	r24, r8
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	bf 90       	pop	r11
    1562:	af 90       	pop	r10
    1564:	9f 90       	pop	r9
    1566:	8f 90       	pop	r8
    1568:	7f 90       	pop	r7
    156a:	6f 90       	pop	r6
    156c:	5f 90       	pop	r5
    156e:	4f 90       	pop	r4
    1570:	3f 90       	pop	r3
    1572:	2f 90       	pop	r2
    1574:	08 95       	ret

00001576 <_ZN3led17printSignDottableEcb>:
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	1f 92       	push	r1
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	ce 01       	movw	r24, r28
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	58 df       	rcall	.-336    	; 0x1438 <_ZN3led6setDotEPcb>
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	78 df       	rcall	.-272    	; 0x147c <_ZN3led9printSignEc>
    158c:	0f 90       	pop	r0
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	08 95       	ret

00001594 <_ZN3led11printStringEPKc>:

void led::printString(const char * const string){
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	fc 01       	movw	r30, r24
	uint8_t i {0};
	while (string[i]!='\0'){
    159c:	80 81       	ld	r24, Z
    159e:	88 23       	and	r24, r24
    15a0:	51 f0       	breq	.+20     	; 0x15b6 <_ZN3led11printStringEPKc+0x22>
    15a2:	8f 01       	movw	r16, r30
    15a4:	c0 e0       	ldi	r28, 0x00	; 0
		led::printSign(string[i]);
    15a6:	6a df       	rcall	.-300    	; 0x147c <_ZN3led9printSignEc>
		++i;
    15a8:	cf 5f       	subi	r28, 0xFF	; 255
	led::pushByteVisible(  (led::signCode(sign) & (~led::DOT))    |    (dot * led::DOT)  );
}

void led::printString(const char * const string){
	uint8_t i {0};
	while (string[i]!='\0'){
    15aa:	f8 01       	movw	r30, r16
    15ac:	ec 0f       	add	r30, r28
    15ae:	f1 1d       	adc	r31, r1
    15b0:	80 81       	ld	r24, Z
    15b2:	81 11       	cpse	r24, r1
    15b4:	f8 cf       	rjmp	.-16     	; 0x15a6 <_ZN3led11printStringEPKc+0x12>
		led::printSign(string[i]);
		++i;
	}
}
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	08 95       	ret

000015be <_ZN3led5clearEv>:

void led::clear(){
    15be:	cf 93       	push	r28
	for(uint8_t i = 0; i<LINELENGTH; ++i){
    15c0:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_ZL10LINELENGTH>
    15c4:	88 23       	and	r24, r24
    15c6:	41 f0       	breq	.+16     	; 0x15d8 <_ZN3led5clearEv+0x1a>
    15c8:	c0 e0       	ldi	r28, 0x00	; 0
		led::pushByte(0);
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	67 de       	rcall	.-818    	; 0x129c <_ZN3led8pushByteEh>
		++i;
	}
}

void led::clear(){
	for(uint8_t i = 0; i<LINELENGTH; ++i){
    15ce:	cf 5f       	subi	r28, 0xFF	; 255
    15d0:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <_ZL10LINELENGTH>
    15d4:	c8 17       	cp	r28, r24
    15d6:	c8 f3       	brcs	.-14     	; 0x15ca <_ZN3led5clearEv+0xc>
		led::pushByte(0);
	}
	led::latch();
    15d8:	04 de       	rcall	.-1016   	; 0x11e2 <_ZN3led5latchEv>
}
    15da:	cf 91       	pop	r28
    15dc:	08 95       	ret

000015de <_ZN3led4initEh>:
									//  58		59	60		61	62		63	64		65	66		67	68
									//	[		\	]		^	_		`	{		|	}		~	[127]
										0x36, 0x43, 0x6C, 0x0E, 0x20, 0x08, 0x27, 0x5A, 0x2D, 0x75, 0x0F};


void led::init(const uint8_t lineLength){
    15de:	cf 93       	push	r28
    15e0:	c8 2f       	mov	r28, r24
	DDRA = 0b00000111; // LATCH BIT ::: CLOCK BIT ::: DATA BIT
    15e2:	87 e0       	ldi	r24, 0x07	; 7
    15e4:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b11111000;
    15e6:	88 ef       	ldi	r24, 0xF8	; 248
    15e8:	8b bb       	out	0x1b, r24	; 27
	_LEDLINE_ = 0; // comment: is not necessary
    15ea:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_ZL9_LEDLINE_>
    15ee:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_ZL9_LEDLINE_+0x1>
    15f2:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <_ZL9_LEDLINE_+0x2>
    15f6:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_ZL9_LEDLINE_+0x3>
    15fa:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <_ZL9_LEDLINE_+0x4>
    15fe:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL9_LEDLINE_+0x5>
    1602:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <_ZL9_LEDLINE_+0x6>
    1606:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <_ZL9_LEDLINE_+0x7>
	led::clear();
    160a:	d9 df       	rcall	.-78     	; 0x15be <_ZN3led5clearEv>
	LINELENGTH = lineLength;
    160c:	c0 93 90 02 	sts	0x0290, r28	; 0x800290 <_ZL10LINELENGTH>
}
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <_ZN3led13LFPrintStringEPKc>:
		led::pushByte(0);
	}
	led::latch();
}

void led::LFPrintString(const char* const string){
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	ec 01       	movw	r28, r24
	//////////////////////////////////////////////////////////////////////////
	
	//we dont have more than one line in our controller
	// for our controller we want to be flash memory friendly and not fast so we do:
	// <<<<<<<< change this back some day
	led::clear();
    161a:	d1 df       	rcall	.-94     	; 0x15be <_ZN3led5clearEv>
	led::printString(string);
    161c:	ce 01       	movw	r24, r28
    161e:	ba df       	rcall	.-140    	; 0x1594 <_ZN3led11printStringEPKc>
}
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	08 95       	ret

00001626 <_ZN3led13printDotsOnlyEh>:

void led::printDotsOnly(const uint8_t dotCode){//<<<<<< this function isnt ready for scalable linelength, please change sometime
    1626:	9f 92       	push	r9
    1628:	af 92       	push	r10
    162a:	bf 92       	push	r11
    162c:	cf 92       	push	r12
    162e:	df 92       	push	r13
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	90 90 88 02 	lds	r9, 0x0288	; 0x800288 <_ZL9_LEDLINE_>
    1640:	a0 90 89 02 	lds	r10, 0x0289	; 0x800289 <_ZL9_LEDLINE_+0x1>
    1644:	b0 90 8a 02 	lds	r11, 0x028A	; 0x80028a <_ZL9_LEDLINE_+0x2>
    1648:	c0 90 8b 02 	lds	r12, 0x028B	; 0x80028b <_ZL9_LEDLINE_+0x3>
    164c:	d0 90 8c 02 	lds	r13, 0x028C	; 0x80028c <_ZL9_LEDLINE_+0x4>
    1650:	e0 90 8d 02 	lds	r14, 0x028D	; 0x80028d <_ZL9_LEDLINE_+0x5>
    1654:	50 91 8e 02 	lds	r21, 0x028E	; 0x80028e <_ZL9_LEDLINE_+0x6>
    1658:	f0 90 8f 02 	lds	r15, 0x028F	; 0x80028f <_ZL9_LEDLINE_+0x7>
    165c:	a7 e0       	ldi	r26, 0x07	; 7
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e0 e0       	ldi	r30, 0x00	; 0
    1662:	f0 e0       	ldi	r31, 0x00	; 0
	for (uint8_t i = 0; i<8; ++i){
		_LEDLINE_ &= ~(1<<(DOTPOSITION + 8 * i)); // make it 0
		_LEDLINE_ |= ((1<<(DOTPOSITION + 8 * i)) * !! (dotCode & (1<<i) ));
    1664:	c8 2f       	mov	r28, r24
    1666:	d0 e0       	ldi	r29, 0x00	; 0
	led::printString(string);
}

void led::printDotsOnly(const uint8_t dotCode){//<<<<<< this function isnt ready for scalable linelength, please change sometime
	for (uint8_t i = 0; i<8; ++i){
		_LEDLINE_ &= ~(1<<(DOTPOSITION + 8 * i)); // make it 0
    1668:	01 e0       	ldi	r16, 0x01	; 1
    166a:	10 e0       	ldi	r17, 0x00	; 0
		_LEDLINE_ |= ((1<<(DOTPOSITION + 8 * i)) * !! (dotCode & (1<<i) ));
    166c:	9e 01       	movw	r18, r28
    166e:	0e 2e       	mov	r0, r30
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <_ZN3led13printDotsOnlyEh+0x50>
    1672:	35 95       	asr	r19
    1674:	27 95       	ror	r18
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <_ZN3led13printDotsOnlyEh+0x4c>
    167a:	21 70       	andi	r18, 0x01	; 1
    167c:	33 27       	eor	r19, r19
    167e:	0a 2e       	mov	r0, r26
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <_ZN3led13printDotsOnlyEh+0x60>
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <_ZN3led13printDotsOnlyEh+0x5c>
    168a:	43 2f       	mov	r20, r19
    168c:	44 0f       	add	r20, r20
    168e:	44 0b       	sbc	r20, r20
	led::printString(string);
}

void led::printDotsOnly(const uint8_t dotCode){//<<<<<< this function isnt ready for scalable linelength, please change sometime
	for (uint8_t i = 0; i<8; ++i){
		_LEDLINE_ &= ~(1<<(DOTPOSITION + 8 * i)); // make it 0
    1690:	b8 01       	movw	r22, r16
    1692:	0a 2e       	mov	r0, r26
    1694:	02 c0       	rjmp	.+4      	; 0x169a <_ZN3led13printDotsOnlyEh+0x74>
    1696:	66 0f       	add	r22, r22
    1698:	77 1f       	adc	r23, r23
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <_ZN3led13printDotsOnlyEh+0x70>
    169e:	60 95       	com	r22
    16a0:	70 95       	com	r23
    16a2:	97 2f       	mov	r25, r23
    16a4:	99 0f       	add	r25, r25
    16a6:	99 0b       	sbc	r25, r25
    16a8:	96 22       	and	r9, r22
    16aa:	a7 22       	and	r10, r23
    16ac:	b9 22       	and	r11, r25
    16ae:	c9 22       	and	r12, r25
    16b0:	d9 22       	and	r13, r25
    16b2:	e9 22       	and	r14, r25
    16b4:	59 23       	and	r21, r25
    16b6:	9f 21       	and	r25, r15
		_LEDLINE_ |= ((1<<(DOTPOSITION + 8 * i)) * !! (dotCode & (1<<i) ));
    16b8:	92 2a       	or	r9, r18
    16ba:	a3 2a       	or	r10, r19
    16bc:	b4 2a       	or	r11, r20
    16be:	c4 2a       	or	r12, r20
    16c0:	d4 2a       	or	r13, r20
    16c2:	e4 2a       	or	r14, r20
    16c4:	54 2b       	or	r21, r20
    16c6:	f4 2e       	mov	r15, r20
    16c8:	f9 2a       	or	r15, r25
    16ca:	31 96       	adiw	r30, 0x01	; 1
    16cc:	18 96       	adiw	r26, 0x08	; 8
	led::clear();
	led::printString(string);
}

void led::printDotsOnly(const uint8_t dotCode){//<<<<<< this function isnt ready for scalable linelength, please change sometime
	for (uint8_t i = 0; i<8; ++i){
    16ce:	e8 30       	cpi	r30, 0x08	; 8
    16d0:	f1 05       	cpc	r31, r1
    16d2:	61 f6       	brne	.-104    	; 0x166c <_ZN3led13printDotsOnlyEh+0x46>
    16d4:	90 92 88 02 	sts	0x0288, r9	; 0x800288 <_ZL9_LEDLINE_>
    16d8:	a0 92 89 02 	sts	0x0289, r10	; 0x800289 <_ZL9_LEDLINE_+0x1>
    16dc:	b0 92 8a 02 	sts	0x028A, r11	; 0x80028a <_ZL9_LEDLINE_+0x2>
    16e0:	c0 92 8b 02 	sts	0x028B, r12	; 0x80028b <_ZL9_LEDLINE_+0x3>
    16e4:	d0 92 8c 02 	sts	0x028C, r13	; 0x80028c <_ZL9_LEDLINE_+0x4>
    16e8:	e0 92 8d 02 	sts	0x028D, r14	; 0x80028d <_ZL9_LEDLINE_+0x5>
    16ec:	50 93 8e 02 	sts	0x028E, r21	; 0x80028e <_ZL9_LEDLINE_+0x6>
    16f0:	f0 92 8f 02 	sts	0x028F, r15	; 0x80028f <_ZL9_LEDLINE_+0x7>
		_LEDLINE_ &= ~(1<<(DOTPOSITION + 8 * i)); // make it 0
		_LEDLINE_ |= ((1<<(DOTPOSITION + 8 * i)) * !! (dotCode & (1<<i) ));
	}
	pushMemory();
    16f4:	87 de       	rcall	.-754    	; 0x1404 <_ZN3led10pushMemoryEv>
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	ff 90       	pop	r15
    1700:	ef 90       	pop	r14
    1702:	df 90       	pop	r13
    1704:	cf 90       	pop	r12
    1706:	bf 90       	pop	r11
    1708:	af 90       	pop	r10
    170a:	9f 90       	pop	r9
    170c:	08 95       	ret

0000170e <_ZN3led5errorEj>:

void led::error(const uint16_t code){
    170e:	8f 92       	push	r8
    1710:	9f 92       	push	r9
    1712:	af 92       	push	r10
    1714:	bf 92       	push	r11
    1716:	cf 92       	push	r12
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	8c 01       	movw	r16, r24
	//static_assert(LINELENGTH>=4,"The ledError() needs at least 4 led elements!");  <<<<<<<< config c++11
	// one day we will put this all into a class. the assertion above should be part of the ctor <<<<<<<
	
	uint8_t SREG_temporal = SREG; // save interrupt state
    1728:	cf b7       	in	r28, 0x3f	; 63
	cli();
    172a:	f8 94       	cli
	led::clear();
    172c:	48 df       	rcall	.-368    	; 0x15be <_ZN3led5clearEv>
	led::printSign('E');
    172e:	85 e4       	ldi	r24, 0x45	; 69
    1730:	a5 de       	rcall	.-694    	; 0x147c <_ZN3led9printSignEc>
	hardware::delay(3000);
    1732:	88 eb       	ldi	r24, 0xB8	; 184
    1734:	9b e0       	ldi	r25, 0x0B	; 11
    1736:	0b dd       	rcall	.-1514   	; 0x114e <_ZN8hardware5delayEj>
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	if (code < 100) led::printDigit(0);
    1738:	04 36       	cpi	r16, 0x64	; 100
    173a:	11 05       	cpc	r17, r1
    173c:	d0 f4       	brcc	.+52     	; 0x1772 <_ZN3led5errorEj+0x64>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	a0 de       	rcall	.-704    	; 0x1482 <_ZN3led10printDigitEh>
	if (code < 10 ) led::printDigit(0);
    1742:	0a 30       	cpi	r16, 0x0A	; 10
    1744:	11 05       	cpc	r17, r1
    1746:	c8 f4       	brcc	.+50     	; 0x177a <_ZN3led5errorEj+0x6c>
    1748:	27 c0       	rjmp	.+78     	; 0x1798 <_ZN3led5errorEj+0x8a>
	led::printInt(code, false);
	hardware::delay(60000);// add some fancy blinking <<<<<<<< /// in some cases it wouldn't be useful to stop evben for 60s. make some flag for that in class later
	if (code > 99){
		while (1) {
			led::pushBitIntern(false);// this is only to avoid compiler optimization trashing this infinite loop
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	5a dd       	rcall	.-1356   	; 0x1202 <_ZN3led13pushBitInternEb>
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	if (code < 100) led::printDigit(0);
	if (code < 10 ) led::printDigit(0);
	led::printInt(code, false);
	hardware::delay(60000);// add some fancy blinking <<<<<<<< /// in some cases it wouldn't be useful to stop evben for 60s. make some flag for that in class later
	if (code > 99){
    174e:	fd cf       	rjmp	.-6      	; 0x174a <_ZN3led5errorEj+0x3c>
		while (1) {
			led::pushBitIntern(false);// this is only to avoid compiler optimization trashing this infinite loop
		}
	}
	SREG = SREG_temporal; // activate interrupts
    1750:	cf bf       	out	0x3f, r28	; 63
    1752:	44 c0       	rjmp	.+136    	; 0x17dc <_ZN3led5errorEj+0xce>
	led::printSign('E');
	hardware::delay(3000);
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	if (code < 100) led::printDigit(0);
	if (code < 10 ) led::printDigit(0);
	led::printInt(code, false);
    1754:	c8 01       	movw	r24, r16
    1756:	00 e0       	ldi	r16, 0x00	; 0
    1758:	28 2f       	mov	r18, r24
    175a:	39 2f       	mov	r19, r25
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	94 de       	rcall	.-728    	; 0x1492 <_ZN3led8printIntExb>
	hardware::delay(60000);// add some fancy blinking <<<<<<<< /// in some cases it wouldn't be useful to stop evben for 60s. make some flag for that in class later
    176a:	80 e6       	ldi	r24, 0x60	; 96
    176c:	9a ee       	ldi	r25, 0xEA	; 234
    176e:	ef dc       	rcall	.-1570   	; 0x114e <_ZN8hardware5delayEj>
    1770:	ec cf       	rjmp	.-40     	; 0x174a <_ZN3led5errorEj+0x3c>
	led::clear();
	led::printSign('E');
	hardware::delay(3000);
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	if (code < 100) led::printDigit(0);
	if (code < 10 ) led::printDigit(0);
    1772:	0a 30       	cpi	r16, 0x0A	; 10
    1774:	11 05       	cpc	r17, r1
    1776:	70 f7       	brcc	.-36     	; 0x1754 <_ZN3led5errorEj+0x46>
    1778:	20 c0       	rjmp	.+64     	; 0x17ba <_ZN3led5errorEj+0xac>
	led::printInt(code, false);
    177a:	48 01       	movw	r8, r16
    177c:	00 e0       	ldi	r16, 0x00	; 0
    177e:	28 2d       	mov	r18, r8
    1780:	39 2d       	mov	r19, r9
    1782:	40 e0       	ldi	r20, 0x00	; 0
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	81 de       	rcall	.-766    	; 0x1492 <_ZN3led8printIntExb>
	hardware::delay(60000);// add some fancy blinking <<<<<<<< /// in some cases it wouldn't be useful to stop evben for 60s. make some flag for that in class later
    1790:	80 e6       	ldi	r24, 0x60	; 96
    1792:	9a ee       	ldi	r25, 0xEA	; 234
    1794:	dc dc       	rcall	.-1608   	; 0x114e <_ZN8hardware5delayEj>
    1796:	dc cf       	rjmp	.-72     	; 0x1750 <_ZN3led5errorEj+0x42>
	led::clear();
	led::printSign('E');
	hardware::delay(3000);
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	if (code < 100) led::printDigit(0);
	if (code < 10 ) led::printDigit(0);
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	73 de       	rcall	.-794    	; 0x1482 <_ZN3led10printDigitEh>
	led::printInt(code, false);
    179c:	48 01       	movw	r8, r16
    179e:	00 e0       	ldi	r16, 0x00	; 0
    17a0:	28 2d       	mov	r18, r8
    17a2:	39 2d       	mov	r19, r9
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	70 de       	rcall	.-800    	; 0x1492 <_ZN3led8printIntExb>
	hardware::delay(60000);// add some fancy blinking <<<<<<<< /// in some cases it wouldn't be useful to stop evben for 60s. make some flag for that in class later
    17b2:	80 e6       	ldi	r24, 0x60	; 96
    17b4:	9a ee       	ldi	r25, 0xEA	; 234
    17b6:	cb dc       	rcall	.-1642   	; 0x114e <_ZN8hardware5delayEj>
    17b8:	cb cf       	rjmp	.-106    	; 0x1750 <_ZN3led5errorEj+0x42>
	led::clear();
	led::printSign('E');
	hardware::delay(3000);
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	if (code < 100) led::printDigit(0);
	if (code < 10 ) led::printDigit(0);
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	62 de       	rcall	.-828    	; 0x1482 <_ZN3led10printDigitEh>
	led::printInt(code, false);
    17be:	c8 01       	movw	r24, r16
    17c0:	00 e0       	ldi	r16, 0x00	; 0
    17c2:	28 2f       	mov	r18, r24
    17c4:	39 2f       	mov	r19, r25
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	5f de       	rcall	.-834    	; 0x1492 <_ZN3led8printIntExb>
	hardware::delay(60000);// add some fancy blinking <<<<<<<< /// in some cases it wouldn't be useful to stop evben for 60s. make some flag for that in class later
    17d4:	80 e6       	ldi	r24, 0x60	; 96
    17d6:	9a ee       	ldi	r25, 0xEA	; 234
    17d8:	ba dc       	rcall	.-1676   	; 0x114e <_ZN8hardware5delayEj>
    17da:	b7 cf       	rjmp	.-146    	; 0x174a <_ZN3led5errorEj+0x3c>
			led::pushBitIntern(false);// this is only to avoid compiler optimization trashing this infinite loop
		}
	}
	SREG = SREG_temporal; // activate interrupts
	// <<< is watchdog turned of with cli()?? what behavior do you prefer?
}
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	bf 90       	pop	r11
    17ee:	af 90       	pop	r10
    17f0:	9f 90       	pop	r9
    17f2:	8f 90       	pop	r8
    17f4:	08 95       	ret

000017f6 <_ZN4test5led_t3runEv>:
	LFPrintString("error");
}

namespace test {
	
	void led_t::run(){
    17f6:	ff 92       	push	r15
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	a3 97       	sbiw	r28, 0x23	; 35
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
		using namespace led;
		
		init(8);
    1810:	88 e0       	ldi	r24, 0x08	; 8
    1812:	e5 de       	rcall	.-566    	; 0x15de <_ZN3led4initEh>
		delay(1000);
    1814:	88 ee       	ldi	r24, 0xE8	; 232
    1816:	93 e0       	ldi	r25, 0x03	; 3
    1818:	9a dc       	rcall	.-1740   	; 0x114e <_ZN8hardware5delayEj>
		
		// pushBit nad latch
		for (uint8_t i = 0; i < 70; ++i){
    181a:	10 e0       	ldi	r17, 0x00	; 0
			pushBit(i%2);
			if (!(i%3)){
    181c:	0b ea       	ldi	r16, 0xAB	; 171
		init(8);
		delay(1000);
		
		// pushBit nad latch
		for (uint8_t i = 0; i < 70; ++i){
			pushBit(i%2);
    181e:	81 2f       	mov	r24, r17
    1820:	81 70       	andi	r24, 0x01	; 1
    1822:	f5 dc       	rcall	.-1558   	; 0x120e <_ZN3led7pushBitEb>
			if (!(i%3)){
    1824:	10 9f       	mul	r17, r16
    1826:	81 2d       	mov	r24, r1
    1828:	11 24       	eor	r1, r1
    182a:	86 95       	lsr	r24
    182c:	98 2f       	mov	r25, r24
    182e:	99 0f       	add	r25, r25
    1830:	89 0f       	add	r24, r25
    1832:	18 13       	cpse	r17, r24
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <_ZN4test5led_t3runEv+0x42>
				latch();
    1836:	d5 dc       	rcall	.-1622   	; 0x11e2 <_ZN3led5latchEv>
			};
			delay(1000);
    1838:	88 ee       	ldi	r24, 0xE8	; 232
    183a:	93 e0       	ldi	r25, 0x03	; 3
    183c:	88 dc       	rcall	.-1776   	; 0x114e <_ZN8hardware5delayEj>
		
		init(8);
		delay(1000);
		
		// pushBit nad latch
		for (uint8_t i = 0; i < 70; ++i){
    183e:	1f 5f       	subi	r17, 0xFF	; 255
    1840:	16 34       	cpi	r17, 0x46	; 70
    1842:	69 f7       	brne	.-38     	; 0x181e <_ZN4test5led_t3runEv+0x28>
				latch();
			};
			delay(1000);
		}
		
		clear();
    1844:	bc de       	rcall	.-648    	; 0x15be <_ZN3led5clearEv>
		PAUSE
    1846:	80 ed       	ldi	r24, 0xD0	; 208
    1848:	97 e0       	ldi	r25, 0x07	; 7
    184a:	81 dc       	rcall	.-1790   	; 0x114e <_ZN8hardware5delayEj>
    184c:	00 e0       	ldi	r16, 0x00	; 0
    184e:	10 e0       	ldi	r17, 0x00	; 0
		
		//pushByte and latch
		for (uint8_t i= 0; i<8; ++i)
		{
			pushByte(1<<i);
    1850:	ff 24       	eor	r15, r15
    1852:	f3 94       	inc	r15
    1854:	8f 2d       	mov	r24, r15
    1856:	00 2e       	mov	r0, r16
    1858:	01 c0       	rjmp	.+2      	; 0x185c <_ZN4test5led_t3runEv+0x66>
    185a:	88 0f       	add	r24, r24
    185c:	0a 94       	dec	r0
    185e:	ea f7       	brpl	.-6      	; 0x185a <_ZN4test5led_t3runEv+0x64>
    1860:	1d dd       	rcall	.-1478   	; 0x129c <_ZN3led8pushByteEh>
			latch();
    1862:	bf dc       	rcall	.-1666   	; 0x11e2 <_ZN3led5latchEv>
			delay(1000);
    1864:	88 ee       	ldi	r24, 0xE8	; 232
    1866:	93 e0       	ldi	r25, 0x03	; 3
    1868:	72 dc       	rcall	.-1820   	; 0x114e <_ZN8hardware5delayEj>
    186a:	0f 5f       	subi	r16, 0xFF	; 255
    186c:	1f 4f       	sbci	r17, 0xFF	; 255
		
		clear();
		PAUSE
		
		//pushByte and latch
		for (uint8_t i= 0; i<8; ++i)
    186e:	08 30       	cpi	r16, 0x08	; 8
    1870:	11 05       	cpc	r17, r1
    1872:	81 f7       	brne	.-32     	; 0x1854 <_ZN4test5led_t3runEv+0x5e>
		{
			pushByte(1<<i);
			latch();
			delay(1000);
		}
		clear();
    1874:	a4 de       	rcall	.-696    	; 0x15be <_ZN3led5clearEv>
		PAUSE
    1876:	80 ed       	ldi	r24, 0xD0	; 208
    1878:	97 e0       	ldi	r25, 0x07	; 7
    187a:	69 dc       	rcall	.-1838   	; 0x114e <_ZN8hardware5delayEj>
		
		// pushByteVisible
		for (uint8_t i = 0; i<16; ++i){
    187c:	10 e0       	ldi	r17, 0x00	; 0
			pushByteVisible(i);
    187e:	81 2f       	mov	r24, r17
    1880:	d4 dd       	rcall	.-1112   	; 0x142a <_ZN3led15pushByteVisibleEh>
			delay(1000);
    1882:	88 ee       	ldi	r24, 0xE8	; 232
    1884:	93 e0       	ldi	r25, 0x03	; 3
    1886:	63 dc       	rcall	.-1850   	; 0x114e <_ZN8hardware5delayEj>
		}
		clear();
		PAUSE
		
		// pushByteVisible
		for (uint8_t i = 0; i<16; ++i){
    1888:	1f 5f       	subi	r17, 0xFF	; 255
    188a:	10 31       	cpi	r17, 0x10	; 16
    188c:	c1 f7       	brne	.-16     	; 0x187e <_ZN4test5led_t3runEv+0x88>
    188e:	10 e0       	ldi	r17, 0x00	; 0
			pushByteVisible(i);
			delay(1000);
		}
		for (uint8_t i = 0; i<16; ++i){
			pushByteVisible( (i<<4) + 0x0F);
    1890:	81 2f       	mov	r24, r17
    1892:	82 95       	swap	r24
    1894:	80 7f       	andi	r24, 0xF0	; 240
    1896:	81 5f       	subi	r24, 0xF1	; 241
    1898:	c8 dd       	rcall	.-1136   	; 0x142a <_ZN3led15pushByteVisibleEh>
			delay(1000);
    189a:	88 ee       	ldi	r24, 0xE8	; 232
    189c:	93 e0       	ldi	r25, 0x03	; 3
    189e:	57 dc       	rcall	.-1874   	; 0x114e <_ZN8hardware5delayEj>
		// pushByteVisible
		for (uint8_t i = 0; i<16; ++i){
			pushByteVisible(i);
			delay(1000);
		}
		for (uint8_t i = 0; i<16; ++i){
    18a0:	1f 5f       	subi	r17, 0xFF	; 255
    18a2:	10 31       	cpi	r17, 0x10	; 16
    18a4:	a9 f7       	brne	.-22     	; 0x1890 <_ZN4test5led_t3runEv+0x9a>
			pushByteVisible( (i<<4) + 0x0F);
			delay(1000);
		}
		clear();
    18a6:	8b de       	rcall	.-746    	; 0x15be <_ZN3led5clearEv>
		PAUSE
    18a8:	80 ed       	ldi	r24, 0xD0	; 208
    18aa:	97 e0       	ldi	r25, 0x07	; 7
    18ac:	50 dc       	rcall	.-1888   	; 0x114e <_ZN8hardware5delayEj>
		
		//printsign
		printSign('A');
    18ae:	81 e4       	ldi	r24, 0x41	; 65
    18b0:	e5 dd       	rcall	.-1078   	; 0x147c <_ZN3led9printSignEc>
		printSign('B');
    18b2:	82 e4       	ldi	r24, 0x42	; 66
    18b4:	e3 dd       	rcall	.-1082   	; 0x147c <_ZN3led9printSignEc>
		printSign('C');
    18b6:	83 e4       	ldi	r24, 0x43	; 67
    18b8:	e1 dd       	rcall	.-1086   	; 0x147c <_ZN3led9printSignEc>
		printSign('D');
    18ba:	84 e4       	ldi	r24, 0x44	; 68
    18bc:	df dd       	rcall	.-1090   	; 0x147c <_ZN3led9printSignEc>
		PAUSE;
    18be:	80 ed       	ldi	r24, 0xD0	; 208
    18c0:	97 e0       	ldi	r25, 0x07	; 7
    18c2:	45 dc       	rcall	.-1910   	; 0x114e <_ZN8hardware5delayEj>
		PAUSE
    18c4:	80 ed       	ldi	r24, 0xD0	; 208
    18c6:	97 e0       	ldi	r25, 0x07	; 7
    18c8:	42 dc       	rcall	.-1916   	; 0x114e <_ZN8hardware5delayEj>
		clear();
    18ca:	79 de       	rcall	.-782    	; 0x15be <_ZN3led5clearEv>
		SLEEP
    18cc:	80 e7       	ldi	r24, 0x70	; 112
    18ce:	97 e1       	ldi	r25, 0x17	; 23
    18d0:	3e dc       	rcall	.-1924   	; 0x114e <_ZN8hardware5delayEj>
		
		printSign('(');
    18d2:	88 e2       	ldi	r24, 0x28	; 40
    18d4:	d3 dd       	rcall	.-1114   	; 0x147c <_ZN3led9printSignEc>
		printSign('e');
    18d6:	85 e6       	ldi	r24, 0x65	; 101
    18d8:	d1 dd       	rcall	.-1118   	; 0x147c <_ZN3led9printSignEc>
		printSign('x');
    18da:	88 e7       	ldi	r24, 0x78	; 120
    18dc:	cf dd       	rcall	.-1122   	; 0x147c <_ZN3led9printSignEc>
		printSign('p');
    18de:	80 e7       	ldi	r24, 0x70	; 112
    18e0:	cd dd       	rcall	.-1126   	; 0x147c <_ZN3led9printSignEc>
		printSign(')');
    18e2:	89 e2       	ldi	r24, 0x29	; 41
    18e4:	cb dd       	rcall	.-1130   	; 0x147c <_ZN3led9printSignEc>
		printSign('-');
    18e6:	8d e2       	ldi	r24, 0x2D	; 45
    18e8:	c9 dd       	rcall	.-1134   	; 0x147c <_ZN3led9printSignEc>
		printSign('3');
    18ea:	83 e3       	ldi	r24, 0x33	; 51
    18ec:	c7 dd       	rcall	.-1138   	; 0x147c <_ZN3led9printSignEc>
		PAUSE PAUSE PAUSE PAUSE
    18ee:	80 ed       	ldi	r24, 0xD0	; 208
    18f0:	97 e0       	ldi	r25, 0x07	; 7
    18f2:	2d dc       	rcall	.-1958   	; 0x114e <_ZN8hardware5delayEj>
    18f4:	80 ed       	ldi	r24, 0xD0	; 208
    18f6:	97 e0       	ldi	r25, 0x07	; 7
    18f8:	2a dc       	rcall	.-1964   	; 0x114e <_ZN8hardware5delayEj>
    18fa:	80 ed       	ldi	r24, 0xD0	; 208
    18fc:	97 e0       	ldi	r25, 0x07	; 7
    18fe:	27 dc       	rcall	.-1970   	; 0x114e <_ZN8hardware5delayEj>
    1900:	80 ed       	ldi	r24, 0xD0	; 208
    1902:	97 e0       	ldi	r25, 0x07	; 7
    1904:	24 dc       	rcall	.-1976   	; 0x114e <_ZN8hardware5delayEj>
		
		clear();
    1906:	5b de       	rcall	.-842    	; 0x15be <_ZN3led5clearEv>
		PAUSE
    1908:	80 ed       	ldi	r24, 0xD0	; 208
    190a:	97 e0       	ldi	r25, 0x07	; 7
    190c:	20 dc       	rcall	.-1984   	; 0x114e <_ZN8hardware5delayEj>
		
		// printstring
		char mystring[] = "true";
    190e:	85 e0       	ldi	r24, 0x05	; 5
    1910:	eb e4       	ldi	r30, 0x4B	; 75
    1912:	f1 e0       	ldi	r31, 0x01	; 1
    1914:	de 01       	movw	r26, r28
    1916:	5e 96       	adiw	r26, 0x1e	; 30
    1918:	01 90       	ld	r0, Z+
    191a:	0d 92       	st	X+, r0
    191c:	8a 95       	dec	r24
    191e:	e1 f7       	brne	.-8      	; 0x1918 <_ZN4test5led_t3runEv+0x122>
		char s2 [] = "str-prnt";
    1920:	89 e0       	ldi	r24, 0x09	; 9
    1922:	e0 e5       	ldi	r30, 0x50	; 80
    1924:	f1 e0       	ldi	r31, 0x01	; 1
    1926:	de 01       	movw	r26, r28
    1928:	1a 96       	adiw	r26, 0x0a	; 10
    192a:	01 90       	ld	r0, Z+
    192c:	0d 92       	st	X+, r0
    192e:	8a 95       	dec	r24
    1930:	e1 f7       	brne	.-8      	; 0x192a <_ZN4test5led_t3runEv+0x134>
		printString(mystring);
    1932:	ce 01       	movw	r24, r28
    1934:	4e 96       	adiw	r24, 0x1e	; 30
    1936:	2e de       	rcall	.-932    	; 0x1594 <_ZN3led11printStringEPKc>
		PAUSE; PAUSE PAUSE
    1938:	80 ed       	ldi	r24, 0xD0	; 208
    193a:	97 e0       	ldi	r25, 0x07	; 7
    193c:	08 dc       	rcall	.-2032   	; 0x114e <_ZN8hardware5delayEj>
    193e:	80 ed       	ldi	r24, 0xD0	; 208
    1940:	97 e0       	ldi	r25, 0x07	; 7
    1942:	05 dc       	rcall	.-2038   	; 0x114e <_ZN8hardware5delayEj>
    1944:	80 ed       	ldi	r24, 0xD0	; 208
    1946:	97 e0       	ldi	r25, 0x07	; 7
    1948:	02 dc       	rcall	.-2044   	; 0x114e <_ZN8hardware5delayEj>
		printString(s2);
    194a:	ce 01       	movw	r24, r28
    194c:	0a 96       	adiw	r24, 0x0a	; 10
    194e:	22 de       	rcall	.-956    	; 0x1594 <_ZN3led11printStringEPKc>
		PAUSE PAUSE PAUSE PAUSE
    1950:	80 ed       	ldi	r24, 0xD0	; 208
    1952:	97 e0       	ldi	r25, 0x07	; 7
    1954:	fc db       	rcall	.-2056   	; 0x114e <_ZN8hardware5delayEj>
    1956:	80 ed       	ldi	r24, 0xD0	; 208
    1958:	97 e0       	ldi	r25, 0x07	; 7
    195a:	f9 db       	rcall	.-2062   	; 0x114e <_ZN8hardware5delayEj>
    195c:	80 ed       	ldi	r24, 0xD0	; 208
    195e:	97 e0       	ldi	r25, 0x07	; 7
    1960:	f6 db       	rcall	.-2068   	; 0x114e <_ZN8hardware5delayEj>
    1962:	80 ed       	ldi	r24, 0xD0	; 208
    1964:	97 e0       	ldi	r25, 0x07	; 7
    1966:	f3 db       	rcall	.-2074   	; 0x114e <_ZN8hardware5delayEj>
				
		clear();
    1968:	2a de       	rcall	.-940    	; 0x15be <_ZN3led5clearEv>
		
		// lfprintstring
		char s3 [] = "LF PRN S";
    196a:	89 e0       	ldi	r24, 0x09	; 9
    196c:	e9 e5       	ldi	r30, 0x59	; 89
    196e:	f1 e0       	ldi	r31, 0x01	; 1
    1970:	de 01       	movw	r26, r28
    1972:	11 96       	adiw	r26, 0x01	; 1
    1974:	01 90       	ld	r0, Z+
    1976:	0d 92       	st	X+, r0
    1978:	8a 95       	dec	r24
    197a:	e1 f7       	brne	.-8      	; 0x1974 <_ZN4test5led_t3runEv+0x17e>
		char s4 [] = "lf 4";
    197c:	85 e0       	ldi	r24, 0x05	; 5
    197e:	e2 e6       	ldi	r30, 0x62	; 98
    1980:	f1 e0       	ldi	r31, 0x01	; 1
    1982:	de 01       	movw	r26, r28
    1984:	59 96       	adiw	r26, 0x19	; 25
    1986:	01 90       	ld	r0, Z+
    1988:	0d 92       	st	X+, r0
    198a:	8a 95       	dec	r24
    198c:	e1 f7       	brne	.-8      	; 0x1986 <_ZN4test5led_t3runEv+0x190>
		char s5 [] = "12345";
    198e:	86 e0       	ldi	r24, 0x06	; 6
    1990:	e7 e6       	ldi	r30, 0x67	; 103
    1992:	f1 e0       	ldi	r31, 0x01	; 1
    1994:	de 01       	movw	r26, r28
    1996:	53 96       	adiw	r26, 0x13	; 19
    1998:	01 90       	ld	r0, Z+
    199a:	0d 92       	st	X+, r0
    199c:	8a 95       	dec	r24
    199e:	e1 f7       	brne	.-8      	; 0x1998 <_ZN4test5led_t3runEv+0x1a2>
		LFPrintString(s3);
    19a0:	ce 01       	movw	r24, r28
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	37 de       	rcall	.-914    	; 0x1614 <_ZN3led13LFPrintStringEPKc>
		PAUSE PAUSE PAUSE
    19a6:	80 ed       	ldi	r24, 0xD0	; 208
    19a8:	97 e0       	ldi	r25, 0x07	; 7
    19aa:	d1 db       	rcall	.-2142   	; 0x114e <_ZN8hardware5delayEj>
    19ac:	80 ed       	ldi	r24, 0xD0	; 208
    19ae:	97 e0       	ldi	r25, 0x07	; 7
    19b0:	ce db       	rcall	.-2148   	; 0x114e <_ZN8hardware5delayEj>
    19b2:	80 ed       	ldi	r24, 0xD0	; 208
    19b4:	97 e0       	ldi	r25, 0x07	; 7
    19b6:	cb db       	rcall	.-2154   	; 0x114e <_ZN8hardware5delayEj>
		LFPrintString(s4);
    19b8:	ce 01       	movw	r24, r28
    19ba:	49 96       	adiw	r24, 0x19	; 25
    19bc:	2b de       	rcall	.-938    	; 0x1614 <_ZN3led13LFPrintStringEPKc>
		PAUSE PAUSE PAUSE
    19be:	80 ed       	ldi	r24, 0xD0	; 208
    19c0:	97 e0       	ldi	r25, 0x07	; 7
    19c2:	c5 db       	rcall	.-2166   	; 0x114e <_ZN8hardware5delayEj>
    19c4:	80 ed       	ldi	r24, 0xD0	; 208
    19c6:	97 e0       	ldi	r25, 0x07	; 7
    19c8:	c2 db       	rcall	.-2172   	; 0x114e <_ZN8hardware5delayEj>
    19ca:	80 ed       	ldi	r24, 0xD0	; 208
    19cc:	97 e0       	ldi	r25, 0x07	; 7
    19ce:	bf db       	rcall	.-2178   	; 0x114e <_ZN8hardware5delayEj>
		LFPrintString(s5);
    19d0:	ce 01       	movw	r24, r28
    19d2:	43 96       	adiw	r24, 0x13	; 19
    19d4:	1f de       	rcall	.-962    	; 0x1614 <_ZN3led13LFPrintStringEPKc>
		SLEEP
    19d6:	80 e7       	ldi	r24, 0x70	; 112
    19d8:	97 e1       	ldi	r25, 0x17	; 23
    19da:	b9 db       	rcall	.-2190   	; 0x114e <_ZN8hardware5delayEj>
		LFPrintString("test-1");
    19dc:	85 e2       	ldi	r24, 0x25	; 37
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	19 de       	rcall	.-974    	; 0x1614 <_ZN3led13LFPrintStringEPKc>
		SLEEP
    19e2:	80 e7       	ldi	r24, 0x70	; 112
    19e4:	97 e1       	ldi	r25, 0x17	; 23
    19e6:	b3 db       	rcall	.-2202   	; 0x114e <_ZN8hardware5delayEj>
		LFPrintString("last-lf");
    19e8:	8c e2       	ldi	r24, 0x2C	; 44
    19ea:	91 e0       	ldi	r25, 0x01	; 1
    19ec:	13 de       	rcall	.-986    	; 0x1614 <_ZN3led13LFPrintStringEPKc>
		SLEEP
    19ee:	80 e7       	ldi	r24, 0x70	; 112
    19f0:	97 e1       	ldi	r25, 0x17	; 23
    19f2:	ad db       	rcall	.-2214   	; 0x114e <_ZN8hardware5delayEj>
		
		
		// isDotted
		LFPrintString("isdotted");
    19f4:	84 e3       	ldi	r24, 0x34	; 52
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	0d de       	rcall	.-998    	; 0x1614 <_ZN3led13LFPrintStringEPKc>
		PAUSE
    19fa:	80 ed       	ldi	r24, 0xD0	; 208
    19fc:	97 e0       	ldi	r25, 0x07	; 7
    19fe:	a7 db       	rcall	.-2226   	; 0x114e <_ZN8hardware5delayEj>
		printSign('0');
    1a00:	80 e3       	ldi	r24, 0x30	; 48
    1a02:	3c dd       	rcall	.-1416   	; 0x147c <_ZN3led9printSignEc>
		if (isDotted('a'+DOT)) { } else { throwerror();}
    1a04:	81 ee       	ldi	r24, 0xE1	; 225
    1a06:	14 dd       	rcall	.-1496   	; 0x1430 <_ZN3led8isDottedEc>
    1a08:	81 11       	cpse	r24, r1
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <_ZN4test5led_t3runEv+0x21c>
#define WAIT delay(1000);
#define SLEEP delay(6000);

inline void throwerror(){
	using namespace led;
	LFPrintString("error");
    1a0c:	8d e3       	ldi	r24, 0x3D	; 61
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	01 de       	rcall	.-1022   	; 0x1614 <_ZN3led13LFPrintStringEPKc>
		// isDotted
		LFPrintString("isdotted");
		PAUSE
		printSign('0');
		if (isDotted('a'+DOT)) { } else { throwerror();}
		SLEEP;
    1a12:	80 e7       	ldi	r24, 0x70	; 112
    1a14:	97 e1       	ldi	r25, 0x17	; 23
    1a16:	9b db       	rcall	.-2250   	; 0x114e <_ZN8hardware5delayEj>
		printSign('1');
    1a18:	81 e3       	ldi	r24, 0x31	; 49
    1a1a:	30 dd       	rcall	.-1440   	; 0x147c <_ZN3led9printSignEc>
		if (isDotted('5')) { throwerror(); }
    1a1c:	85 e3       	ldi	r24, 0x35	; 53
    1a1e:	08 dd       	rcall	.-1520   	; 0x1430 <_ZN3led8isDottedEc>
    1a20:	88 23       	and	r24, r24
    1a22:	19 f0       	breq	.+6      	; 0x1a2a <_ZN4test5led_t3runEv+0x234>
#define WAIT delay(1000);
#define SLEEP delay(6000);

inline void throwerror(){
	using namespace led;
	LFPrintString("error");
    1a24:	8d e3       	ldi	r24, 0x3D	; 61
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	f5 dd       	rcall	.-1046   	; 0x1614 <_ZN3led13LFPrintStringEPKc>
		printSign('0');
		if (isDotted('a'+DOT)) { } else { throwerror();}
		SLEEP;
		printSign('1');
		if (isDotted('5')) { throwerror(); }
		SLEEP
    1a2a:	80 e7       	ldi	r24, 0x70	; 112
    1a2c:	97 e1       	ldi	r25, 0x17	; 23
    1a2e:	8f db       	rcall	.-2274   	; 0x114e <_ZN8hardware5delayEj>
		SLEEP
    1a30:	80 e7       	ldi	r24, 0x70	; 112
    1a32:	97 e1       	ldi	r25, 0x17	; 23
    1a34:	8c db       	rcall	.-2280   	; 0x114e <_ZN8hardware5delayEj>
		
		clear();
    1a36:	c3 dd       	rcall	.-1146   	; 0x15be <_ZN3led5clearEv>
		SLEEP
    1a38:	80 e7       	ldi	r24, 0x70	; 112
    1a3a:	97 e1       	ldi	r25, 0x17	; 23
    1a3c:	88 db       	rcall	.-2288   	; 0x114e <_ZN8hardware5delayEj>
		
		// setdot and printsigndottable
		char a = 'a';
    1a3e:	81 e6       	ldi	r24, 0x61	; 97
    1a40:	8b a3       	std	Y+35, r24	; 0x23
		setDot(&a,true);
    1a42:	61 e0       	ldi	r22, 0x01	; 1
    1a44:	ce 01       	movw	r24, r28
    1a46:	83 96       	adiw	r24, 0x23	; 35
    1a48:	f7 dc       	rcall	.-1554   	; 0x1438 <_ZN3led6setDotEPcb>
		printSign(a);
    1a4a:	8b a1       	ldd	r24, Y+35	; 0x23
    1a4c:	17 dd       	rcall	.-1490   	; 0x147c <_ZN3led9printSignEc>
		setDot(&a,false);
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	ce 01       	movw	r24, r28
    1a52:	83 96       	adiw	r24, 0x23	; 35
    1a54:	f1 dc       	rcall	.-1566   	; 0x1438 <_ZN3led6setDotEPcb>
		printSign(a);
    1a56:	8b a1       	ldd	r24, Y+35	; 0x23
    1a58:	11 dd       	rcall	.-1502   	; 0x147c <_ZN3led9printSignEc>
		printSignDottable(a,true);
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	8b a1       	ldd	r24, Y+35	; 0x23
    1a5e:	8b dd       	rcall	.-1258   	; 0x1576 <_ZN3led17printSignDottableEcb>
		
		printSignDottable(a,false);
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	8b a1       	ldd	r24, Y+35	; 0x23
    1a64:	88 dd       	rcall	.-1264   	; 0x1576 <_ZN3led17printSignDottableEcb>
		
		// print digigt and integer
		printDigit(0);
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	0c dd       	rcall	.-1512   	; 0x1482 <_ZN3led10printDigitEh>
		printDigit(3);
    1a6a:	83 e0       	ldi	r24, 0x03	; 3
    1a6c:	0a dd       	rcall	.-1516   	; 0x1482 <_ZN3led10printDigitEh>
		printDigit((7));
    1a6e:	87 e0       	ldi	r24, 0x07	; 7
    1a70:	08 dd       	rcall	.-1520   	; 0x1482 <_ZN3led10printDigitEh>
		SLEEP
    1a72:	80 e7       	ldi	r24, 0x70	; 112
    1a74:	97 e1       	ldi	r25, 0x17	; 23
    1a76:	6b db       	rcall	.-2346   	; 0x114e <_ZN8hardware5delayEj>
		
		clear();
    1a78:	a2 dd       	rcall	.-1212   	; 0x15be <_ZN3led5clearEv>
		printInt(2106);
    1a7a:	00 e0       	ldi	r16, 0x00	; 0
    1a7c:	2a e3       	ldi	r18, 0x3A	; 58
    1a7e:	38 e0       	ldi	r19, 0x08	; 8
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	02 dd       	rcall	.-1532   	; 0x1492 <_ZN3led8printIntExb>
		SLEEP
    1a8e:	80 e7       	ldi	r24, 0x70	; 112
    1a90:	97 e1       	ldi	r25, 0x17	; 23
    1a92:	5d db       	rcall	.-2374   	; 0x114e <_ZN8hardware5delayEj>
		SLEEP
    1a94:	80 e7       	ldi	r24, 0x70	; 112
    1a96:	97 e1       	ldi	r25, 0x17	; 23
    1a98:	5a db       	rcall	.-2380   	; 0x114e <_ZN8hardware5delayEj>
		LFPrintString("THE END");
    1a9a:	83 e4       	ldi	r24, 0x43	; 67
    1a9c:	91 e0       	ldi	r25, 0x01	; 1
    1a9e:	ba dd       	rcall	.-1164   	; 0x1614 <_ZN3led13LFPrintStringEPKc>
	}
    1aa0:	a3 96       	adiw	r28, 0x23	; 35
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	08 95       	ret

00001ab8 <_Z15after_selectingv>:
#include "f_arch.h"
#include "f_gui.h"
#include "f_test.h"


void foo(){
    1ab8:	82 cd       	rjmp	.-1276   	; 0x15be <_ZN3led5clearEv>
    1aba:	08 95       	ret

00001abc <_Z13guiBootScreenv>:
//const uint16_t PROGRAMCOUNT = arch::programCount(); // there is a better c++ alternative // <<<<<<<
}



void guiBootScreen(){
    1abc:	cf 93       	push	r28
		led::LFPrintString("-FUSSEL-");
    1abe:	8d e6       	ldi	r24, 0x6D	; 109
    1ac0:	91 e0       	ldi	r25, 0x01	; 1
    1ac2:	a8 dd       	rcall	.-1200   	; 0x1614 <_ZN3led13LFPrintStringEPKc>
    1ac4:	c5 e0       	ldi	r28, 0x05	; 5
		for(uint8_t i = 0 ; i < 5; ++i){
			led::printDotsOnly(0xFF);
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	ae dd       	rcall	.-1188   	; 0x1626 <_ZN3led13printDotsOnlyEh>
			hardware::delay(500);
    1aca:	84 ef       	ldi	r24, 0xF4	; 244
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	3f db       	rcall	.-2434   	; 0x114e <_ZN8hardware5delayEj>
			led::printDotsOnly(0x00);
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	a9 dd       	rcall	.-1198   	; 0x1626 <_ZN3led13printDotsOnlyEh>
			hardware::delay(500);
    1ad4:	84 ef       	ldi	r24, 0xF4	; 244
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	3a db       	rcall	.-2444   	; 0x114e <_ZN8hardware5delayEj>
    1ada:	c1 50       	subi	r28, 0x01	; 1



void guiBootScreen(){
		led::LFPrintString("-FUSSEL-");
		for(uint8_t i = 0 ; i < 5; ++i){
    1adc:	a1 f7       	brne	.-24     	; 0x1ac6 <_Z13guiBootScreenv+0xa>
			led::printDotsOnly(0xFF);
			hardware::delay(500);
			led::printDotsOnly(0x00);
			hardware::delay(500);
		}
		led::clear();
    1ade:	6f dd       	rcall	.-1314   	; 0x15be <_ZN3led5clearEv>
}
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <main>:
void after_selecting(){
	// do nothing
	led::clear();
}

int main(void){
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	29 97       	sbiw	r28, 0x09	; 9
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
	//###
	// please check the board frequency of quartz and redefine fcpu in hardware.cpp
	// define dot position in ledline.cpp -> please find out it's hardware configuration
	
	/* test code */
	test::led_t::run();
    1af8:	7e de       	rcall	.-772    	; 0x17f6 <_ZN4test5led_t3runEv>
	
	
	led::init(8);
    1afa:	88 e0       	ldi	r24, 0x08	; 8
    1afc:	70 dd       	rcall	.-1312   	; 0x15de <_ZN3led4initEh>
	guiBootScreen();
    1afe:	de df       	rcall	.-68     	; 0x1abc <_Z13guiBootScreenv>
	
	led::LFPrintString("ARCH...");
    1b00:	86 e7       	ldi	r24, 0x76	; 118
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	87 dd       	rcall	.-1266   	; 0x1614 <_ZN3led13LFPrintStringEPKc>
	hardware::delay(2000);
    1b06:	80 ed       	ldi	r24, 0xD0	; 208
    1b08:	97 e0       	ldi	r25, 0x07	; 7
    1b0a:	21 db       	rcall	.-2494   	; 0x114e <_ZN8hardware5delayEj>
		/* push 15 bit to the light line (MSB first) and make it visible */
	
	inline void init(){//for init
		
		// IO register B for the lights:
		DDRB |= 0b00000111;// LATCH BIT ::: CLOCK BIT ::: DATA BIT
    1b0c:	87 b3       	in	r24, 0x17	; 23
    1b0e:	87 60       	ori	r24, 0x07	; 7
    1b10:	87 bb       	out	0x17, r24	; 23
		PORTB &= 0b11111000;
    1b12:	88 b3       	in	r24, 0x18	; 24
    1b14:	88 7f       	andi	r24, 0xF8	; 248
    1b16:	88 bb       	out	0x18, r24	; 24
		
		pushLineVisible(0xFFFF);
    1b18:	8f ef       	ldi	r24, 0xFF	; 255
    1b1a:	9f ef       	ldi	r25, 0xFF	; 255
    1b1c:	0e 94 9d 00 	call	0x13a	; 0x13a <_ZN4arch15pushLineVisibleEj>
		hardware::delay(1000);
    1b20:	88 ee       	ldi	r24, 0xE8	; 232
    1b22:	93 e0       	ldi	r25, 0x03	; 3
    1b24:	14 db       	rcall	.-2520   	; 0x114e <_ZN8hardware5delayEj>
		pushLineVisible(0x0000);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 9d 00 	call	0x13a	; 0x13a <_ZN4arch15pushLineVisibleEj>
		
		// maybe this could be left out, but for alarm function this could be useful
		runProgram(0);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	0e 94 22 02 	call	0x444	; 0x444 <_ZN4arch10runProgramEh>
	arch::init();
	led::clear();
    1b34:	44 dd       	rcall	.-1400   	; 0x15be <_ZN3led5clearEv>
		typedef struct item_s {
			char label[8];
			void (*procedure)();
		} item_t;
		
		ItemManager() : cancelProcedure(nullptr), position(0) {}
    1b36:	1c 82       	std	Y+4, r1	; 0x04
    1b38:	1b 82       	std	Y+3, r1	; 0x03
    1b3a:	1e 82       	std	Y+6, r1	; 0x06
    1b3c:	1d 82       	std	Y+5, r1	; 0x05
		
		virtual void runItemProcedureInternal() override; /* start running slected program in arch // this must be changed for later uses // and run the finalize function if non-null */
		
	public:
		
		ArcProgramItemManager() : finalProcedure(nullptr), includingOffProgram(true){}
    1b3e:	85 e1       	ldi	r24, 0x15	; 21
    1b40:	91 e0       	ldi	r25, 0x01	; 1
    1b42:	9a 83       	std	Y+2, r25	; 0x02
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	89 87       	std	Y+9, r24	; 0x09
		
		inline virtual void init(void (*cancelProcedure)(), void (*finalProcedure)(), bool includingOffProgram) {
			ItemManager::init(cancelProcedure);
			this->finalProcedure = finalProcedure;
    1b4a:	8c e5       	ldi	r24, 0x5C	; 92
    1b4c:	9d e0       	ldi	r25, 0x0D	; 13
    1b4e:	98 87       	std	Y+8, r25	; 0x08
    1b50:	8f 83       	std	Y+7, r24	; 0x07
	
	ArcProgramItemManager programItemManager;
	programItemManager.init(nullptr,after_selecting,true);
	ItemSelector::initialisation(2,0,1,&programItemManager);
    1b52:	9e 01       	movw	r18, r28
    1b54:	2f 5f       	subi	r18, 0xFF	; 255
    1b56:	3f 4f       	sbci	r19, 0xFF	; 255
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	a4 d9       	rcall	.-3256   	; 0xea8 <_ZN12ItemSelector14initialisationEhhhP11ItemManager>
	ItemSelector::run();
    1b60:	96 da       	rcall	.-2772   	; 0x108e <_ZN12ItemSelector3runEv>
	while (1){
		arch::controller();
    1b62:	87 d8       	rcall	.-3826   	; 0xc72 <_ZN4arch10controllerEv>
    1b64:	fe cf       	rjmp	.-4      	; 0x1b62 <main+0x7e>

00001b66 <__udivmodqi4>:
    1b66:	99 1b       	sub	r25, r25
    1b68:	79 e0       	ldi	r23, 0x09	; 9
    1b6a:	04 c0       	rjmp	.+8      	; 0x1b74 <__udivmodqi4_ep>

00001b6c <__udivmodqi4_loop>:
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	96 17       	cp	r25, r22
    1b70:	08 f0       	brcs	.+2      	; 0x1b74 <__udivmodqi4_ep>
    1b72:	96 1b       	sub	r25, r22

00001b74 <__udivmodqi4_ep>:
    1b74:	88 1f       	adc	r24, r24
    1b76:	7a 95       	dec	r23
    1b78:	c9 f7       	brne	.-14     	; 0x1b6c <__udivmodqi4_loop>
    1b7a:	80 95       	com	r24
    1b7c:	08 95       	ret

00001b7e <__udivmodhi4>:
    1b7e:	aa 1b       	sub	r26, r26
    1b80:	bb 1b       	sub	r27, r27
    1b82:	51 e1       	ldi	r21, 0x11	; 17
    1b84:	07 c0       	rjmp	.+14     	; 0x1b94 <__udivmodhi4_ep>

00001b86 <__udivmodhi4_loop>:
    1b86:	aa 1f       	adc	r26, r26
    1b88:	bb 1f       	adc	r27, r27
    1b8a:	a6 17       	cp	r26, r22
    1b8c:	b7 07       	cpc	r27, r23
    1b8e:	10 f0       	brcs	.+4      	; 0x1b94 <__udivmodhi4_ep>
    1b90:	a6 1b       	sub	r26, r22
    1b92:	b7 0b       	sbc	r27, r23

00001b94 <__udivmodhi4_ep>:
    1b94:	88 1f       	adc	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	5a 95       	dec	r21
    1b9a:	a9 f7       	brne	.-22     	; 0x1b86 <__udivmodhi4_loop>
    1b9c:	80 95       	com	r24
    1b9e:	90 95       	com	r25
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	08 95       	ret

00001ba6 <__divmodhi4>:
    1ba6:	97 fb       	bst	r25, 7
    1ba8:	07 2e       	mov	r0, r23
    1baa:	16 f4       	brtc	.+4      	; 0x1bb0 <__divmodhi4+0xa>
    1bac:	00 94       	com	r0
    1bae:	06 d0       	rcall	.+12     	; 0x1bbc <__divmodhi4_neg1>
    1bb0:	77 fd       	sbrc	r23, 7
    1bb2:	08 d0       	rcall	.+16     	; 0x1bc4 <__divmodhi4_neg2>
    1bb4:	e4 df       	rcall	.-56     	; 0x1b7e <__udivmodhi4>
    1bb6:	07 fc       	sbrc	r0, 7
    1bb8:	05 d0       	rcall	.+10     	; 0x1bc4 <__divmodhi4_neg2>
    1bba:	3e f4       	brtc	.+14     	; 0x1bca <__divmodhi4_exit>

00001bbc <__divmodhi4_neg1>:
    1bbc:	90 95       	com	r25
    1bbe:	81 95       	neg	r24
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	08 95       	ret

00001bc4 <__divmodhi4_neg2>:
    1bc4:	70 95       	com	r23
    1bc6:	61 95       	neg	r22
    1bc8:	7f 4f       	sbci	r23, 0xFF	; 255

00001bca <__divmodhi4_exit>:
    1bca:	08 95       	ret

00001bcc <__moddi3>:
    1bcc:	68 94       	set
    1bce:	01 c0       	rjmp	.+2      	; 0x1bd2 <__divdi3_moddi3>

00001bd0 <__divdi3>:
    1bd0:	e8 94       	clt

00001bd2 <__divdi3_moddi3>:
    1bd2:	f9 2f       	mov	r31, r25
    1bd4:	f1 2b       	or	r31, r17
    1bd6:	0a f0       	brmi	.+2      	; 0x1bda <__divdi3_moddi3+0x8>
    1bd8:	27 c0       	rjmp	.+78     	; 0x1c28 <__udivdi3_umoddi3>
    1bda:	a0 e0       	ldi	r26, 0x00	; 0
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e2 ef       	ldi	r30, 0xF2	; 242
    1be0:	fd e0       	ldi	r31, 0x0D	; 13
    1be2:	93 c0       	rjmp	.+294    	; 0x1d0a <__prologue_saves__+0xc>
    1be4:	09 2e       	mov	r0, r25
    1be6:	05 94       	asr	r0
    1be8:	1a f4       	brpl	.+6      	; 0x1bf0 <__divdi3_moddi3+0x1e>
    1bea:	79 d0       	rcall	.+242    	; 0x1cde <__negdi2>
    1bec:	11 23       	and	r17, r17
    1bee:	92 f4       	brpl	.+36     	; 0x1c14 <__divdi3_moddi3+0x42>
    1bf0:	f0 e8       	ldi	r31, 0x80	; 128
    1bf2:	0f 26       	eor	r0, r31
    1bf4:	ff ef       	ldi	r31, 0xFF	; 255
    1bf6:	e0 94       	com	r14
    1bf8:	f0 94       	com	r15
    1bfa:	00 95       	com	r16
    1bfc:	10 95       	com	r17
    1bfe:	b0 94       	com	r11
    1c00:	c0 94       	com	r12
    1c02:	d0 94       	com	r13
    1c04:	a1 94       	neg	r10
    1c06:	bf 0a       	sbc	r11, r31
    1c08:	cf 0a       	sbc	r12, r31
    1c0a:	df 0a       	sbc	r13, r31
    1c0c:	ef 0a       	sbc	r14, r31
    1c0e:	ff 0a       	sbc	r15, r31
    1c10:	0f 0b       	sbc	r16, r31
    1c12:	1f 0b       	sbc	r17, r31
    1c14:	13 d0       	rcall	.+38     	; 0x1c3c <__udivmod64>
    1c16:	07 fc       	sbrc	r0, 7
    1c18:	62 d0       	rcall	.+196    	; 0x1cde <__negdi2>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	ec e0       	ldi	r30, 0x0C	; 12
    1c20:	90 c0       	rjmp	.+288    	; 0x1d42 <__epilogue_restores__+0xc>

00001c22 <__umoddi3>:
    1c22:	68 94       	set
    1c24:	01 c0       	rjmp	.+2      	; 0x1c28 <__udivdi3_umoddi3>

00001c26 <__udivdi3>:
    1c26:	e8 94       	clt

00001c28 <__udivdi3_umoddi3>:
    1c28:	8f 92       	push	r8
    1c2a:	9f 92       	push	r9
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	05 d0       	rcall	.+10     	; 0x1c3c <__udivmod64>
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	9f 90       	pop	r9
    1c38:	8f 90       	pop	r8
    1c3a:	08 95       	ret

00001c3c <__udivmod64>:
    1c3c:	88 24       	eor	r8, r8
    1c3e:	99 24       	eor	r9, r9
    1c40:	f4 01       	movw	r30, r8
    1c42:	e4 01       	movw	r28, r8
    1c44:	b0 e4       	ldi	r27, 0x40	; 64
    1c46:	9f 93       	push	r25
    1c48:	aa 27       	eor	r26, r26
    1c4a:	9a 15       	cp	r25, r10
    1c4c:	8b 04       	cpc	r8, r11
    1c4e:	9c 04       	cpc	r9, r12
    1c50:	ed 05       	cpc	r30, r13
    1c52:	fe 05       	cpc	r31, r14
    1c54:	cf 05       	cpc	r28, r15
    1c56:	d0 07       	cpc	r29, r16
    1c58:	a1 07       	cpc	r26, r17
    1c5a:	98 f4       	brcc	.+38     	; 0x1c82 <__udivmod64+0x46>
    1c5c:	ad 2f       	mov	r26, r29
    1c5e:	dc 2f       	mov	r29, r28
    1c60:	cf 2f       	mov	r28, r31
    1c62:	fe 2f       	mov	r31, r30
    1c64:	e9 2d       	mov	r30, r9
    1c66:	98 2c       	mov	r9, r8
    1c68:	89 2e       	mov	r8, r25
    1c6a:	98 2f       	mov	r25, r24
    1c6c:	87 2f       	mov	r24, r23
    1c6e:	76 2f       	mov	r23, r22
    1c70:	65 2f       	mov	r22, r21
    1c72:	54 2f       	mov	r21, r20
    1c74:	43 2f       	mov	r20, r19
    1c76:	32 2f       	mov	r19, r18
    1c78:	22 27       	eor	r18, r18
    1c7a:	b8 50       	subi	r27, 0x08	; 8
    1c7c:	31 f7       	brne	.-52     	; 0x1c4a <__udivmod64+0xe>
    1c7e:	bf 91       	pop	r27
    1c80:	27 c0       	rjmp	.+78     	; 0x1cd0 <__udivmod64+0x94>
    1c82:	1b 2e       	mov	r1, r27
    1c84:	bf 91       	pop	r27
    1c86:	bb 27       	eor	r27, r27
    1c88:	22 0f       	add	r18, r18
    1c8a:	33 1f       	adc	r19, r19
    1c8c:	44 1f       	adc	r20, r20
    1c8e:	55 1f       	adc	r21, r21
    1c90:	66 1f       	adc	r22, r22
    1c92:	77 1f       	adc	r23, r23
    1c94:	88 1f       	adc	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	88 1c       	adc	r8, r8
    1c9a:	99 1c       	adc	r9, r9
    1c9c:	ee 1f       	adc	r30, r30
    1c9e:	ff 1f       	adc	r31, r31
    1ca0:	cc 1f       	adc	r28, r28
    1ca2:	dd 1f       	adc	r29, r29
    1ca4:	aa 1f       	adc	r26, r26
    1ca6:	bb 1f       	adc	r27, r27
    1ca8:	8a 14       	cp	r8, r10
    1caa:	9b 04       	cpc	r9, r11
    1cac:	ec 05       	cpc	r30, r12
    1cae:	fd 05       	cpc	r31, r13
    1cb0:	ce 05       	cpc	r28, r14
    1cb2:	df 05       	cpc	r29, r15
    1cb4:	a0 07       	cpc	r26, r16
    1cb6:	b1 07       	cpc	r27, r17
    1cb8:	48 f0       	brcs	.+18     	; 0x1ccc <__udivmod64+0x90>
    1cba:	8a 18       	sub	r8, r10
    1cbc:	9b 08       	sbc	r9, r11
    1cbe:	ec 09       	sbc	r30, r12
    1cc0:	fd 09       	sbc	r31, r13
    1cc2:	ce 09       	sbc	r28, r14
    1cc4:	df 09       	sbc	r29, r15
    1cc6:	a0 0b       	sbc	r26, r16
    1cc8:	b1 0b       	sbc	r27, r17
    1cca:	21 60       	ori	r18, 0x01	; 1
    1ccc:	1a 94       	dec	r1
    1cce:	e1 f6       	brne	.-72     	; 0x1c88 <__udivmod64+0x4c>
    1cd0:	2e f4       	brtc	.+10     	; 0x1cdc <__udivmod64+0xa0>
    1cd2:	94 01       	movw	r18, r8
    1cd4:	af 01       	movw	r20, r30
    1cd6:	be 01       	movw	r22, r28
    1cd8:	cd 01       	movw	r24, r26
    1cda:	00 0c       	add	r0, r0
    1cdc:	08 95       	ret

00001cde <__negdi2>:
    1cde:	60 95       	com	r22
    1ce0:	70 95       	com	r23
    1ce2:	80 95       	com	r24
    1ce4:	90 95       	com	r25
    1ce6:	30 95       	com	r19
    1ce8:	40 95       	com	r20
    1cea:	50 95       	com	r21
    1cec:	21 95       	neg	r18
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	4f 4f       	sbci	r20, 0xFF	; 255
    1cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf4:	6f 4f       	sbci	r22, 0xFF	; 255
    1cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfc:	08 95       	ret

00001cfe <__prologue_saves__>:
    1cfe:	2f 92       	push	r2
    1d00:	3f 92       	push	r3
    1d02:	4f 92       	push	r4
    1d04:	5f 92       	push	r5
    1d06:	6f 92       	push	r6
    1d08:	7f 92       	push	r7
    1d0a:	8f 92       	push	r8
    1d0c:	9f 92       	push	r9
    1d0e:	af 92       	push	r10
    1d10:	bf 92       	push	r11
    1d12:	cf 92       	push	r12
    1d14:	df 92       	push	r13
    1d16:	ef 92       	push	r14
    1d18:	ff 92       	push	r15
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	ca 1b       	sub	r28, r26
    1d28:	db 0b       	sbc	r29, r27
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	09 94       	ijmp

00001d36 <__epilogue_restores__>:
    1d36:	2a 88       	ldd	r2, Y+18	; 0x12
    1d38:	39 88       	ldd	r3, Y+17	; 0x11
    1d3a:	48 88       	ldd	r4, Y+16	; 0x10
    1d3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d40:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d42:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d44:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d46:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d48:	b9 84       	ldd	r11, Y+9	; 0x09
    1d4a:	c8 84       	ldd	r12, Y+8	; 0x08
    1d4c:	df 80       	ldd	r13, Y+7	; 0x07
    1d4e:	ee 80       	ldd	r14, Y+6	; 0x06
    1d50:	fd 80       	ldd	r15, Y+5	; 0x05
    1d52:	0c 81       	ldd	r16, Y+4	; 0x04
    1d54:	1b 81       	ldd	r17, Y+3	; 0x03
    1d56:	aa 81       	ldd	r26, Y+2	; 0x02
    1d58:	b9 81       	ldd	r27, Y+1	; 0x01
    1d5a:	ce 0f       	add	r28, r30
    1d5c:	d1 1d       	adc	r29, r1
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	ed 01       	movw	r28, r26
    1d6a:	08 95       	ret

00001d6c <__ashldi3>:
    1d6c:	0f 93       	push	r16
    1d6e:	08 30       	cpi	r16, 0x08	; 8
    1d70:	90 f0       	brcs	.+36     	; 0x1d96 <__ashldi3+0x2a>
    1d72:	98 2f       	mov	r25, r24
    1d74:	87 2f       	mov	r24, r23
    1d76:	76 2f       	mov	r23, r22
    1d78:	65 2f       	mov	r22, r21
    1d7a:	54 2f       	mov	r21, r20
    1d7c:	43 2f       	mov	r20, r19
    1d7e:	32 2f       	mov	r19, r18
    1d80:	22 27       	eor	r18, r18
    1d82:	08 50       	subi	r16, 0x08	; 8
    1d84:	f4 cf       	rjmp	.-24     	; 0x1d6e <__ashldi3+0x2>
    1d86:	22 0f       	add	r18, r18
    1d88:	33 1f       	adc	r19, r19
    1d8a:	44 1f       	adc	r20, r20
    1d8c:	55 1f       	adc	r21, r21
    1d8e:	66 1f       	adc	r22, r22
    1d90:	77 1f       	adc	r23, r23
    1d92:	88 1f       	adc	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	0a 95       	dec	r16
    1d98:	b2 f7       	brpl	.-20     	; 0x1d86 <__ashldi3+0x1a>
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <__ashrdi3>:
    1d9e:	97 fb       	bst	r25, 7
    1da0:	10 f8       	bld	r1, 0

00001da2 <__lshrdi3>:
    1da2:	16 94       	lsr	r1
    1da4:	00 08       	sbc	r0, r0
    1da6:	0f 93       	push	r16
    1da8:	08 30       	cpi	r16, 0x08	; 8
    1daa:	98 f0       	brcs	.+38     	; 0x1dd2 <__lshrdi3+0x30>
    1dac:	08 50       	subi	r16, 0x08	; 8
    1dae:	23 2f       	mov	r18, r19
    1db0:	34 2f       	mov	r19, r20
    1db2:	45 2f       	mov	r20, r21
    1db4:	56 2f       	mov	r21, r22
    1db6:	67 2f       	mov	r22, r23
    1db8:	78 2f       	mov	r23, r24
    1dba:	89 2f       	mov	r24, r25
    1dbc:	90 2d       	mov	r25, r0
    1dbe:	f4 cf       	rjmp	.-24     	; 0x1da8 <__lshrdi3+0x6>
    1dc0:	05 94       	asr	r0
    1dc2:	97 95       	ror	r25
    1dc4:	87 95       	ror	r24
    1dc6:	77 95       	ror	r23
    1dc8:	67 95       	ror	r22
    1dca:	57 95       	ror	r21
    1dcc:	47 95       	ror	r20
    1dce:	37 95       	ror	r19
    1dd0:	27 95       	ror	r18
    1dd2:	0a 95       	dec	r16
    1dd4:	aa f7       	brpl	.-22     	; 0x1dc0 <__lshrdi3+0x1e>
    1dd6:	0f 91       	pop	r16
    1dd8:	08 95       	ret

00001dda <__adddi3>:
    1dda:	2a 0d       	add	r18, r10
    1ddc:	3b 1d       	adc	r19, r11
    1dde:	4c 1d       	adc	r20, r12
    1de0:	5d 1d       	adc	r21, r13
    1de2:	6e 1d       	adc	r22, r14
    1de4:	7f 1d       	adc	r23, r15
    1de6:	80 1f       	adc	r24, r16
    1de8:	91 1f       	adc	r25, r17
    1dea:	08 95       	ret

00001dec <__cmpdi2_s8>:
    1dec:	00 24       	eor	r0, r0
    1dee:	a7 fd       	sbrc	r26, 7
    1df0:	00 94       	com	r0
    1df2:	2a 17       	cp	r18, r26
    1df4:	30 05       	cpc	r19, r0
    1df6:	40 05       	cpc	r20, r0
    1df8:	50 05       	cpc	r21, r0
    1dfa:	60 05       	cpc	r22, r0
    1dfc:	70 05       	cpc	r23, r0
    1dfe:	80 05       	cpc	r24, r0
    1e00:	90 05       	cpc	r25, r0
    1e02:	08 95       	ret

00001e04 <eeprom_read_byte>:
    1e04:	e1 99       	sbic	0x1c, 1	; 28
    1e06:	fe cf       	rjmp	.-4      	; 0x1e04 <eeprom_read_byte>
    1e08:	9f bb       	out	0x1f, r25	; 31
    1e0a:	8e bb       	out	0x1e, r24	; 30
    1e0c:	e0 9a       	sbi	0x1c, 0	; 28
    1e0e:	99 27       	eor	r25, r25
    1e10:	8d b3       	in	r24, 0x1d	; 29
    1e12:	08 95       	ret

00001e14 <_exit>:
    1e14:	f8 94       	cli

00001e16 <__stop_program>:
    1e16:	ff cf       	rjmp	.-2      	; 0x1e16 <__stop_program>
