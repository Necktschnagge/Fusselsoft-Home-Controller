
Fussl-01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ab2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f3  00800100  00800100  00000ab2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f3b  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000958  00000000  00000000  00002c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010c1  00000000  00000000  0000355b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  0000461c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a88  00000000  00000000  00004c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d70  00000000  00000000  00005698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00007408  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	68 c0       	rjmp	.+208    	; 0xd2 <__ctors_end>
   2:	00 00       	nop
   4:	83 c0       	rjmp	.+262    	; 0x10c <__bad_interrupt>
   6:	00 00       	nop
   8:	81 c0       	rjmp	.+258    	; 0x10c <__bad_interrupt>
   a:	00 00       	nop
   c:	7f c0       	rjmp	.+254    	; 0x10c <__bad_interrupt>
   e:	00 00       	nop
  10:	7d c0       	rjmp	.+250    	; 0x10c <__bad_interrupt>
  12:	00 00       	nop
  14:	7b c0       	rjmp	.+246    	; 0x10c <__bad_interrupt>
  16:	00 00       	nop
  18:	79 c0       	rjmp	.+242    	; 0x10c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	77 c0       	rjmp	.+238    	; 0x10c <__bad_interrupt>
  1e:	00 00       	nop
  20:	75 c0       	rjmp	.+234    	; 0x10c <__bad_interrupt>
  22:	00 00       	nop
  24:	73 c0       	rjmp	.+230    	; 0x10c <__bad_interrupt>
  26:	00 00       	nop
  28:	71 c0       	rjmp	.+226    	; 0x10c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6f c0       	rjmp	.+222    	; 0x10c <__bad_interrupt>
  2e:	00 00       	nop
  30:	6d c0       	rjmp	.+218    	; 0x10c <__bad_interrupt>
  32:	00 00       	nop
  34:	6b c0       	rjmp	.+214    	; 0x10c <__bad_interrupt>
  36:	00 00       	nop
  38:	69 c0       	rjmp	.+210    	; 0x10c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	67 c0       	rjmp	.+206    	; 0x10c <__bad_interrupt>
  3e:	00 00       	nop
  40:	65 c0       	rjmp	.+202    	; 0x10c <__bad_interrupt>
  42:	00 00       	nop
  44:	63 c0       	rjmp	.+198    	; 0x10c <__bad_interrupt>
  46:	00 00       	nop
  48:	61 c0       	rjmp	.+194    	; 0x10c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5f c0       	rjmp	.+190    	; 0x10c <__bad_interrupt>
  4e:	00 00       	nop
  50:	5d c0       	rjmp	.+186    	; 0x10c <__bad_interrupt>
  52:	00 00       	nop
  54:	5b c0       	rjmp	.+182    	; 0x10c <__bad_interrupt>
  56:	00 00       	nop
  58:	59 c0       	rjmp	.+178    	; 0x10c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	57 c0       	rjmp	.+174    	; 0x10c <__bad_interrupt>
  5e:	00 00       	nop
  60:	55 c0       	rjmp	.+170    	; 0x10c <__bad_interrupt>
  62:	00 00       	nop
  64:	53 c0       	rjmp	.+166    	; 0x10c <__bad_interrupt>
  66:	00 00       	nop
  68:	51 c0       	rjmp	.+162    	; 0x10c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4f c0       	rjmp	.+158    	; 0x10c <__bad_interrupt>
  6e:	00 00       	nop
  70:	4d c0       	rjmp	.+154    	; 0x10c <__bad_interrupt>
  72:	00 00       	nop
  74:	4b c0       	rjmp	.+150    	; 0x10c <__bad_interrupt>
  76:	00 00       	nop
  78:	49 c0       	rjmp	.+146    	; 0x10c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	47 c0       	rjmp	.+142    	; 0x10c <__bad_interrupt>
  7e:	00 00       	nop
  80:	45 c0       	rjmp	.+138    	; 0x10c <__bad_interrupt>
  82:	00 00       	nop
  84:	43 c0       	rjmp	.+134    	; 0x10c <__bad_interrupt>
  86:	00 00       	nop
  88:	41 c0       	rjmp	.+130    	; 0x10c <__bad_interrupt>
	...

0000008c <__trampolines_end>:
  8c:	c8 0a       	sbc	r12, r24
  8e:	7f 6e       	ori	r23, 0xEF	; 239
  90:	99 3f       	cpi	r25, 0xF9	; 249
  92:	00 16       	cp	r0, r16
  94:	4c 2b       	or	r20, r28
  96:	49 40       	sbci	r20, 0x09	; 9
  98:	01 80       	ldd	r0, Z+1	; 0x01
  9a:	19 7e       	andi	r17, 0xE9	; 233
  9c:	48 3d       	cpi	r20, 0xD8	; 216
  9e:	6d 4b       	sbci	r22, 0xBD	; 189
  a0:	67 77       	andi	r22, 0x77	; 119
  a2:	4c 7f       	andi	r20, 0xFC	; 252
  a4:	6f 81       	ldd	r22, Y+7	; 0x07
  a6:	c0 39       	cpi	r28, 0x90	; 144
  a8:	21 63       	ori	r18, 0x31	; 49
  aa:	9d 5d       	subi	r25, 0xDD	; 221
  ac:	5f 73       	andi	r21, 0x3F	; 63
  ae:	31 79       	andi	r19, 0x91	; 145
  b0:	37 17       	cp	r19, r23
  b2:	76 53       	subi	r23, 0x36	; 54
  b4:	12 78       	andi	r17, 0x82	; 130
  b6:	3b 32       	cpi	r19, 0x2B	; 43
  b8:	5e 51       	subi	r21, 0x1E	; 30
  ba:	71 1f       	adc	r23, r17
  bc:	4f 57       	subi	r20, 0x7F	; 127
  be:	66 4c       	sbci	r22, 0xC6	; 198
  c0:	70 2a       	or	r7, r16
  c2:	7a 5b       	subi	r23, 0xBA	; 186
  c4:	6b 3c       	cpi	r22, 0xCB	; 203
  c6:	36 43       	sbci	r19, 0x36	; 54
  c8:	6c 0e       	add	r6, r28
  ca:	20 08       	sbc	r2, r0
  cc:	27 5a       	subi	r18, 0xA7	; 167
  ce:	2d 75       	andi	r18, 0x5D	; 93
  d0:	0f 00       	.word	0x000f	; ????

000000d2 <__ctors_end>:
  d2:	11 24       	eor	r1, r1
  d4:	1f be       	out	0x3f, r1	; 63
  d6:	cf ef       	ldi	r28, 0xFF	; 255
  d8:	d0 e1       	ldi	r29, 0x10	; 16
  da:	de bf       	out	0x3e, r29	; 62
  dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
  de:	11 e0       	ldi	r17, 0x01	; 1
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	ee e3       	ldi	r30, 0x3E	; 62
  e6:	fa e0       	ldi	r31, 0x0A	; 10
  e8:	00 e0       	ldi	r16, 0x00	; 0
  ea:	0b bf       	out	0x3b, r16	; 59
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x14>
  ee:	07 90       	elpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a0 30       	cpi	r26, 0x00	; 0
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0x10>

000000f8 <__do_clear_bss>:
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b1 e0       	ldi	r27, 0x01	; 1
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	a3 3f       	cpi	r26, 0xF3	; 243
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	00 d3       	rcall	.+1536   	; 0x70a <main>
 10a:	97 c4       	rjmp	.+2350   	; 0xa3a <_exit>

0000010c <__bad_interrupt>:
 10c:	79 cf       	rjmp	.-270    	; 0x0 <__vectors>

0000010e <_ZN4arch7pushBitEb>:
		uint16_t address = arch::getAddress(program,0) + 2;
		for (uint8_t i = 0; i<8; ++i){
			string_8_bytes[i] = eeprom_read_byte((uint8_t*) (address + i));
		}
	} // ### check if running correctly
}
 10e:	98 b3       	in	r25, 0x18	; 24
 110:	9e 7f       	andi	r25, 0xFE	; 254
 112:	89 2b       	or	r24, r25
 114:	88 bb       	out	0x18, r24	; 24
 116:	98 b3       	in	r25, 0x18	; 24
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	98 27       	eor	r25, r24
 11c:	98 bb       	out	0x18, r25	; 24
 11e:	98 b3       	in	r25, 0x18	; 24
 120:	89 27       	eor	r24, r25
 122:	88 bb       	out	0x18, r24	; 24
 124:	08 95       	ret

00000126 <_ZN4arch5latchEv>:
 126:	98 b3       	in	r25, 0x18	; 24
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	98 27       	eor	r25, r24
 12c:	98 bb       	out	0x18, r25	; 24
 12e:	98 b3       	in	r25, 0x18	; 24
 130:	89 27       	eor	r24, r25
 132:	88 bb       	out	0x18, r24	; 24
 134:	08 95       	ret

00000136 <_ZN4arch15pushLineVisibleEj>:
 136:	cf 92       	push	r12
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	7c 01       	movw	r14, r24
 148:	cf e0       	ldi	r28, 0x0F	; 15
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	01 e0       	ldi	r16, 0x01	; 1
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	dd 24       	eor	r13, r13
 152:	d3 94       	inc	r13
 154:	c1 2c       	mov	r12, r1
 156:	98 01       	movw	r18, r16
 158:	0c 2e       	mov	r0, r28
 15a:	02 c0       	rjmp	.+4      	; 0x160 <_ZN4arch15pushLineVisibleEj+0x2a>
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <_ZN4arch15pushLineVisibleEj+0x26>
 164:	2e 21       	and	r18, r14
 166:	3f 21       	and	r19, r15
 168:	8d 2d       	mov	r24, r13
 16a:	23 2b       	or	r18, r19
 16c:	09 f4       	brne	.+2      	; 0x170 <_ZN4arch15pushLineVisibleEj+0x3a>
 16e:	8c 2d       	mov	r24, r12
 170:	ce df       	rcall	.-100    	; 0x10e <_ZN4arch7pushBitEb>
 172:	21 97       	sbiw	r28, 0x01	; 1
 174:	80 f7       	brcc	.-32     	; 0x156 <_ZN4arch15pushLineVisibleEj+0x20>
 176:	d7 df       	rcall	.-82     	; 0x126 <_ZN4arch5latchEv>
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	df 90       	pop	r13
 186:	cf 90       	pop	r12
 188:	08 95       	ret

0000018a <_ZN4arch17instructionLengthEh>:
 18a:	80 3c       	cpi	r24, 0xC0	; 192
 18c:	58 f4       	brcc	.+22     	; 0x1a4 <_ZN4arch17instructionLengthEh+0x1a>
 18e:	98 2f       	mov	r25, r24
 190:	94 7f       	andi	r25, 0xF4	; 244
 192:	94 3b       	cpi	r25, 0xB4	; 180
 194:	49 f0       	breq	.+18     	; 0x1a8 <_ZN4arch17instructionLengthEh+0x1e>
 196:	80 7f       	andi	r24, 0xF0	; 240
 198:	80 38       	cpi	r24, 0x80	; 128
 19a:	41 f0       	breq	.+16     	; 0x1ac <_ZN4arch17instructionLengthEh+0x22>
 19c:	80 3a       	cpi	r24, 0xA0	; 160
 19e:	41 f0       	breq	.+16     	; 0x1b0 <_ZN4arch17instructionLengthEh+0x26>
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	08 95       	ret
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	08 95       	ret
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	08 95       	ret
 1b0:	88 e0       	ldi	r24, 0x08	; 8
 1b2:	08 95       	ret

000001b4 <_ZN4arch17EEPAddressHelper_EhhRKb>:
 1b4:	cf 92       	push	r12
 1b6:	df 92       	push	r13
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	d8 2f       	mov	r29, r24
 1c6:	d6 2e       	mov	r13, r22
 1c8:	7a 01       	movw	r14, r20
 1ca:	81 11       	cpse	r24, r1
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <_ZN4arch17EEPAddressHelper_EhhRKb+0x28>
 1ce:	fa 01       	movw	r30, r20
 1d0:	80 81       	ld	r24, Z
 1d2:	81 11       	cpse	r24, r1
 1d4:	0a c0       	rjmp	.+20     	; 0x1ea <_ZN4arch17EEPAddressHelper_EhhRKb+0x36>
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	9f ef       	ldi	r25, 0xFF	; 255
 1da:	62 c0       	rjmp	.+196    	; 0x2a0 <_ZN4arch17EEPAddressHelper_EhhRKb+0xec>
 1dc:	fa 01       	movw	r30, r20
 1de:	80 81       	ld	r24, Z
 1e0:	81 11       	cpse	r24, r1
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <_ZN4arch17EEPAddressHelper_EhhRKb+0x34>
 1e4:	d1 50       	subi	r29, 0x01	; 1
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <_ZN4arch17EEPAddressHelper_EhhRKb+0x36>
 1e8:	d0 e0       	ldi	r29, 0x00	; 0
 1ea:	00 e0       	ldi	r16, 0x00	; 0
 1ec:	14 e0       	ldi	r17, 0x04	; 4
 1ee:	cc 24       	eor	r12, r12
 1f0:	ca 94       	dec	r12
 1f2:	29 c0       	rjmp	.+82     	; 0x246 <_ZN4arch17EEPAddressHelper_EhhRKb+0x92>
 1f4:	d1 50       	subi	r29, 0x01	; 1
 1f6:	c8 01       	movw	r24, r16
 1f8:	18 d4       	rcall	.+2096   	; 0xa2a <eeprom_read_byte>
 1fa:	c8 2f       	mov	r28, r24
 1fc:	c8 01       	movw	r24, r16
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	14 d4       	rcall	.+2088   	; 0xa2a <eeprom_read_byte>
 202:	2c 2f       	mov	r18, r28
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	32 2f       	mov	r19, r18
 208:	22 27       	eor	r18, r18
 20a:	89 01       	movw	r16, r18
 20c:	08 2b       	or	r16, r24
 20e:	c8 01       	movw	r24, r16
 210:	dc d0       	rcall	.+440    	; 0x3ca <_ZN8hardware9isEEPNullEj>
 212:	88 23       	and	r24, r24
 214:	79 f0       	breq	.+30     	; 0x234 <_ZN4arch17EEPAddressHelper_EhhRKb+0x80>
 216:	01 c0       	rjmp	.+2      	; 0x21a <_ZN4arch17EEPAddressHelper_EhhRKb+0x66>
 218:	dc 2d       	mov	r29, r12
 21a:	f7 01       	movw	r30, r14
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	31 f0       	breq	.+12     	; 0x22e <_ZN4arch17EEPAddressHelper_EhhRKb+0x7a>
 222:	8d 2f       	mov	r24, r29
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	91 95       	neg	r25
 228:	81 95       	neg	r24
 22a:	91 09       	sbc	r25, r1
 22c:	39 c0       	rjmp	.+114    	; 0x2a0 <_ZN4arch17EEPAddressHelper_EhhRKb+0xec>
 22e:	85 e6       	ldi	r24, 0x65	; 101
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	f7 d1       	rcall	.+1006   	; 0x622 <_ZN3led5errorEj>
 234:	d1 11       	cpse	r29, r1
 236:	07 c0       	rjmp	.+14     	; 0x246 <_ZN4arch17EEPAddressHelper_EhhRKb+0x92>
 238:	f7 01       	movw	r30, r14
 23a:	80 81       	ld	r24, Z
 23c:	88 23       	and	r24, r24
 23e:	19 f0       	breq	.+6      	; 0x246 <_ZN4arch17EEPAddressHelper_EhhRKb+0x92>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	ee d1       	rcall	.+988    	; 0x622 <_ZN3led5errorEj>
 246:	d1 11       	cpse	r29, r1
 248:	d5 cf       	rjmp	.-86     	; 0x1f4 <_ZN4arch17EEPAddressHelper_EhhRKb+0x40>
 24a:	f7 01       	movw	r30, r14
 24c:	80 81       	ld	r24, Z
 24e:	81 11       	cpse	r24, r1
 250:	15 c0       	rjmp	.+42     	; 0x27c <_ZN4arch17EEPAddressHelper_EhhRKb+0xc8>
 252:	dd 20       	and	r13, r13
 254:	79 f0       	breq	.+30     	; 0x274 <_ZN4arch17EEPAddressHelper_EhhRKb+0xc0>
 256:	e8 01       	movw	r28, r16
 258:	2e 96       	adiw	r28, 0x0e	; 14
 25a:	da 94       	dec	r13
 25c:	dd 20       	and	r13, r13
 25e:	61 f0       	breq	.+24     	; 0x278 <_ZN4arch17EEPAddressHelper_EhhRKb+0xc4>
 260:	da 94       	dec	r13
 262:	ce 01       	movw	r24, r28
 264:	e2 d3       	rcall	.+1988   	; 0xa2a <eeprom_read_byte>
 266:	91 df       	rcall	.-222    	; 0x18a <_ZN4arch17instructionLengthEh>
 268:	c8 0f       	add	r28, r24
 26a:	d1 1d       	adc	r29, r1
 26c:	d1 10       	cpse	r13, r1
 26e:	f8 cf       	rjmp	.-16     	; 0x260 <_ZN4arch17EEPAddressHelper_EhhRKb+0xac>
 270:	ce 01       	movw	r24, r28
 272:	16 c0       	rjmp	.+44     	; 0x2a0 <_ZN4arch17EEPAddressHelper_EhhRKb+0xec>
 274:	c8 01       	movw	r24, r16
 276:	14 c0       	rjmp	.+40     	; 0x2a0 <_ZN4arch17EEPAddressHelper_EhhRKb+0xec>
 278:	ce 01       	movw	r24, r28
 27a:	12 c0       	rjmp	.+36     	; 0x2a0 <_ZN4arch17EEPAddressHelper_EhhRKb+0xec>
 27c:	c8 01       	movw	r24, r16
 27e:	d5 d3       	rcall	.+1962   	; 0xa2a <eeprom_read_byte>
 280:	c8 2f       	mov	r28, r24
 282:	c8 01       	movw	r24, r16
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	d1 d3       	rcall	.+1954   	; 0xa2a <eeprom_read_byte>
 288:	2c 2f       	mov	r18, r28
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	32 2f       	mov	r19, r18
 28e:	22 27       	eor	r18, r18
 290:	89 01       	movw	r16, r18
 292:	08 2b       	or	r16, r24
 294:	c8 01       	movw	r24, r16
 296:	99 d0       	rcall	.+306    	; 0x3ca <_ZN8hardware9isEEPNullEj>
 298:	81 11       	cpse	r24, r1
 29a:	be cf       	rjmp	.-132    	; 0x218 <_ZN4arch17EEPAddressHelper_EhhRKb+0x64>
 29c:	dc 2d       	mov	r29, r12
 29e:	d3 cf       	rjmp	.-90     	; 0x246 <_ZN4arch17EEPAddressHelper_EhhRKb+0x92>
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	ff 90       	pop	r15
 2aa:	ef 90       	pop	r14
 2ac:	df 90       	pop	r13
 2ae:	cf 90       	pop	r12
 2b0:	08 95       	ret

000002b2 <_ZN4arch24programHeaderInterpreterEv>:

void arch::programHeaderInterpreter(){
 2b2:	cf 92       	push	r12
 2b4:	df 92       	push	r13
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
	/* interprete the 14 INIT Bytes of the begin of a program (and update the pc) */
	pavrecord avrecord = &(state.light.avrecord[state.light.ptr]);
 2c2:	c0 91 40 01 	lds	r28, 0x0140	; 0x800140 <__data_end+0x40>
 2c6:	ec 2e       	mov	r14, r28
 2c8:	f1 2c       	mov	r15, r1
	   C:										Reg 2
	   D:										Reg 3
	   E:													------------------------------------- address of the 1st instruction (PROGRAM PART)
	   F:		...															*/
	/************************************************************************/
	if (avrecord->program==0){ // if program 0 is called there is no header to deal with
 2ca:	f7 01       	movw	r30, r14
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	ee 0f       	add	r30, r30
 2d2:	ff 1f       	adc	r31, r31
 2d4:	ee 0f       	add	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	e0 50       	subi	r30, 0x00	; 0
 2da:	ff 4f       	sbci	r31, 0xFF	; 255
 2dc:	80 81       	ld	r24, Z
 2de:	88 23       	and	r24, r24
 2e0:	81 f1       	breq	.+96     	; 0x342 <_ZN4arch24programHeaderInterpreterEv+0x90>
		return;
	}
	for(uint8_t i = 1; i < 4; ++i){
		avrecord->reg[i] = eeprom_read_byte((uint8_t*)(avrecord->pc+10+i));
 2e2:	f7 01       	movw	r30, r14
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	e0 50       	subi	r30, 0x00	; 0
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	c1 80       	ldd	r12, Z+1	; 0x01
 2f6:	d2 80       	ldd	r13, Z+2	; 0x02
 2f8:	86 01       	movw	r16, r12
 2fa:	05 5f       	subi	r16, 0xF5	; 245
 2fc:	1f 4f       	sbci	r17, 0xFF	; 255
 2fe:	e7 01       	movw	r28, r14
 300:	cc 0f       	add	r28, r28
 302:	dd 1f       	adc	r29, r29
 304:	cc 0f       	add	r28, r28
 306:	dd 1f       	adc	r29, r29
 308:	cc 0f       	add	r28, r28
 30a:	dd 1f       	adc	r29, r29
 30c:	cb 5f       	subi	r28, 0xFB	; 251
 30e:	de 4f       	sbci	r29, 0xFE	; 254
 310:	8e e0       	ldi	r24, 0x0E	; 14
 312:	c8 0e       	add	r12, r24
 314:	d1 1c       	adc	r13, r1
 316:	c8 01       	movw	r24, r16
 318:	88 d3       	rcall	.+1808   	; 0xa2a <eeprom_read_byte>
 31a:	89 93       	st	Y+, r24
 31c:	0f 5f       	subi	r16, 0xFF	; 255
 31e:	1f 4f       	sbci	r17, 0xFF	; 255
	   F:		...															*/
	/************************************************************************/
	if (avrecord->program==0){ // if program 0 is called there is no header to deal with
		return;
	}
	for(uint8_t i = 1; i < 4; ++i){
 320:	0c 15       	cp	r16, r12
 322:	1d 05       	cpc	r17, r13
 324:	c1 f7       	brne	.-16     	; 0x316 <_ZN4arch24programHeaderInterpreterEv+0x64>
		avrecord->reg[i] = eeprom_read_byte((uint8_t*)(avrecord->pc+10+i));
	}
	avrecord->pc += 14;
 326:	f7 01       	movw	r30, r14
 328:	ee 0f       	add	r30, r30
 32a:	ff 1f       	adc	r31, r31
 32c:	ee 0f       	add	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	e0 50       	subi	r30, 0x00	; 0
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	81 81       	ldd	r24, Z+1	; 0x01
 33a:	92 81       	ldd	r25, Z+2	; 0x02
 33c:	0e 96       	adiw	r24, 0x0e	; 14
 33e:	92 83       	std	Z+2, r25	; 0x02
 340:	81 83       	std	Z+1, r24	; 0x01
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	ff 90       	pop	r15
 34c:	ef 90       	pop	r14
 34e:	df 90       	pop	r13
 350:	cf 90       	pop	r12
 352:	08 95       	ret

00000354 <_ZN4arch10runProgramEh>:

inline void BufferReadIndexerInc(){
	state.light.read = (state.light.read + 1) % BUFFERSIZE;
}

void arch::runProgram(uint8_t program){// for user
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	1f 92       	push	r1
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
	/* initialization of avrecord to run given program */
	//## turn off timer
	state.light.ptr = 0;
 362:	00 e0       	ldi	r16, 0x00	; 0
 364:	11 e0       	ldi	r17, 0x01	; 1
 366:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end+0x40>
	state.light.avrecord[0].returnMatter = 0x00;
 36a:	f8 01       	movw	r30, r16
 36c:	13 82       	std	Z+3, r1	; 0x03
	state.light.avrecord[0].program = program;
 36e:	80 83       	st	Z, r24
					program counting	(up to 255)											(iff counting)
																														*/
	
	inline uint16_t getAddress(uint8_t program, uint8_t instruction){
		/* calculate the eeprom address of instruction (instruction) in program (program) */
		return EEPAddressHelper_(program,instruction);
 370:	19 82       	std	Y+1, r1	; 0x01
 372:	ae 01       	movw	r20, r28
 374:	4f 5f       	subi	r20, 0xFF	; 255
 376:	5f 4f       	sbci	r21, 0xFF	; 255
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	1c df       	rcall	.-456    	; 0x1b4 <_ZN4arch17EEPAddressHelper_EhhRKb>
	state.light.avrecord[0].pc = arch::getAddress(program,0);
 37c:	f8 01       	movw	r30, r16
 37e:	92 83       	std	Z+2, r25	; 0x02
 380:	81 83       	std	Z+1, r24	; 0x01
	state.light.read =  0;
 382:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <__data_end+0x71>
	state.light.write = 0;
 386:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end+0x72>
	
	state.light.bufferWait = true;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <__data_end+0x73>
} tstate;

static tstate state;

inline void WaitOnlyBufferPrepare(){
	state.light.buffer[state.light.write].light = 0x8000;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 e8       	ldi	r25, 0x80	; 128
 394:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__data_end+0x42>
 398:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <__data_end+0x41>
	state.light.write = 0;
	
	state.light.bufferWait = true;
	WaitOnlyBufferPrepare();
	// ## timer will be started automatically because of bufferWait
	arch::programHeaderInterpreter();
 39c:	8a df       	rcall	.-236    	; 0x2b2 <_ZN4arch24programHeaderInterpreterEv>
}
 39e:	0f 90       	pop	r0
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	08 95       	ret

000003aa <_ZN8hardware5delayEj>:
#include "f_ledline.h"

void hardware::delay(uint16_t ms){
	/* busy delay in ms */
	// <<<<<< refactor and check the function of delay
	for(uint16_t i = 0; i<ms; i+=100){
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	69 f0       	breq	.+26     	; 0x3c8 <_ZN8hardware5delayEj+0x1e>
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b2:	ef e3       	ldi	r30, 0x3F	; 63
 3b4:	fc e9       	ldi	r31, 0x9C	; 156
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <_ZN8hardware5delayEj+0xc>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <_ZN8hardware5delayEj+0x12>
 3bc:	00 00       	nop
 3be:	2c 59       	subi	r18, 0x9C	; 156
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
 3c2:	28 17       	cp	r18, r24
 3c4:	39 07       	cpc	r19, r25
 3c6:	a8 f3       	brcs	.-22     	; 0x3b2 <_ZN8hardware5delayEj+0x8>
 3c8:	08 95       	ret

000003ca <_ZN8hardware9isEEPNullEj>:
		_delay_ms(10);
	}
}

bool hardware::isEEPNull(uint16_t address){
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	ec 01       	movw	r28, r24
	/* return whether an eeprom address is out of range (NULL), throw an error if a non standard NULL address (!=EEPNULL) was used */
	if (	(address >= (1<<12))		&&		(address!=EEPNULL)		){
 3d0:	90 51       	subi	r25, 0x10	; 16
 3d2:	8f 3f       	cpi	r24, 0xFF	; 255
 3d4:	9f 4e       	sbci	r25, 0xEF	; 239
 3d6:	18 f4       	brcc	.+6      	; 0x3de <_ZN8hardware9isEEPNullEj+0x14>
		led::error(0);
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	22 d1       	rcall	.+580    	; 0x622 <_ZN3led5errorEj>
	}
	return (address >= (1<<12));
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	c1 15       	cp	r28, r1
 3e2:	d0 41       	sbci	r29, 0x10	; 16
 3e4:	08 f4       	brcc	.+2      	; 0x3e8 <_ZN8hardware9isEEPNullEj+0x1e>
 3e6:	80 e0       	ldi	r24, 0x00	; 0
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <_ZN3led5latchEv>:
	for (uint8_t i = 0; i<8; ++i){
		_LEDLINE_ &= ~(1<<(DOTPOSITION + 8 * i)); // make it 0
		_LEDLINE_ |= ((1<<(DOTPOSITION + 8 * i)) * !! (dotCode & (1<<i) ));
	}
	pushMemory();
}
 3ee:	9b b3       	in	r25, 0x1b	; 27
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	98 27       	eor	r25, r24
 3f4:	9b bb       	out	0x1b, r25	; 27
 3f6:	9b b3       	in	r25, 0x1b	; 27
 3f8:	89 27       	eor	r24, r25
 3fa:	8b bb       	out	0x1b, r24	; 27
 3fc:	08 95       	ret

000003fe <_ZN3led5clockEv>:
 3fe:	9b b3       	in	r25, 0x1b	; 27
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	98 27       	eor	r25, r24
 404:	9b bb       	out	0x1b, r25	; 27
 406:	9b b3       	in	r25, 0x1b	; 27
 408:	89 27       	eor	r24, r25
 40a:	8b bb       	out	0x1b, r24	; 27
 40c:	08 95       	ret

0000040e <_ZN3led13pushBitInternEb>:
 40e:	9b b3       	in	r25, 0x1b	; 27
 410:	9e 7f       	andi	r25, 0xFE	; 254
 412:	89 2b       	or	r24, r25
 414:	8b bb       	out	0x1b, r24	; 27
 416:	f3 cf       	rjmp	.-26     	; 0x3fe <_ZN3led5clockEv>
 418:	08 95       	ret

0000041a <_ZN3led8pushByteEh>:
 41a:	af 92       	push	r10
 41c:	bf 92       	push	r11
 41e:	cf 92       	push	r12
 420:	df 92       	push	r13
 422:	ef 92       	push	r14
 424:	ff 92       	push	r15
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	e8 2f       	mov	r30, r24
 430:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <_ZL9_LEDLINE_>
 434:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <_ZL9_LEDLINE_+0x1>
 438:	40 91 ec 01 	lds	r20, 0x01EC	; 0x8001ec <_ZL9_LEDLINE_+0x2>
 43c:	50 91 ed 01 	lds	r21, 0x01ED	; 0x8001ed <_ZL9_LEDLINE_+0x3>
 440:	60 91 ee 01 	lds	r22, 0x01EE	; 0x8001ee <_ZL9_LEDLINE_+0x4>
 444:	70 91 ef 01 	lds	r23, 0x01EF	; 0x8001ef <_ZL9_LEDLINE_+0x5>
 448:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZL9_LEDLINE_+0x6>
 44c:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <_ZL9_LEDLINE_+0x7>
 450:	08 e0       	ldi	r16, 0x08	; 8
 452:	ab d2       	rcall	.+1366   	; 0x9aa <__ashldi3>
 454:	a2 2e       	mov	r10, r18
 456:	b3 2e       	mov	r11, r19
 458:	c4 2e       	mov	r12, r20
 45a:	d5 2e       	mov	r13, r21
 45c:	e6 2e       	mov	r14, r22
 45e:	f7 2e       	mov	r15, r23
 460:	08 2f       	mov	r16, r24
 462:	19 2f       	mov	r17, r25
 464:	2e 2f       	mov	r18, r30
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	d1 d2       	rcall	.+1442   	; 0xa18 <__adddi3>
 476:	20 93 ea 01 	sts	0x01EA, r18	; 0x8001ea <_ZL9_LEDLINE_>
 47a:	30 93 eb 01 	sts	0x01EB, r19	; 0x8001eb <_ZL9_LEDLINE_+0x1>
 47e:	40 93 ec 01 	sts	0x01EC, r20	; 0x8001ec <_ZL9_LEDLINE_+0x2>
 482:	50 93 ed 01 	sts	0x01ED, r21	; 0x8001ed <_ZL9_LEDLINE_+0x3>
 486:	60 93 ee 01 	sts	0x01EE, r22	; 0x8001ee <_ZL9_LEDLINE_+0x4>
 48a:	70 93 ef 01 	sts	0x01EF, r23	; 0x8001ef <_ZL9_LEDLINE_+0x5>
 48e:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_ZL9_LEDLINE_+0x6>
 492:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <_ZL9_LEDLINE_+0x7>
 496:	c7 e0       	ldi	r28, 0x07	; 7
 498:	d0 e0       	ldi	r29, 0x00	; 0
 49a:	0e 2f       	mov	r16, r30
 49c:	10 e0       	ldi	r17, 0x00	; 0
 49e:	c8 01       	movw	r24, r16
 4a0:	0c 2e       	mov	r0, r28
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <_ZN3led8pushByteEh+0x8e>
 4a4:	95 95       	asr	r25
 4a6:	87 95       	ror	r24
 4a8:	0a 94       	dec	r0
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <_ZN3led8pushByteEh+0x8a>
 4ac:	81 70       	andi	r24, 0x01	; 1
 4ae:	af df       	rcall	.-162    	; 0x40e <_ZN3led13pushBitInternEb>
 4b0:	21 97       	sbiw	r28, 0x01	; 1
 4b2:	a8 f7       	brcc	.-22     	; 0x49e <_ZN3led8pushByteEh+0x84>
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	df 90       	pop	r13
 4c2:	cf 90       	pop	r12
 4c4:	bf 90       	pop	r11
 4c6:	af 90       	pop	r10
 4c8:	08 95       	ret

000004ca <_ZN3led15pushByteVisibleEh>:
 4ca:	a7 df       	rcall	.-178    	; 0x41a <_ZN3led8pushByteEh>
 4cc:	90 cf       	rjmp	.-224    	; 0x3ee <_ZN3led5latchEv>
 4ce:	08 95       	ret

000004d0 <_ZN3led8signCodeEc>:
 4d0:	e8 2f       	mov	r30, r24
 4d2:	ef 77       	andi	r30, 0x7F	; 127
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	ea 30       	cpi	r30, 0x0A	; 10
 4d8:	f1 05       	cpc	r31, r1
 4da:	a1 f0       	breq	.+40     	; 0x504 <_ZN3led8signCodeEc+0x34>
 4dc:	e1 32       	cpi	r30, 0x21	; 33
 4de:	f1 05       	cpc	r31, r1
 4e0:	18 f4       	brcc	.+6      	; 0x4e8 <_ZN3led8signCodeEc+0x18>
 4e2:	80 78       	andi	r24, 0x80	; 128
 4e4:	80 95       	com	r24
 4e6:	08 95       	ret
 4e8:	e1 36       	cpi	r30, 0x61	; 97
 4ea:	f1 05       	cpc	r31, r1
 4ec:	28 f0       	brcs	.+10     	; 0x4f8 <_ZN3led8signCodeEc+0x28>
 4ee:	eb 37       	cpi	r30, 0x7B	; 123
 4f0:	f1 05       	cpc	r31, r1
 4f2:	08 f0       	brcs	.+2      	; 0x4f6 <_ZN3led8signCodeEc+0x26>
 4f4:	36 96       	adiw	r30, 0x06	; 6
 4f6:	b0 97       	sbiw	r30, 0x20	; 32
 4f8:	e5 59       	subi	r30, 0x95	; 149
 4fa:	ff 4f       	sbci	r31, 0xFF	; 255
 4fc:	e4 91       	lpm	r30, Z
 4fe:	80 78       	andi	r24, 0x80	; 128
 500:	8e 27       	eor	r24, r30
 502:	08 95       	ret
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	08 95       	ret

00000508 <_ZN3led9printSignEc>:
 508:	e3 df       	rcall	.-58     	; 0x4d0 <_ZN3led8signCodeEc>
 50a:	df cf       	rjmp	.-66     	; 0x4ca <_ZN3led15pushByteVisibleEh>
 50c:	08 95       	ret

0000050e <_ZN3led10printDigitEh>:
 50e:	8a 30       	cpi	r24, 0x0A	; 10
 510:	18 f0       	brcs	.+6      	; 0x518 <_ZN3led10printDigitEh+0xa>
 512:	80 e4       	ldi	r24, 0x40	; 64
 514:	f9 cf       	rjmp	.-14     	; 0x508 <_ZN3led9printSignEc>
 516:	08 95       	ret
 518:	80 5d       	subi	r24, 0xD0	; 208
 51a:	f6 cf       	rjmp	.-20     	; 0x508 <_ZN3led9printSignEc>
 51c:	08 95       	ret

0000051e <_ZN3led8printIntExb>:
 51e:	2f 92       	push	r2
 520:	3f 92       	push	r3
 522:	4f 92       	push	r4
 524:	5f 92       	push	r5
 526:	6f 92       	push	r6
 528:	7f 92       	push	r7
 52a:	8f 92       	push	r8
 52c:	9f 92       	push	r9
 52e:	af 92       	push	r10
 530:	bf 92       	push	r11
 532:	cf 92       	push	r12
 534:	df 92       	push	r13
 536:	ef 92       	push	r14
 538:	ff 92       	push	r15
 53a:	0f 93       	push	r16
 53c:	1f 93       	push	r17
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	d2 2f       	mov	r29, r18
 544:	c3 2f       	mov	r28, r19
 546:	24 2e       	mov	r2, r20
 548:	35 2e       	mov	r3, r21
 54a:	46 2e       	mov	r4, r22
 54c:	57 2e       	mov	r5, r23
 54e:	68 2e       	mov	r6, r24
 550:	79 2e       	mov	r7, r25
 552:	0f e3       	ldi	r16, 0x3F	; 63
 554:	45 d2       	rcall	.+1162   	; 0x9e0 <__lshrdi3>
 556:	92 2e       	mov	r9, r18
 558:	82 2e       	mov	r8, r18
 55a:	22 23       	and	r18, r18
 55c:	11 f0       	breq	.+4      	; 0x562 <_ZN3led8printIntExb+0x44>
 55e:	8d e2       	ldi	r24, 0x2D	; 45
 560:	d3 df       	rcall	.-90     	; 0x508 <_ZN3led9printSignEc>
 562:	0f 2e       	mov	r0, r31
 564:	fa e0       	ldi	r31, 0x0A	; 10
 566:	af 2e       	mov	r10, r31
 568:	f0 2d       	mov	r31, r0
 56a:	b1 2c       	mov	r11, r1
 56c:	c1 2c       	mov	r12, r1
 56e:	d1 2c       	mov	r13, r1
 570:	e1 2c       	mov	r14, r1
 572:	f1 2c       	mov	r15, r1
 574:	00 e0       	ldi	r16, 0x00	; 0
 576:	10 e0       	ldi	r17, 0x00	; 0
 578:	2d 2f       	mov	r18, r29
 57a:	3c 2f       	mov	r19, r28
 57c:	42 2d       	mov	r20, r2
 57e:	53 2d       	mov	r21, r3
 580:	64 2d       	mov	r22, r4
 582:	75 2d       	mov	r23, r5
 584:	86 2d       	mov	r24, r6
 586:	97 2d       	mov	r25, r7
 588:	42 d1       	rcall	.+644    	; 0x80e <__divdi3>
 58a:	42 2f       	mov	r20, r18
 58c:	53 2f       	mov	r21, r19
 58e:	41 15       	cp	r20, r1
 590:	51 05       	cpc	r21, r1
 592:	a9 f0       	breq	.+42     	; 0x5be <_ZN3led8printIntExb+0xa0>
 594:	ba 01       	movw	r22, r20
 596:	77 23       	and	r23, r23
 598:	24 f4       	brge	.+8      	; 0x5a2 <_ZN3led8printIntExb+0x84>
 59a:	66 27       	eor	r22, r22
 59c:	77 27       	eor	r23, r23
 59e:	64 1b       	sub	r22, r20
 5a0:	75 0b       	sbc	r23, r21
 5a2:	97 2f       	mov	r25, r23
 5a4:	99 0f       	add	r25, r25
 5a6:	99 0b       	sbc	r25, r25
 5a8:	00 e0       	ldi	r16, 0x00	; 0
 5aa:	26 2f       	mov	r18, r22
 5ac:	37 2f       	mov	r19, r23
 5ae:	49 2f       	mov	r20, r25
 5b0:	59 2f       	mov	r21, r25
 5b2:	69 2f       	mov	r22, r25
 5b4:	79 2f       	mov	r23, r25
 5b6:	89 2f       	mov	r24, r25
 5b8:	b2 df       	rcall	.-156    	; 0x51e <_ZN3led8printIntExb>
 5ba:	89 2c       	mov	r8, r9
 5bc:	88 0e       	add	r8, r24
 5be:	4d 2f       	mov	r20, r29
 5c0:	5c 2f       	mov	r21, r28
 5c2:	ca 01       	movw	r24, r20
 5c4:	99 23       	and	r25, r25
 5c6:	24 f4       	brge	.+8      	; 0x5d0 <_ZN3led8printIntExb+0xb2>
 5c8:	88 27       	eor	r24, r24
 5ca:	99 27       	eor	r25, r25
 5cc:	84 1b       	sub	r24, r20
 5ce:	95 0b       	sbc	r25, r21
 5d0:	6a e0       	ldi	r22, 0x0A	; 10
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	07 d1       	rcall	.+526    	; 0x7e4 <__divmodhi4>
 5d6:	9b df       	rcall	.-202    	; 0x50e <_ZN3led10printDigitEh>
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	88 0d       	add	r24, r8
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	ff 90       	pop	r15
 5e6:	ef 90       	pop	r14
 5e8:	df 90       	pop	r13
 5ea:	cf 90       	pop	r12
 5ec:	bf 90       	pop	r11
 5ee:	af 90       	pop	r10
 5f0:	9f 90       	pop	r9
 5f2:	8f 90       	pop	r8
 5f4:	7f 90       	pop	r7
 5f6:	6f 90       	pop	r6
 5f8:	5f 90       	pop	r5
 5fa:	4f 90       	pop	r4
 5fc:	3f 90       	pop	r3
 5fe:	2f 90       	pop	r2
 600:	08 95       	ret

00000602 <_ZN3led5clearEv>:
 602:	cf 93       	push	r28
 604:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <_ZL10LINELENGTH>
 608:	88 23       	and	r24, r24
 60a:	41 f0       	breq	.+16     	; 0x61c <_ZN3led5clearEv+0x1a>
 60c:	c0 e0       	ldi	r28, 0x00	; 0
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	04 df       	rcall	.-504    	; 0x41a <_ZN3led8pushByteEh>
 612:	cf 5f       	subi	r28, 0xFF	; 255
 614:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <_ZL10LINELENGTH>
 618:	c8 17       	cp	r28, r24
 61a:	c8 f3       	brcs	.-14     	; 0x60e <_ZN3led5clearEv+0xc>
 61c:	e8 de       	rcall	.-560    	; 0x3ee <_ZN3led5latchEv>
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <_ZN3led5errorEj>:

void led::error(const uint16_t code){
 622:	8f 92       	push	r8
 624:	9f 92       	push	r9
 626:	af 92       	push	r10
 628:	bf 92       	push	r11
 62a:	cf 92       	push	r12
 62c:	df 92       	push	r13
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	8c 01       	movw	r16, r24
	//static_assert(LINELENGTH>=4,"The ledError() needs at least 4 led elements!");  <<<<<<<< config c++11
	// one day we will put this all into a class. the assertion above should be part of the ctor <<<<<<<
	
	uint8_t SREG_temporal = SREG; // save interrupt state
 63c:	cf b7       	in	r28, 0x3f	; 63
	cli();
 63e:	f8 94       	cli
	led::clear();
 640:	e0 df       	rcall	.-64     	; 0x602 <_ZN3led5clearEv>
	led::printSign('E');
 642:	85 e4       	ldi	r24, 0x45	; 69
 644:	61 df       	rcall	.-318    	; 0x508 <_ZN3led9printSignEc>
	hardware::delay(3000);
 646:	88 eb       	ldi	r24, 0xB8	; 184
 648:	9b e0       	ldi	r25, 0x0B	; 11
 64a:	af de       	rcall	.-674    	; 0x3aa <_ZN8hardware5delayEj>
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	if (code < 100) led::printDigit(0);
 64c:	04 36       	cpi	r16, 0x64	; 100
 64e:	11 05       	cpc	r17, r1
 650:	d0 f4       	brcc	.+52     	; 0x686 <_ZN3led5errorEj+0x64>
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	5c df       	rcall	.-328    	; 0x50e <_ZN3led10printDigitEh>
	if (code < 10 ) led::printDigit(0);
 656:	0a 30       	cpi	r16, 0x0A	; 10
 658:	11 05       	cpc	r17, r1
 65a:	c8 f4       	brcc	.+50     	; 0x68e <_ZN3led5errorEj+0x6c>
 65c:	27 c0       	rjmp	.+78     	; 0x6ac <_ZN3led5errorEj+0x8a>
	led::printInt(code, false);
	hardware::delay(60000);// add some fancy blinking <<<<<<<< /// in some cases it wouldn't be useful to stop evben for 60s. make some flag for that in class later
	if (code > 99){
		while (1) {
			led::pushBitIntern(false);// this is only to avoid compiler optimization trashing this infinite loop
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	d6 de       	rcall	.-596    	; 0x40e <_ZN3led13pushBitInternEb>
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	if (code < 100) led::printDigit(0);
	if (code < 10 ) led::printDigit(0);
	led::printInt(code, false);
	hardware::delay(60000);// add some fancy blinking <<<<<<<< /// in some cases it wouldn't be useful to stop evben for 60s. make some flag for that in class later
	if (code > 99){
 662:	fd cf       	rjmp	.-6      	; 0x65e <_ZN3led5errorEj+0x3c>
		while (1) {
			led::pushBitIntern(false);// this is only to avoid compiler optimization trashing this infinite loop
		}
	}
	SREG = SREG_temporal; // activate interrupts
 664:	cf bf       	out	0x3f, r28	; 63
 666:	44 c0       	rjmp	.+136    	; 0x6f0 <_ZN3led5errorEj+0xce>
	led::printSign('E');
	hardware::delay(3000);
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	if (code < 100) led::printDigit(0);
	if (code < 10 ) led::printDigit(0);
	led::printInt(code, false);
 668:	c8 01       	movw	r24, r16
 66a:	00 e0       	ldi	r16, 0x00	; 0
 66c:	28 2f       	mov	r18, r24
 66e:	39 2f       	mov	r19, r25
 670:	40 e0       	ldi	r20, 0x00	; 0
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	50 df       	rcall	.-352    	; 0x51e <_ZN3led8printIntExb>
	hardware::delay(60000);// add some fancy blinking <<<<<<<< /// in some cases it wouldn't be useful to stop evben for 60s. make some flag for that in class later
 67e:	80 e6       	ldi	r24, 0x60	; 96
 680:	9a ee       	ldi	r25, 0xEA	; 234
 682:	93 de       	rcall	.-730    	; 0x3aa <_ZN8hardware5delayEj>
 684:	ec cf       	rjmp	.-40     	; 0x65e <_ZN3led5errorEj+0x3c>
	led::clear();
	led::printSign('E');
	hardware::delay(3000);
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	if (code < 100) led::printDigit(0);
	if (code < 10 ) led::printDigit(0);
 686:	0a 30       	cpi	r16, 0x0A	; 10
 688:	11 05       	cpc	r17, r1
 68a:	70 f7       	brcc	.-36     	; 0x668 <_ZN3led5errorEj+0x46>
 68c:	20 c0       	rjmp	.+64     	; 0x6ce <_ZN3led5errorEj+0xac>
	led::printInt(code, false);
 68e:	48 01       	movw	r8, r16
 690:	00 e0       	ldi	r16, 0x00	; 0
 692:	28 2d       	mov	r18, r8
 694:	39 2d       	mov	r19, r9
 696:	40 e0       	ldi	r20, 0x00	; 0
 698:	50 e0       	ldi	r21, 0x00	; 0
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	3d df       	rcall	.-390    	; 0x51e <_ZN3led8printIntExb>
	hardware::delay(60000);// add some fancy blinking <<<<<<<< /// in some cases it wouldn't be useful to stop evben for 60s. make some flag for that in class later
 6a4:	80 e6       	ldi	r24, 0x60	; 96
 6a6:	9a ee       	ldi	r25, 0xEA	; 234
 6a8:	80 de       	rcall	.-768    	; 0x3aa <_ZN8hardware5delayEj>
 6aa:	dc cf       	rjmp	.-72     	; 0x664 <_ZN3led5errorEj+0x42>
	led::clear();
	led::printSign('E');
	hardware::delay(3000);
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	if (code < 100) led::printDigit(0);
	if (code < 10 ) led::printDigit(0);
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	2f df       	rcall	.-418    	; 0x50e <_ZN3led10printDigitEh>
	led::printInt(code, false);
 6b0:	48 01       	movw	r8, r16
 6b2:	00 e0       	ldi	r16, 0x00	; 0
 6b4:	28 2d       	mov	r18, r8
 6b6:	39 2d       	mov	r19, r9
 6b8:	40 e0       	ldi	r20, 0x00	; 0
 6ba:	50 e0       	ldi	r21, 0x00	; 0
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	2c df       	rcall	.-424    	; 0x51e <_ZN3led8printIntExb>
	hardware::delay(60000);// add some fancy blinking <<<<<<<< /// in some cases it wouldn't be useful to stop evben for 60s. make some flag for that in class later
 6c6:	80 e6       	ldi	r24, 0x60	; 96
 6c8:	9a ee       	ldi	r25, 0xEA	; 234
 6ca:	6f de       	rcall	.-802    	; 0x3aa <_ZN8hardware5delayEj>
 6cc:	cb cf       	rjmp	.-106    	; 0x664 <_ZN3led5errorEj+0x42>
	led::clear();
	led::printSign('E');
	hardware::delay(3000);
	// led::pushByteVisible(0x00); to push a space between 'E' and code
	if (code < 100) led::printDigit(0);
	if (code < 10 ) led::printDigit(0);
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	1e df       	rcall	.-452    	; 0x50e <_ZN3led10printDigitEh>
	led::printInt(code, false);
 6d2:	c8 01       	movw	r24, r16
 6d4:	00 e0       	ldi	r16, 0x00	; 0
 6d6:	28 2f       	mov	r18, r24
 6d8:	39 2f       	mov	r19, r25
 6da:	40 e0       	ldi	r20, 0x00	; 0
 6dc:	50 e0       	ldi	r21, 0x00	; 0
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	1b df       	rcall	.-458    	; 0x51e <_ZN3led8printIntExb>
	hardware::delay(60000);// add some fancy blinking <<<<<<<< /// in some cases it wouldn't be useful to stop evben for 60s. make some flag for that in class later
 6e8:	80 e6       	ldi	r24, 0x60	; 96
 6ea:	9a ee       	ldi	r25, 0xEA	; 234
 6ec:	5e de       	rcall	.-836    	; 0x3aa <_ZN8hardware5delayEj>
 6ee:	b7 cf       	rjmp	.-146    	; 0x65e <_ZN3led5errorEj+0x3c>
			led::pushBitIntern(false);// this is only to avoid compiler optimization trashing this infinite loop
		}
	}
	SREG = SREG_temporal; // activate interrupts
	// <<< is watchdog turned of with cli()?? what behavior do you prefer?
}
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	0f 91       	pop	r16
 6f8:	ff 90       	pop	r15
 6fa:	ef 90       	pop	r14
 6fc:	df 90       	pop	r13
 6fe:	cf 90       	pop	r12
 700:	bf 90       	pop	r11
 702:	af 90       	pop	r10
 704:	9f 90       	pop	r9
 706:	8f 90       	pop	r8
 708:	08 95       	ret

0000070a <main>:
		/* push 15 bit to the light line (MSB first) and make it visible */
	
	inline void init(){//for init
		
		// IO register B for the lights:
		DDRB |= 0b00000111;// LATCH BIT ::: CLOCK BIT ::: DATA BIT
 70a:	87 b3       	in	r24, 0x17	; 23
 70c:	87 60       	ori	r24, 0x07	; 7
 70e:	87 bb       	out	0x17, r24	; 23
		PORTB &= 0b11111000;
 710:	88 b3       	in	r24, 0x18	; 24
 712:	88 7f       	andi	r24, 0xF8	; 248
 714:	88 bb       	out	0x18, r24	; 24
		
		pushLineVisible(0xFFFF);
 716:	8f ef       	ldi	r24, 0xFF	; 255
 718:	9f ef       	ldi	r25, 0xFF	; 255
 71a:	0d dd       	rcall	.-1510   	; 0x136 <_ZN4arch15pushLineVisibleEj>
		hardware::delay(1000);
 71c:	88 ee       	ldi	r24, 0xE8	; 232
 71e:	93 e0       	ldi	r25, 0x03	; 3
 720:	44 de       	rcall	.-888    	; 0x3aa <_ZN8hardware5delayEj>
		pushLineVisible(0x0000);
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	07 dd       	rcall	.-1522   	; 0x136 <_ZN4arch15pushLineVisibleEj>
		
		// maybe this could be left out, but for alarm function this could be useful
		runProgram(0);
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	14 de       	rcall	.-984    	; 0x354 <_ZN4arch10runProgramEh>
	// define dot position in ledline.cpp -> please find out it's hardware configuration
	
	// our code sequence for the first release:
			arch::init();
			while (1){
				for(uint16_t speed_by_delay = 2000; speed_by_delay > 599; speed_by_delay-=200){
 72c:	0f 2e       	mov	r0, r31
 72e:	f0 ed       	ldi	r31, 0xD0	; 208
 730:	ef 2e       	mov	r14, r31
 732:	f0 2d       	mov	r31, r0
 734:	0f 2e       	mov	r0, r31
 736:	f7 e0       	ldi	r31, 0x07	; 7
 738:	ff 2e       	mov	r15, r31
 73a:	f0 2d       	mov	r31, r0
					hardware::delay(speed_by_delay);
				}
				arch::pushLineVisible(0);
				hardware::delay(2000);
				for(uint8_t i = 0; i<= 12; ++i){
					arch::pushLineVisible(1<<i);
 73c:	01 e0       	ldi	r16, 0x01	; 1
 73e:	10 e0       	ldi	r17, 0x00	; 0
	// define dot position in ledline.cpp -> please find out it's hardware configuration
	
	// our code sequence for the first release:
			arch::init();
			while (1){
				for(uint16_t speed_by_delay = 2000; speed_by_delay > 599; speed_by_delay-=200){
 740:	ce 2d       	mov	r28, r14
 742:	df 2d       	mov	r29, r15
					arch::pushLineVisible(0b0);
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	f6 dc       	rcall	.-1556   	; 0x136 <_ZN4arch15pushLineVisibleEj>
					hardware::delay(speed_by_delay);
 74a:	ce 01       	movw	r24, r28
 74c:	2e de       	rcall	.-932    	; 0x3aa <_ZN8hardware5delayEj>
					arch::pushLineVisible(0b100000001);
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	91 e0       	ldi	r25, 0x01	; 1
 752:	f1 dc       	rcall	.-1566   	; 0x136 <_ZN4arch15pushLineVisibleEj>
					hardware::delay(speed_by_delay);
 754:	ce 01       	movw	r24, r28
 756:	29 de       	rcall	.-942    	; 0x3aa <_ZN8hardware5delayEj>
					arch::pushLineVisible(0b110000011);
 758:	83 e8       	ldi	r24, 0x83	; 131
 75a:	91 e0       	ldi	r25, 0x01	; 1
 75c:	ec dc       	rcall	.-1576   	; 0x136 <_ZN4arch15pushLineVisibleEj>
					hardware::delay(speed_by_delay);
 75e:	ce 01       	movw	r24, r28
 760:	24 de       	rcall	.-952    	; 0x3aa <_ZN8hardware5delayEj>
					arch::pushLineVisible(0b111000111);
 762:	87 ec       	ldi	r24, 0xC7	; 199
 764:	91 e0       	ldi	r25, 0x01	; 1
 766:	e7 dc       	rcall	.-1586   	; 0x136 <_ZN4arch15pushLineVisibleEj>
					hardware::delay(speed_by_delay);
 768:	ce 01       	movw	r24, r28
 76a:	1f de       	rcall	.-962    	; 0x3aa <_ZN8hardware5delayEj>
					arch::pushLineVisible(0b111101111);
 76c:	8f ee       	ldi	r24, 0xEF	; 239
 76e:	91 e0       	ldi	r25, 0x01	; 1
 770:	e2 dc       	rcall	.-1596   	; 0x136 <_ZN4arch15pushLineVisibleEj>
					hardware::delay(speed_by_delay);
 772:	ce 01       	movw	r24, r28
 774:	1a de       	rcall	.-972    	; 0x3aa <_ZN8hardware5delayEj>
					arch::pushLineVisible(0b111111111);
 776:	8f ef       	ldi	r24, 0xFF	; 255
 778:	91 e0       	ldi	r25, 0x01	; 1
 77a:	dd dc       	rcall	.-1606   	; 0x136 <_ZN4arch15pushLineVisibleEj>
					hardware::delay(speed_by_delay);
 77c:	ce 01       	movw	r24, r28
 77e:	15 de       	rcall	.-982    	; 0x3aa <_ZN8hardware5delayEj>
	// define dot position in ledline.cpp -> please find out it's hardware configuration
	
	// our code sequence for the first release:
			arch::init();
			while (1){
				for(uint16_t speed_by_delay = 2000; speed_by_delay > 599; speed_by_delay-=200){
 780:	c8 5c       	subi	r28, 0xC8	; 200
 782:	d1 09       	sbc	r29, r1
 784:	c0 39       	cpi	r28, 0x90	; 144
 786:	21 e0       	ldi	r18, 0x01	; 1
 788:	d2 07       	cpc	r29, r18
 78a:	e1 f6       	brne	.-72     	; 0x744 <main+0x3a>
					arch::pushLineVisible(0b111101111);
					hardware::delay(speed_by_delay);
					arch::pushLineVisible(0b111111111);
					hardware::delay(speed_by_delay);
				}
				arch::pushLineVisible(0);
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	d2 dc       	rcall	.-1628   	; 0x136 <_ZN4arch15pushLineVisibleEj>
				hardware::delay(2000);
 792:	8e 2d       	mov	r24, r14
 794:	9f 2d       	mov	r25, r15
 796:	09 de       	rcall	.-1006   	; 0x3aa <_ZN8hardware5delayEj>
 798:	c0 e0       	ldi	r28, 0x00	; 0
 79a:	d0 e0       	ldi	r29, 0x00	; 0
				for(uint8_t i = 0; i<= 12; ++i){
					arch::pushLineVisible(1<<i);
 79c:	c8 01       	movw	r24, r16
 79e:	0c 2e       	mov	r0, r28
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <main+0x9c>
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	0a 94       	dec	r0
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <main+0x98>
 7aa:	c5 dc       	rcall	.-1654   	; 0x136 <_ZN4arch15pushLineVisibleEj>
					hardware::delay(1300);
 7ac:	84 e1       	ldi	r24, 0x14	; 20
 7ae:	95 e0       	ldi	r25, 0x05	; 5
 7b0:	fc dd       	rcall	.-1032   	; 0x3aa <_ZN8hardware5delayEj>
 7b2:	21 96       	adiw	r28, 0x01	; 1
					arch::pushLineVisible(0b111111111);
					hardware::delay(speed_by_delay);
				}
				arch::pushLineVisible(0);
				hardware::delay(2000);
				for(uint8_t i = 0; i<= 12; ++i){
 7b4:	cd 30       	cpi	r28, 0x0D	; 13
 7b6:	d1 05       	cpc	r29, r1
 7b8:	89 f7       	brne	.-30     	; 0x79c <main+0x92>
 7ba:	c2 cf       	rjmp	.-124    	; 0x740 <main+0x36>

000007bc <__udivmodhi4>:
 7bc:	aa 1b       	sub	r26, r26
 7be:	bb 1b       	sub	r27, r27
 7c0:	51 e1       	ldi	r21, 0x11	; 17
 7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <__udivmodhi4_ep>

000007c4 <__udivmodhi4_loop>:
 7c4:	aa 1f       	adc	r26, r26
 7c6:	bb 1f       	adc	r27, r27
 7c8:	a6 17       	cp	r26, r22
 7ca:	b7 07       	cpc	r27, r23
 7cc:	10 f0       	brcs	.+4      	; 0x7d2 <__udivmodhi4_ep>
 7ce:	a6 1b       	sub	r26, r22
 7d0:	b7 0b       	sbc	r27, r23

000007d2 <__udivmodhi4_ep>:
 7d2:	88 1f       	adc	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	5a 95       	dec	r21
 7d8:	a9 f7       	brne	.-22     	; 0x7c4 <__udivmodhi4_loop>
 7da:	80 95       	com	r24
 7dc:	90 95       	com	r25
 7de:	bc 01       	movw	r22, r24
 7e0:	cd 01       	movw	r24, r26
 7e2:	08 95       	ret

000007e4 <__divmodhi4>:
 7e4:	97 fb       	bst	r25, 7
 7e6:	07 2e       	mov	r0, r23
 7e8:	16 f4       	brtc	.+4      	; 0x7ee <__divmodhi4+0xa>
 7ea:	00 94       	com	r0
 7ec:	06 d0       	rcall	.+12     	; 0x7fa <__divmodhi4_neg1>
 7ee:	77 fd       	sbrc	r23, 7
 7f0:	08 d0       	rcall	.+16     	; 0x802 <__divmodhi4_neg2>
 7f2:	e4 df       	rcall	.-56     	; 0x7bc <__udivmodhi4>
 7f4:	07 fc       	sbrc	r0, 7
 7f6:	05 d0       	rcall	.+10     	; 0x802 <__divmodhi4_neg2>
 7f8:	3e f4       	brtc	.+14     	; 0x808 <__divmodhi4_exit>

000007fa <__divmodhi4_neg1>:
 7fa:	90 95       	com	r25
 7fc:	81 95       	neg	r24
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	08 95       	ret

00000802 <__divmodhi4_neg2>:
 802:	70 95       	com	r23
 804:	61 95       	neg	r22
 806:	7f 4f       	sbci	r23, 0xFF	; 255

00000808 <__divmodhi4_exit>:
 808:	08 95       	ret

0000080a <__moddi3>:
 80a:	68 94       	set
 80c:	01 c0       	rjmp	.+2      	; 0x810 <__divdi3_moddi3>

0000080e <__divdi3>:
 80e:	e8 94       	clt

00000810 <__divdi3_moddi3>:
 810:	f9 2f       	mov	r31, r25
 812:	f1 2b       	or	r31, r17
 814:	0a f0       	brmi	.+2      	; 0x818 <__divdi3_moddi3+0x8>
 816:	27 c0       	rjmp	.+78     	; 0x866 <__udivdi3_umoddi3>
 818:	a0 e0       	ldi	r26, 0x00	; 0
 81a:	b0 e0       	ldi	r27, 0x00	; 0
 81c:	e1 e1       	ldi	r30, 0x11	; 17
 81e:	f4 e0       	ldi	r31, 0x04	; 4
 820:	93 c0       	rjmp	.+294    	; 0x948 <__prologue_saves__+0xc>
 822:	09 2e       	mov	r0, r25
 824:	05 94       	asr	r0
 826:	1a f4       	brpl	.+6      	; 0x82e <__divdi3_moddi3+0x1e>
 828:	79 d0       	rcall	.+242    	; 0x91c <__negdi2>
 82a:	11 23       	and	r17, r17
 82c:	92 f4       	brpl	.+36     	; 0x852 <__divdi3_moddi3+0x42>
 82e:	f0 e8       	ldi	r31, 0x80	; 128
 830:	0f 26       	eor	r0, r31
 832:	ff ef       	ldi	r31, 0xFF	; 255
 834:	e0 94       	com	r14
 836:	f0 94       	com	r15
 838:	00 95       	com	r16
 83a:	10 95       	com	r17
 83c:	b0 94       	com	r11
 83e:	c0 94       	com	r12
 840:	d0 94       	com	r13
 842:	a1 94       	neg	r10
 844:	bf 0a       	sbc	r11, r31
 846:	cf 0a       	sbc	r12, r31
 848:	df 0a       	sbc	r13, r31
 84a:	ef 0a       	sbc	r14, r31
 84c:	ff 0a       	sbc	r15, r31
 84e:	0f 0b       	sbc	r16, r31
 850:	1f 0b       	sbc	r17, r31
 852:	13 d0       	rcall	.+38     	; 0x87a <__udivmod64>
 854:	07 fc       	sbrc	r0, 7
 856:	62 d0       	rcall	.+196    	; 0x91c <__negdi2>
 858:	cd b7       	in	r28, 0x3d	; 61
 85a:	de b7       	in	r29, 0x3e	; 62
 85c:	ec e0       	ldi	r30, 0x0C	; 12
 85e:	90 c0       	rjmp	.+288    	; 0x980 <__epilogue_restores__+0xc>

00000860 <__umoddi3>:
 860:	68 94       	set
 862:	01 c0       	rjmp	.+2      	; 0x866 <__udivdi3_umoddi3>

00000864 <__udivdi3>:
 864:	e8 94       	clt

00000866 <__udivdi3_umoddi3>:
 866:	8f 92       	push	r8
 868:	9f 92       	push	r9
 86a:	cf 93       	push	r28
 86c:	df 93       	push	r29
 86e:	05 d0       	rcall	.+10     	; 0x87a <__udivmod64>
 870:	df 91       	pop	r29
 872:	cf 91       	pop	r28
 874:	9f 90       	pop	r9
 876:	8f 90       	pop	r8
 878:	08 95       	ret

0000087a <__udivmod64>:
 87a:	88 24       	eor	r8, r8
 87c:	99 24       	eor	r9, r9
 87e:	f4 01       	movw	r30, r8
 880:	e4 01       	movw	r28, r8
 882:	b0 e4       	ldi	r27, 0x40	; 64
 884:	9f 93       	push	r25
 886:	aa 27       	eor	r26, r26
 888:	9a 15       	cp	r25, r10
 88a:	8b 04       	cpc	r8, r11
 88c:	9c 04       	cpc	r9, r12
 88e:	ed 05       	cpc	r30, r13
 890:	fe 05       	cpc	r31, r14
 892:	cf 05       	cpc	r28, r15
 894:	d0 07       	cpc	r29, r16
 896:	a1 07       	cpc	r26, r17
 898:	98 f4       	brcc	.+38     	; 0x8c0 <__udivmod64+0x46>
 89a:	ad 2f       	mov	r26, r29
 89c:	dc 2f       	mov	r29, r28
 89e:	cf 2f       	mov	r28, r31
 8a0:	fe 2f       	mov	r31, r30
 8a2:	e9 2d       	mov	r30, r9
 8a4:	98 2c       	mov	r9, r8
 8a6:	89 2e       	mov	r8, r25
 8a8:	98 2f       	mov	r25, r24
 8aa:	87 2f       	mov	r24, r23
 8ac:	76 2f       	mov	r23, r22
 8ae:	65 2f       	mov	r22, r21
 8b0:	54 2f       	mov	r21, r20
 8b2:	43 2f       	mov	r20, r19
 8b4:	32 2f       	mov	r19, r18
 8b6:	22 27       	eor	r18, r18
 8b8:	b8 50       	subi	r27, 0x08	; 8
 8ba:	31 f7       	brne	.-52     	; 0x888 <__udivmod64+0xe>
 8bc:	bf 91       	pop	r27
 8be:	27 c0       	rjmp	.+78     	; 0x90e <__udivmod64+0x94>
 8c0:	1b 2e       	mov	r1, r27
 8c2:	bf 91       	pop	r27
 8c4:	bb 27       	eor	r27, r27
 8c6:	22 0f       	add	r18, r18
 8c8:	33 1f       	adc	r19, r19
 8ca:	44 1f       	adc	r20, r20
 8cc:	55 1f       	adc	r21, r21
 8ce:	66 1f       	adc	r22, r22
 8d0:	77 1f       	adc	r23, r23
 8d2:	88 1f       	adc	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	88 1c       	adc	r8, r8
 8d8:	99 1c       	adc	r9, r9
 8da:	ee 1f       	adc	r30, r30
 8dc:	ff 1f       	adc	r31, r31
 8de:	cc 1f       	adc	r28, r28
 8e0:	dd 1f       	adc	r29, r29
 8e2:	aa 1f       	adc	r26, r26
 8e4:	bb 1f       	adc	r27, r27
 8e6:	8a 14       	cp	r8, r10
 8e8:	9b 04       	cpc	r9, r11
 8ea:	ec 05       	cpc	r30, r12
 8ec:	fd 05       	cpc	r31, r13
 8ee:	ce 05       	cpc	r28, r14
 8f0:	df 05       	cpc	r29, r15
 8f2:	a0 07       	cpc	r26, r16
 8f4:	b1 07       	cpc	r27, r17
 8f6:	48 f0       	brcs	.+18     	; 0x90a <__udivmod64+0x90>
 8f8:	8a 18       	sub	r8, r10
 8fa:	9b 08       	sbc	r9, r11
 8fc:	ec 09       	sbc	r30, r12
 8fe:	fd 09       	sbc	r31, r13
 900:	ce 09       	sbc	r28, r14
 902:	df 09       	sbc	r29, r15
 904:	a0 0b       	sbc	r26, r16
 906:	b1 0b       	sbc	r27, r17
 908:	21 60       	ori	r18, 0x01	; 1
 90a:	1a 94       	dec	r1
 90c:	e1 f6       	brne	.-72     	; 0x8c6 <__udivmod64+0x4c>
 90e:	2e f4       	brtc	.+10     	; 0x91a <__udivmod64+0xa0>
 910:	94 01       	movw	r18, r8
 912:	af 01       	movw	r20, r30
 914:	be 01       	movw	r22, r28
 916:	cd 01       	movw	r24, r26
 918:	00 0c       	add	r0, r0
 91a:	08 95       	ret

0000091c <__negdi2>:
 91c:	60 95       	com	r22
 91e:	70 95       	com	r23
 920:	80 95       	com	r24
 922:	90 95       	com	r25
 924:	30 95       	com	r19
 926:	40 95       	com	r20
 928:	50 95       	com	r21
 92a:	21 95       	neg	r18
 92c:	3f 4f       	sbci	r19, 0xFF	; 255
 92e:	4f 4f       	sbci	r20, 0xFF	; 255
 930:	5f 4f       	sbci	r21, 0xFF	; 255
 932:	6f 4f       	sbci	r22, 0xFF	; 255
 934:	7f 4f       	sbci	r23, 0xFF	; 255
 936:	8f 4f       	sbci	r24, 0xFF	; 255
 938:	9f 4f       	sbci	r25, 0xFF	; 255
 93a:	08 95       	ret

0000093c <__prologue_saves__>:
 93c:	2f 92       	push	r2
 93e:	3f 92       	push	r3
 940:	4f 92       	push	r4
 942:	5f 92       	push	r5
 944:	6f 92       	push	r6
 946:	7f 92       	push	r7
 948:	8f 92       	push	r8
 94a:	9f 92       	push	r9
 94c:	af 92       	push	r10
 94e:	bf 92       	push	r11
 950:	cf 92       	push	r12
 952:	df 92       	push	r13
 954:	ef 92       	push	r14
 956:	ff 92       	push	r15
 958:	0f 93       	push	r16
 95a:	1f 93       	push	r17
 95c:	cf 93       	push	r28
 95e:	df 93       	push	r29
 960:	cd b7       	in	r28, 0x3d	; 61
 962:	de b7       	in	r29, 0x3e	; 62
 964:	ca 1b       	sub	r28, r26
 966:	db 0b       	sbc	r29, r27
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	f8 94       	cli
 96c:	de bf       	out	0x3e, r29	; 62
 96e:	0f be       	out	0x3f, r0	; 63
 970:	cd bf       	out	0x3d, r28	; 61
 972:	09 94       	ijmp

00000974 <__epilogue_restores__>:
 974:	2a 88       	ldd	r2, Y+18	; 0x12
 976:	39 88       	ldd	r3, Y+17	; 0x11
 978:	48 88       	ldd	r4, Y+16	; 0x10
 97a:	5f 84       	ldd	r5, Y+15	; 0x0f
 97c:	6e 84       	ldd	r6, Y+14	; 0x0e
 97e:	7d 84       	ldd	r7, Y+13	; 0x0d
 980:	8c 84       	ldd	r8, Y+12	; 0x0c
 982:	9b 84       	ldd	r9, Y+11	; 0x0b
 984:	aa 84       	ldd	r10, Y+10	; 0x0a
 986:	b9 84       	ldd	r11, Y+9	; 0x09
 988:	c8 84       	ldd	r12, Y+8	; 0x08
 98a:	df 80       	ldd	r13, Y+7	; 0x07
 98c:	ee 80       	ldd	r14, Y+6	; 0x06
 98e:	fd 80       	ldd	r15, Y+5	; 0x05
 990:	0c 81       	ldd	r16, Y+4	; 0x04
 992:	1b 81       	ldd	r17, Y+3	; 0x03
 994:	aa 81       	ldd	r26, Y+2	; 0x02
 996:	b9 81       	ldd	r27, Y+1	; 0x01
 998:	ce 0f       	add	r28, r30
 99a:	d1 1d       	adc	r29, r1
 99c:	0f b6       	in	r0, 0x3f	; 63
 99e:	f8 94       	cli
 9a0:	de bf       	out	0x3e, r29	; 62
 9a2:	0f be       	out	0x3f, r0	; 63
 9a4:	cd bf       	out	0x3d, r28	; 61
 9a6:	ed 01       	movw	r28, r26
 9a8:	08 95       	ret

000009aa <__ashldi3>:
 9aa:	0f 93       	push	r16
 9ac:	08 30       	cpi	r16, 0x08	; 8
 9ae:	90 f0       	brcs	.+36     	; 0x9d4 <__ashldi3+0x2a>
 9b0:	98 2f       	mov	r25, r24
 9b2:	87 2f       	mov	r24, r23
 9b4:	76 2f       	mov	r23, r22
 9b6:	65 2f       	mov	r22, r21
 9b8:	54 2f       	mov	r21, r20
 9ba:	43 2f       	mov	r20, r19
 9bc:	32 2f       	mov	r19, r18
 9be:	22 27       	eor	r18, r18
 9c0:	08 50       	subi	r16, 0x08	; 8
 9c2:	f4 cf       	rjmp	.-24     	; 0x9ac <__ashldi3+0x2>
 9c4:	22 0f       	add	r18, r18
 9c6:	33 1f       	adc	r19, r19
 9c8:	44 1f       	adc	r20, r20
 9ca:	55 1f       	adc	r21, r21
 9cc:	66 1f       	adc	r22, r22
 9ce:	77 1f       	adc	r23, r23
 9d0:	88 1f       	adc	r24, r24
 9d2:	99 1f       	adc	r25, r25
 9d4:	0a 95       	dec	r16
 9d6:	b2 f7       	brpl	.-20     	; 0x9c4 <__ashldi3+0x1a>
 9d8:	0f 91       	pop	r16
 9da:	08 95       	ret

000009dc <__ashrdi3>:
 9dc:	97 fb       	bst	r25, 7
 9de:	10 f8       	bld	r1, 0

000009e0 <__lshrdi3>:
 9e0:	16 94       	lsr	r1
 9e2:	00 08       	sbc	r0, r0
 9e4:	0f 93       	push	r16
 9e6:	08 30       	cpi	r16, 0x08	; 8
 9e8:	98 f0       	brcs	.+38     	; 0xa10 <__lshrdi3+0x30>
 9ea:	08 50       	subi	r16, 0x08	; 8
 9ec:	23 2f       	mov	r18, r19
 9ee:	34 2f       	mov	r19, r20
 9f0:	45 2f       	mov	r20, r21
 9f2:	56 2f       	mov	r21, r22
 9f4:	67 2f       	mov	r22, r23
 9f6:	78 2f       	mov	r23, r24
 9f8:	89 2f       	mov	r24, r25
 9fa:	90 2d       	mov	r25, r0
 9fc:	f4 cf       	rjmp	.-24     	; 0x9e6 <__lshrdi3+0x6>
 9fe:	05 94       	asr	r0
 a00:	97 95       	ror	r25
 a02:	87 95       	ror	r24
 a04:	77 95       	ror	r23
 a06:	67 95       	ror	r22
 a08:	57 95       	ror	r21
 a0a:	47 95       	ror	r20
 a0c:	37 95       	ror	r19
 a0e:	27 95       	ror	r18
 a10:	0a 95       	dec	r16
 a12:	aa f7       	brpl	.-22     	; 0x9fe <__lshrdi3+0x1e>
 a14:	0f 91       	pop	r16
 a16:	08 95       	ret

00000a18 <__adddi3>:
 a18:	2a 0d       	add	r18, r10
 a1a:	3b 1d       	adc	r19, r11
 a1c:	4c 1d       	adc	r20, r12
 a1e:	5d 1d       	adc	r21, r13
 a20:	6e 1d       	adc	r22, r14
 a22:	7f 1d       	adc	r23, r15
 a24:	80 1f       	adc	r24, r16
 a26:	91 1f       	adc	r25, r17
 a28:	08 95       	ret

00000a2a <eeprom_read_byte>:
 a2a:	e1 99       	sbic	0x1c, 1	; 28
 a2c:	fe cf       	rjmp	.-4      	; 0xa2a <eeprom_read_byte>
 a2e:	9f bb       	out	0x1f, r25	; 31
 a30:	8e bb       	out	0x1e, r24	; 30
 a32:	e0 9a       	sbi	0x1c, 0	; 28
 a34:	99 27       	eor	r25, r25
 a36:	8d b3       	in	r24, 0x1d	; 29
 a38:	08 95       	ret

00000a3a <_exit>:
 a3a:	f8 94       	cli

00000a3c <__stop_program>:
 a3c:	ff cf       	rjmp	.-2      	; 0xa3c <__stop_program>
